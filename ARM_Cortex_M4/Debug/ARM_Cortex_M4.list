
ARM_Cortex_M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000615c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006478  08006478  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006480  08006480  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014420  20000080  08006508  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a0  08006508  000244a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116b8  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f3  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00034160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00035248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234ca  00000000  00000000  000361c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124de  00000000  00000000  00059692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f68  00000000  00000000  0006bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049fc  00000000  00000000  00140b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062d4 	.word	0x080062d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080062d4 	.word	0x080062d4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eb8 	.word	0x20012eb8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb5b 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f853 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8bb 	bl	800079c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x94>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <main+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000632:	481e      	ldr	r0, [pc, #120]	; (80006ac <main+0x98>)
 8000634:	f003 f89c 	bl	8003770 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000638:	f002 fec4 	bl	80033c4 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0x9c>)
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	491a      	ldr	r1, [pc, #104]	; (80006b4 <main+0xa0>)
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <main+0xa4>)
 800064e:	f001 fd80 	bl	8002152 <xTaskCreate>
 8000652:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d00a      	beq.n	8000670 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066c:	bf00      	nop
 800066e:	e7fe      	b.n	800066e <main+0x5a>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <main+0xa8>)
 800067a:	22c8      	movs	r2, #200	; 0xc8
 800067c:	4910      	ldr	r1, [pc, #64]	; (80006c0 <main+0xac>)
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <main+0xb0>)
 8000680:	f001 fd67 	bl	8002152 <xTaskCreate>
 8000684:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00a      	beq.n	80006a2 <main+0x8e>
        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	60fb      	str	r3, [r7, #12]
    }
 800069e:	bf00      	nop
 80006a0:	e7fe      	b.n	80006a0 <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80006a2:	f001 feb9 	bl	8002418 <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x92>
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	0007a120 	.word	0x0007a120
 80006b0:	080062ec 	.word	0x080062ec
 80006b4:	08006304 	.word	0x08006304
 80006b8:	08000a5d 	.word	0x08000a5d
 80006bc:	0800630c 	.word	0x0800630c
 80006c0:	08006324 	.word	0x08006324
 80006c4:	08000a99 	.word	0x08000a99

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 f972 	bl	80059c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800073c:	23a8      	movs	r3, #168	; 0xa8
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fd9b 	bl	8001288 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9ce 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fff2 	bl	8001764 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f9b7 	bl	8000af8 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	4ba1      	ldr	r3, [pc, #644]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4aa0      	ldr	r2, [pc, #640]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b9e      	ldr	r3, [pc, #632]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	4b9a      	ldr	r3, [pc, #616]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a99      	ldr	r2, [pc, #612]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b97      	ldr	r3, [pc, #604]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b93      	ldr	r3, [pc, #588]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a92      	ldr	r2, [pc, #584]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b90      	ldr	r3, [pc, #576]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b8c      	ldr	r3, [pc, #560]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a8b      	ldr	r2, [pc, #556]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b89      	ldr	r3, [pc, #548]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b85      	ldr	r3, [pc, #532]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a84      	ldr	r2, [pc, #528]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b82      	ldr	r3, [pc, #520]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b7e      	ldr	r3, [pc, #504]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a7d      	ldr	r2, [pc, #500]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b7b      	ldr	r3, [pc, #492]	; (8000a3c <MX_GPIO_Init+0x2a0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	4878      	ldr	r0, [pc, #480]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000860:	f000 fcf8 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	4876      	ldr	r0, [pc, #472]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 800086a:	f000 fcf3 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800086e:	2200      	movs	r2, #0
 8000870:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000874:	4874      	ldr	r0, [pc, #464]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 8000876:	f000 fced 	bl	8001254 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087a:	2308      	movs	r3, #8
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	486b      	ldr	r0, [pc, #428]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000892:	f000 fb43 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4865      	ldr	r0, [pc, #404]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 80008ae:	f000 fb35 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b2:	2308      	movs	r3, #8
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	485d      	ldr	r0, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 80008ce:	f000 fb25 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	4b5d      	ldr	r3, [pc, #372]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	485a      	ldr	r0, [pc, #360]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80008e6:	f000 fb19 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ea:	2310      	movs	r3, #16
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fa:	2306      	movs	r3, #6
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4852      	ldr	r0, [pc, #328]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000906:	f000 fb09 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800090a:	23e0      	movs	r3, #224	; 0xe0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800091a:	2305      	movs	r3, #5
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000926:	f000 faf9 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800092a:	2304      	movs	r3, #4
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4845      	ldr	r0, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 800093e:	f000 faed 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000954:	2305      	movs	r3, #5
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	483d      	ldr	r0, [pc, #244]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000960:	f000 fadc 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000964:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000968:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4832      	ldr	r0, [pc, #200]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 800097e:	f000 facd 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000982:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000994:	2306      	movs	r3, #6
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4829      	ldr	r0, [pc, #164]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 80009a0:	f000 fabc 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4825      	ldr	r0, [pc, #148]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009ba:	f000 faaf 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d0:	230a      	movs	r3, #10
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	481d      	ldr	r0, [pc, #116]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009dc:	f000 fa9e 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e0:	2320      	movs	r3, #32
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80009f4:	f000 fa92 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fe:	2312      	movs	r3, #18
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000a16:	f000 fa81 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_GPIO_Init+0x2bc>)
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000a2e:	f000 fa75 	bl	8000f1c <HAL_GPIO_Init>

}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	10110000 	.word	0x10110000
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400
 8000a58:	10120000 	.word	0x10120000

08000a5c <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09c      	sub	sp, #112	; 0x70
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a64:	f107 000c 	add.w	r0, r7, #12
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <task1_handler+0x34>)
 8000a6c:	2164      	movs	r1, #100	; 0x64
 8000a6e:	f004 ffaf 	bl	80059d0 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4618      	mov	r0, r3
 8000a78:	f004 fec2 	bl	8005800 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <task1_handler+0x38>)
 8000a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	f3bf 8f4f 	dsb	sy
 8000a88:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a8c:	e7ea      	b.n	8000a64 <task1_handler+0x8>
 8000a8e:	bf00      	nop
 8000a90:	0800632c 	.word	0x0800632c
 8000a94:	e000ed04 	.word	0xe000ed04

08000a98 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b09c      	sub	sp, #112	; 0x70
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000aa0:	f107 000c 	add.w	r0, r7, #12
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a09      	ldr	r2, [pc, #36]	; (8000acc <task2_handler+0x34>)
 8000aa8:	2164      	movs	r1, #100	; 0x64
 8000aaa:	f004 ff91 	bl	80059d0 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f004 fea4 	bl	8005800 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <task2_handler+0x38>)
 8000aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	f3bf 8f4f 	dsb	sy
 8000ac4:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000ac8:	e7ea      	b.n	8000aa0 <task2_handler+0x8>
 8000aca:	bf00      	nop
 8000acc:	0800632c 	.word	0x0800632c
 8000ad0:	e000ed04 	.word	0xe000ed04

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 f917 	bl	8000d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40001000 	.word	0x40001000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b46:	f002 f887 	bl	8002c58 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	2036      	movs	r0, #54	; 0x36
 8000b6e:	f000 f9ab 	bl	8000ec8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000b72:	2036      	movs	r0, #54	; 0x36
 8000b74:	f000 f9c4 	bl	8000f00 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b94:	f107 0210 	add.w	r2, r7, #16
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 ffec 	bl	8001b7c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ba4:	f000 ffd6 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_InitTick+0xa8>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_InitTick+0xac>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <HAL_InitTick+0xb0>)
 8000bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_InitTick+0xac>)
 8000bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_InitTick+0xac>)
 8000bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_InitTick+0xac>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_InitTick+0xac>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_InitTick+0xac>)
 8000bde:	f000 ffff 	bl	8001be0 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d104      	bne.n	8000bf2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <HAL_InitTick+0xac>)
 8000bea:	f001 f82e 	bl	8001c4a <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3730      	adds	r7, #48	; 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	2000009c 	.word	0x2000009c
 8000c08:	40001000 	.word	0x40001000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM6_DAC_IRQHandler+0x10>)
 8000c46:	f001 f824 	bl	8001c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000009c 	.word	0x2000009c

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <SystemInit+0x28>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <SystemInit+0x28>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SystemInit+0x28>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c86:	e003      	b.n	8000c90 <LoopCopyDataInit>

08000c88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c8e:	3104      	adds	r1, #4

08000c90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c98:	d3f6      	bcc.n	8000c88 <CopyDataInit>
  ldr  r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c9c:	e002      	b.n	8000ca4 <LoopFillZerobss>

08000c9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca0:	f842 3b04 	str.w	r3, [r2], #4

08000ca4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ca6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ca8:	d3f9      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd3 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f004 fe45 	bl	800593c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fcaf 	bl	8000614 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cbc:	08006488 	.word	0x08006488
  ldr  r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cc4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000cc8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000ccc:	200144a0 	.word	0x200144a0

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f8d8 	bl	8000eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ff28 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fefe 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	200000dc 	.word	0x200000dc

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200000dc 	.word	0x200000dc

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff4c 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eda:	f7ff ff61 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f7ff ffb1 	bl	8000e4c <NVIC_EncodePriority>
 8000eea:	4602      	mov	r2, r0
 8000eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff80 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff54 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e16b      	b.n	8001210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 815a 	bne.w	800120a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d00b      	beq.n	8000f76 <HAL_GPIO_Init+0x5a>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d007      	beq.n	8000f76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6a:	2b11      	cmp	r3, #17
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0xfc>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b12      	cmp	r3, #18
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80b4 	beq.w	800120a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a5f      	ldr	r2, [pc, #380]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a5b      	ldr	r2, [pc, #364]	; (800122c <HAL_GPIO_Init+0x310>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	; (8001230 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	; (8001234 <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	; (8001238 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	; (8001240 <HAL_GPIO_Init+0x324>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	; (8001244 <HAL_GPIO_Init+0x328>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	; (8001248 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <HAL_GPIO_Init+0x330>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x20a>
 8001122:	2307      	movs	r3, #7
 8001124:	e00e      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001126:	2308      	movs	r3, #8
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112a:	2306      	movs	r3, #6
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001142:	2300      	movs	r3, #0
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	4935      	ldr	r1, [pc, #212]	; (800122c <HAL_GPIO_Init+0x310>)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001186:	4a32      	ldr	r2, [pc, #200]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_GPIO_Init+0x334>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f67f ae90 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40021400 	.word	0x40021400
 8001248:	40021800 	.word	0x40021800
 800124c:	40021c00 	.word	0x40021c00
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e25e      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d075      	beq.n	8001392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00c      	beq.n	80012cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b82      	ldr	r3, [pc, #520]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ca:	d10b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4b7e      	ldr	r3, [pc, #504]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d157      	bne.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e239      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x74>
 80012ee:	4b76      	ldr	r3, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a75      	ldr	r2, [pc, #468]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6c      	ldr	r2, [pc, #432]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 8001320:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a68      	ldr	r2, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fcfe 	bl	8000d40 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fcfa 	bl	8000d40 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1fe      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xc0>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fcea 	bl	8000d40 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fce6 	bl	8000d40 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1ea      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1be      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4937      	ldr	r1, [pc, #220]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b34      	ldr	r3, [pc, #208]	; (80014cc <HAL_RCC_OscConfig+0x244>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fc9f 	bl	8000d40 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fc9b 	bl	8000d40 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e19f      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4925      	ldr	r1, [pc, #148]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_RCC_OscConfig+0x244>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fc7e 	bl	8000d40 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fc7a 	bl	8000d40 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e17e      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_RCC_OscConfig+0x248>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fc5e 	bl	8000d40 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fc5a 	bl	8000d40 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e15e      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
 80014a6:	e01b      	b.n	80014e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_RCC_OscConfig+0x248>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fc47 	bl	8000d40 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e00e      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc43 	bl	8000d40 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d907      	bls.n	80014d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e147      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ea      	bne.n	80014b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8097 	beq.w	800161c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b7d      	ldr	r3, [pc, #500]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a7c      	ldr	r2, [pc, #496]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b7a      	ldr	r3, [pc, #488]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b77      	ldr	r3, [pc, #476]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b74      	ldr	r3, [pc, #464]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a73      	ldr	r2, [pc, #460]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fc03 	bl	8000d40 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff fbff 	bl	8000d40 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e103      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b6a      	ldr	r3, [pc, #424]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x2ea>
 8001564:	4b64      	ldr	r3, [pc, #400]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a63      	ldr	r2, [pc, #396]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x30c>
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a5e      	ldr	r2, [pc, #376]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4a5b      	ldr	r2, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	; 0x70
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001594:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
 80015a0:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d015      	beq.n	80015e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fbc4 	bl	8000d40 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fbc0 	bl	8000d40 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0c2      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ee      	beq.n	80015bc <HAL_RCC_OscConfig+0x334>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fbae 	bl	8000d40 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fbaa 	bl	8000d40 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0ac      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ee      	bne.n	80015e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a38      	ldr	r2, [pc, #224]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8098 	beq.w	8001756 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d05c      	beq.n	80016ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d141      	bne.n	80016be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb7e 	bl	8000d40 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb7a 	bl	8000d40 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e07e      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	491b      	ldr	r1, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x478>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fb53 	bl	8000d40 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fb4f 	bl	8000d40 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e053      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x416>
 80016bc:	e04b      	b.n	8001756 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x478>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb3c 	bl	8000d40 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fb38 	bl	8000d40 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e03c      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x444>
 80016ea:	e034      	b.n	8001756 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e02f      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000
 8001700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	429a      	cmp	r2, r3
 8001716:	d11c      	bne.n	8001752 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d115      	bne.n	8001752 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001732:	4293      	cmp	r3, r2
 8001734:	d10d      	bne.n	8001752 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0cc      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d90c      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b63      	ldr	r3, [pc, #396]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0b8      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a58      	ldr	r2, [pc, #352]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	494d      	ldr	r1, [pc, #308]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d044      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d119      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e067      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4934      	ldr	r1, [pc, #208]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff fa74 	bl	8000d40 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff fa70 	bl	8000d40 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d20c      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e032      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4916      	ldr	r1, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	490e      	ldr	r1, [pc, #56]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	f000 f821 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	490a      	ldr	r1, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	5ccb      	ldrb	r3, [r1, r3]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f924 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00
 8001920:	40023800 	.word	0x40023800
 8001924:	08006404 	.word	0x08006404
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001934:	b094      	sub	sp, #80	; 0x50
 8001936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	647b      	str	r3, [r7, #68]	; 0x44
 800193c:	2300      	movs	r3, #0
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001940:	2300      	movs	r3, #0
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001948:	4b79      	ldr	r3, [pc, #484]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d00d      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x40>
 8001954:	2b08      	cmp	r3, #8
 8001956:	f200 80e1 	bhi.w	8001b1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x34>
 800195e:	2b04      	cmp	r3, #4
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x3a>
 8001962:	e0db      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001964:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001968:	e0db      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x208>)
 800196c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800196e:	e0d8      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001970:	4b6f      	ldr	r3, [pc, #444]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001978:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197a:	4b6d      	ldr	r3, [pc, #436]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	2200      	movs	r2, #0
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001990:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
 800199e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019a2:	4622      	mov	r2, r4
 80019a4:	462b      	mov	r3, r5
 80019a6:	f04f 0000 	mov.w	r0, #0
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	0159      	lsls	r1, r3, #5
 80019b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b4:	0150      	lsls	r0, r2, #5
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4621      	mov	r1, r4
 80019bc:	1a51      	subs	r1, r2, r1
 80019be:	6139      	str	r1, [r7, #16]
 80019c0:	4629      	mov	r1, r5
 80019c2:	eb63 0301 	sbc.w	r3, r3, r1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019d4:	4659      	mov	r1, fp
 80019d6:	018b      	lsls	r3, r1, #6
 80019d8:	4651      	mov	r1, sl
 80019da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019de:	4651      	mov	r1, sl
 80019e0:	018a      	lsls	r2, r1, #6
 80019e2:	4651      	mov	r1, sl
 80019e4:	ebb2 0801 	subs.w	r8, r2, r1
 80019e8:	4659      	mov	r1, fp
 80019ea:	eb63 0901 	sbc.w	r9, r3, r1
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a02:	4690      	mov	r8, r2
 8001a04:	4699      	mov	r9, r3
 8001a06:	4623      	mov	r3, r4
 8001a08:	eb18 0303 	adds.w	r3, r8, r3
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	462b      	mov	r3, r5
 8001a10:	eb49 0303 	adc.w	r3, r9, r3
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a22:	4629      	mov	r1, r5
 8001a24:	024b      	lsls	r3, r1, #9
 8001a26:	4621      	mov	r1, r4
 8001a28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	024a      	lsls	r2, r1, #9
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a36:	2200      	movs	r2, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a40:	f7fe fc66 	bl	8000310 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a4c:	e058      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	2200      	movs	r2, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	4611      	mov	r1, r2
 8001a5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a68:	4642      	mov	r2, r8
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	0159      	lsls	r1, r3, #5
 8001a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7a:	0150      	lsls	r0, r2, #5
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4641      	mov	r1, r8
 8001a82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a86:	4649      	mov	r1, r9
 8001a88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aa0:	ebb2 040a 	subs.w	r4, r2, sl
 8001aa4:	eb63 050b 	sbc.w	r5, r3, fp
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	00eb      	lsls	r3, r5, #3
 8001ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab6:	00e2      	lsls	r2, r4, #3
 8001ab8:	4614      	mov	r4, r2
 8001aba:	461d      	mov	r5, r3
 8001abc:	4643      	mov	r3, r8
 8001abe:	18e3      	adds	r3, r4, r3
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	464b      	mov	r3, r9
 8001ac4:	eb45 0303 	adc.w	r3, r5, r3
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	028b      	lsls	r3, r1, #10
 8001ada:	4621      	mov	r1, r4
 8001adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	028a      	lsls	r2, r1, #10
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aea:	2200      	movs	r2, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	61fa      	str	r2, [r7, #28]
 8001af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af4:	f7fe fc0c 	bl	8000310 <__aeabi_uldivmod>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4613      	mov	r3, r2
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3750      	adds	r7, #80	; 0x50
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	007a1200 	.word	0x007a1200

08001b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0a9b      	lsrs	r3, r3, #10
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08006414 	.word	0x08006414

08001b7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	220f      	movs	r2, #15
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_RCC_GetClockConfig+0x60>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	601a      	str	r2, [r3, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e01d      	b.n	8001c2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f815 	bl	8001c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f000 f968 	bl	8001ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	d007      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d122      	bne.n	8001cee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d11b      	bne.n	8001cee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0202 	mvn.w	r2, #2
 8001cbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8ee 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001cda:	e005      	b.n	8001ce8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8e0 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8f1 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d122      	bne.n	8001d42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d11b      	bne.n	8001d42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f06f 0204 	mvn.w	r2, #4
 8001d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8c4 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001d2e:	e005      	b.n	8001d3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8b6 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8c7 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d122      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d11b      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f06f 0208 	mvn.w	r2, #8
 8001d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f89a 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001d82:	e005      	b.n	8001d90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f88c 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f89d 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d122      	bne.n	8001dea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d11b      	bne.n	8001dea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f06f 0210 	mvn.w	r2, #16
 8001dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f870 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001dd6:	e005      	b.n	8001de4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f862 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f873 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10e      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0201 	mvn.w	r2, #1
 8001e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7fe fe5f 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d10e      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b80      	cmp	r3, #128	; 0x80
 8001e30:	d107      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f903 	bl	8002048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d10e      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b40      	cmp	r3, #64	; 0x40
 8001e5c:	d107      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f838 	bl	8001ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d10e      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d107      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f06f 0220 	mvn.w	r2, #32
 8001e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8cd 	bl	8002034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a40      	ldr	r2, [pc, #256]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f12:	d00f      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3d      	ldr	r2, [pc, #244]	; (800200c <TIM_Base_SetConfig+0x118>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <TIM_Base_SetConfig+0x120>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d027      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2c      	ldr	r2, [pc, #176]	; (800200c <TIM_Base_SetConfig+0x118>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d023      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2a      	ldr	r2, [pc, #168]	; (8002014 <TIM_Base_SetConfig+0x120>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d017      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a28      	ldr	r2, [pc, #160]	; (800201c <TIM_Base_SetConfig+0x128>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <TIM_Base_SetConfig+0x12c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <TIM_Base_SetConfig+0x130>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <TIM_Base_SetConfig+0x134>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <TIM_Base_SetConfig+0x138>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <TIM_Base_SetConfig+0x13c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0xf8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d103      	bne.n	8001ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40010400 	.word	0x40010400
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800
 8002028:	40001800 	.word	0x40001800
 800202c:	40001c00 	.word	0x40001c00
 8002030:	40002000 	.word	0x40002000

08002034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f103 0208 	add.w	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f103 0208 	add.w	r2, r3, #8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f103 0208 	add.w	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	601a      	str	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6892      	ldr	r2, [r2, #8]
 8002114:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6852      	ldr	r2, [r2, #4]
 800211e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d103      	bne.n	8002132 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002152:	b580      	push	{r7, lr}
 8002154:	b08c      	sub	sp, #48	; 0x30
 8002156:	af04      	add	r7, sp, #16
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 ff20 	bl	8002fac <pvPortMalloc>
 800216c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00e      	beq.n	8002192 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002174:	2058      	movs	r0, #88	; 0x58
 8002176:	f000 ff19 	bl	8002fac <pvPortMalloc>
 800217a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
 8002188:	e005      	b.n	8002196 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f000 ffee 	bl	800316c <vPortFree>
 8002190:	e001      	b.n	8002196 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	2300      	movs	r3, #0
 80021a0:	9303      	str	r3, [sp, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f80e 	bl	80021d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021b8:	69f8      	ldr	r0, [r7, #28]
 80021ba:	f000 f8a1 	bl	8002300 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e002      	b.n	80021ca <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021ca:	69bb      	ldr	r3, [r7, #24]
    }
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	21a5      	movs	r1, #165	; 0xa5
 80021ee:	f003 fbe7 	bl	80059c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021fc:	3b01      	subs	r3, #1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f023 0307 	bic.w	r3, r3, #7
 800220a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	617b      	str	r3, [r7, #20]
    }
 8002228:	bf00      	nop
 800222a:	e7fe      	b.n	800222a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01f      	beq.n	8002272 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e012      	b.n	800225e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	4413      	add	r3, r2
 800223e:	7819      	ldrb	r1, [r3, #0]
 8002240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	3334      	adds	r3, #52	; 0x34
 8002248:	460a      	mov	r2, r1
 800224a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3301      	adds	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	2b09      	cmp	r3, #9
 8002262:	d9e9      	bls.n	8002238 <prvInitialiseNewTask+0x64>
 8002264:	e000      	b.n	8002268 <prvInitialiseNewTask+0x94>
            {
                break;
 8002266:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002270:	e003      	b.n	800227a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	2b04      	cmp	r3, #4
 800227e:	d901      	bls.n	8002284 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002280:	2304      	movs	r3, #4
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800228e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	2200      	movs	r2, #0
 8002294:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	3304      	adds	r3, #4
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fefe 	bl	800209c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	3318      	adds	r3, #24
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fef9 	bl	800209c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	f1c3 0205 	rsb	r2, r3, #5
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	3350      	adds	r3, #80	; 0x50
 80022c4:	2204      	movs	r2, #4
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 fb79 	bl	80059c0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	3354      	adds	r3, #84	; 0x54
 80022d2:	2201      	movs	r2, #1
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fb72 	bl	80059c0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	68f9      	ldr	r1, [r7, #12]
 80022e0:	69b8      	ldr	r0, [r7, #24]
 80022e2:	f000 fb8d 	bl	8002a00 <pxPortInitialiseStack>
 80022e6:	4602      	mov	r2, r0
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022f8:	bf00      	nop
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002300:	b5b0      	push	{r4, r5, r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af02      	add	r7, sp, #8
 8002306:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002308:	f000 fd24 	bl	8002d54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800230c:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <prvAddNewTaskToReadyList+0xfc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4a3a      	ldr	r2, [pc, #232]	; (80023fc <prvAddNewTaskToReadyList+0xfc>)
 8002314:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002316:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <prvAddNewTaskToReadyList+0x100>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800231e:	4a38      	ldr	r2, [pc, #224]	; (8002400 <prvAddNewTaskToReadyList+0x100>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002324:	4b35      	ldr	r3, [pc, #212]	; (80023fc <prvAddNewTaskToReadyList+0xfc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d110      	bne.n	800234e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800232c:	f000 face 	bl	80028cc <prvInitialiseTaskLists>
 8002330:	e00d      	b.n	800234e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002332:	4b34      	ldr	r3, [pc, #208]	; (8002404 <prvAddNewTaskToReadyList+0x104>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <prvAddNewTaskToReadyList+0x100>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	429a      	cmp	r2, r3
 8002346:	d802      	bhi.n	800234e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002348:	4a2d      	ldr	r2, [pc, #180]	; (8002400 <prvAddNewTaskToReadyList+0x100>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800234e:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <prvAddNewTaskToReadyList+0x108>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3301      	adds	r3, #1
 8002354:	4a2c      	ldr	r2, [pc, #176]	; (8002408 <prvAddNewTaskToReadyList+0x108>)
 8002356:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002358:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <prvAddNewTaskToReadyList+0x108>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <prvAddNewTaskToReadyList+0x94>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 f8a7 	bl	80054bc <SEGGER_SYSVIEW_OnTaskCreate>
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	461d      	mov	r5, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461c      	mov	r4, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	1ae3      	subs	r3, r4, r3
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	462b      	mov	r3, r5
 8002390:	f001 f8ba 	bl	8003508 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	f003 f914 	bl	80055c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	2201      	movs	r2, #1
 80023a2:	409a      	lsls	r2, r3
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <prvAddNewTaskToReadyList+0x10c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	4a18      	ldr	r2, [pc, #96]	; (800240c <prvAddNewTaskToReadyList+0x10c>)
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <prvAddNewTaskToReadyList+0x110>)
 80023bc:	441a      	add	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7ff fe76 	bl	80020b6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023ca:	f000 fcf3 	bl	8002db4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <prvAddNewTaskToReadyList+0x104>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00e      	beq.n	80023f4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <prvAddNewTaskToReadyList+0x100>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d207      	bcs.n	80023f4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <prvAddNewTaskToReadyList+0x114>)
 80023e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdb0      	pop	{r4, r5, r7, pc}
 80023fc:	200001b8 	.word	0x200001b8
 8002400:	200000e0 	.word	0x200000e0
 8002404:	200001c4 	.word	0x200001c4
 8002408:	200001d4 	.word	0x200001d4
 800240c:	200001c0 	.word	0x200001c0
 8002410:	200000e4 	.word	0x200000e4
 8002414:	e000ed04 	.word	0xe000ed04

08002418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <vTaskStartScheduler+0x98>)
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	2300      	movs	r3, #0
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	2300      	movs	r3, #0
 8002428:	2282      	movs	r2, #130	; 0x82
 800242a:	4922      	ldr	r1, [pc, #136]	; (80024b4 <vTaskStartScheduler+0x9c>)
 800242c:	4822      	ldr	r0, [pc, #136]	; (80024b8 <vTaskStartScheduler+0xa0>)
 800242e:	f7ff fe90 	bl	8002152 <xTaskCreate>
 8002432:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d124      	bne.n	8002484 <vTaskStartScheduler+0x6c>
        __asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	60bb      	str	r3, [r7, #8]
    }
 800244c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <vTaskStartScheduler+0xa4>)
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <vTaskStartScheduler+0xa8>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <vTaskStartScheduler+0xac>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <vTaskStartScheduler+0xb0>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <vTaskStartScheduler+0x98>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d102      	bne.n	8002474 <vTaskStartScheduler+0x5c>
 800246e:	f003 f809 	bl	8005484 <SEGGER_SYSVIEW_OnIdle>
 8002472:	e004      	b.n	800247e <vTaskStartScheduler+0x66>
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <vTaskStartScheduler+0xb0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f003 f861 	bl	8005540 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800247e:	f000 fb49 	bl	8002b14 <xPortStartScheduler>
 8002482:	e00e      	b.n	80024a2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d10a      	bne.n	80024a2 <vTaskStartScheduler+0x8a>
        __asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	607b      	str	r3, [r7, #4]
    }
 800249e:	bf00      	nop
 80024a0:	e7fe      	b.n	80024a0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <vTaskStartScheduler+0xb4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200001dc 	.word	0x200001dc
 80024b4:	08006330 	.word	0x08006330
 80024b8:	0800289d 	.word	0x0800289d
 80024bc:	200001d8 	.word	0x200001d8
 80024c0:	200001c4 	.word	0x200001c4
 80024c4:	200001bc 	.word	0x200001bc
 80024c8:	200000e0 	.word	0x200000e0
 80024cc:	2000000c 	.word	0x2000000c

080024d0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <vTaskSuspendAll+0x18>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	4a03      	ldr	r2, [pc, #12]	; (80024e8 <vTaskSuspendAll+0x18>)
 80024dc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	200001e0 	.word	0x200001e0

080024ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <xTaskResumeAll+0x11c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10a      	bne.n	8002518 <xTaskResumeAll+0x2c>
        __asm volatile
 8002502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	603b      	str	r3, [r7, #0]
    }
 8002514:	bf00      	nop
 8002516:	e7fe      	b.n	8002516 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002518:	f000 fc1c 	bl	8002d54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <xTaskResumeAll+0x11c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3b01      	subs	r3, #1
 8002522:	4a39      	ldr	r2, [pc, #228]	; (8002608 <xTaskResumeAll+0x11c>)
 8002524:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <xTaskResumeAll+0x11c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d165      	bne.n	80025fa <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <xTaskResumeAll+0x120>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d061      	beq.n	80025fa <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002536:	e032      	b.n	800259e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <xTaskResumeAll+0x124>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3318      	adds	r3, #24
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fdda 	bl	80020fe <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3304      	adds	r3, #4
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fdd5 	bl	80020fe <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 f834 	bl	80055c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <xTaskResumeAll+0x128>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4313      	orrs	r3, r2
 800256a:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <xTaskResumeAll+0x128>)
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <xTaskResumeAll+0x12c>)
 800257c:	441a      	add	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3304      	adds	r3, #4
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f7ff fd96 	bl	80020b6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <xTaskResumeAll+0x130>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	429a      	cmp	r2, r3
 8002596:	d302      	bcc.n	800259e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <xTaskResumeAll+0x134>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <xTaskResumeAll+0x124>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1c8      	bne.n	8002538 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025ac:	f000 fa0c 	bl	80029c8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <xTaskResumeAll+0x138>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d010      	beq.n	80025de <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025bc:	f000 f848 	bl	8002650 <xTaskIncrementTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <xTaskResumeAll+0x134>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f1      	bne.n	80025bc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <xTaskResumeAll+0x138>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <xTaskResumeAll+0x134>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <xTaskResumeAll+0x13c>)
 80025ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80025fa:	f000 fbdb 	bl	8002db4 <vPortExitCritical>

    return xAlreadyYielded;
 80025fe:	68bb      	ldr	r3, [r7, #8]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200001e0 	.word	0x200001e0
 800260c:	200001b8 	.word	0x200001b8
 8002610:	20000178 	.word	0x20000178
 8002614:	200001c0 	.word	0x200001c0
 8002618:	200000e4 	.word	0x200000e4
 800261c:	200000e0 	.word	0x200000e0
 8002620:	200001cc 	.word	0x200001cc
 8002624:	200001c8 	.word	0x200001c8
 8002628:	e000ed04 	.word	0xe000ed04

0800262c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002632:	f000 fc7b 	bl	8002f2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <xTaskGetTickCountFromISR+0x20>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002640:	683b      	ldr	r3, [r7, #0]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200001bc 	.word	0x200001bc

08002650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800265a:	4b50      	ldr	r3, [pc, #320]	; (800279c <xTaskIncrementTick+0x14c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 8092 	bne.w	8002788 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002664:	4b4e      	ldr	r3, [pc, #312]	; (80027a0 <xTaskIncrementTick+0x150>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <xTaskIncrementTick+0x150>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d120      	bne.n	80026ba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002678:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <xTaskIncrementTick+0x154>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <xTaskIncrementTick+0x48>
        __asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	603b      	str	r3, [r7, #0]
    }
 8002694:	bf00      	nop
 8002696:	e7fe      	b.n	8002696 <xTaskIncrementTick+0x46>
 8002698:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <xTaskIncrementTick+0x154>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <xTaskIncrementTick+0x158>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a40      	ldr	r2, [pc, #256]	; (80027a4 <xTaskIncrementTick+0x154>)
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4a40      	ldr	r2, [pc, #256]	; (80027a8 <xTaskIncrementTick+0x158>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <xTaskIncrementTick+0x15c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	4a3e      	ldr	r2, [pc, #248]	; (80027ac <xTaskIncrementTick+0x15c>)
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	f000 f987 	bl	80029c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <xTaskIncrementTick+0x160>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d34c      	bcc.n	800275e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026c4:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <xTaskIncrementTick+0x154>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d104      	bne.n	80026d8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <xTaskIncrementTick+0x160>)
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	601a      	str	r2, [r3, #0]
                    break;
 80026d6:	e042      	b.n	800275e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d8:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <xTaskIncrementTick+0x154>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d203      	bcs.n	80026f8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026f0:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <xTaskIncrementTick+0x160>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026f6:	e032      	b.n	800275e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	3304      	adds	r3, #4
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fcfe 	bl	80020fe <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3318      	adds	r3, #24
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fcf5 	bl	80020fe <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 ff54 	bl	80055c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	2201      	movs	r2, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <xTaskIncrementTick+0x164>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <xTaskIncrementTick+0x164>)
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <xTaskIncrementTick+0x168>)
 800273c:	441a      	add	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3304      	adds	r3, #4
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f7ff fcb6 	bl	80020b6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <xTaskIncrementTick+0x16c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	429a      	cmp	r2, r3
 8002756:	d3b5      	bcc.n	80026c4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002758:	2301      	movs	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800275c:	e7b2      	b.n	80026c4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <xTaskIncrementTick+0x16c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	4914      	ldr	r1, [pc, #80]	; (80027b8 <xTaskIncrementTick+0x168>)
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d901      	bls.n	800277a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002776:	2301      	movs	r3, #1
 8002778:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <xTaskIncrementTick+0x170>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002782:	2301      	movs	r3, #1
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e004      	b.n	8002792 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <xTaskIncrementTick+0x174>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <xTaskIncrementTick+0x174>)
 8002790:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002792:	697b      	ldr	r3, [r7, #20]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200001e0 	.word	0x200001e0
 80027a0:	200001bc 	.word	0x200001bc
 80027a4:	20000170 	.word	0x20000170
 80027a8:	20000174 	.word	0x20000174
 80027ac:	200001d0 	.word	0x200001d0
 80027b0:	200001d8 	.word	0x200001d8
 80027b4:	200001c0 	.word	0x200001c0
 80027b8:	200000e4 	.word	0x200000e4
 80027bc:	200000e0 	.word	0x200000e0
 80027c0:	200001cc 	.word	0x200001cc
 80027c4:	200001c8 	.word	0x200001c8

080027c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <vTaskSwitchContext+0xbc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80027d6:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <vTaskSwitchContext+0xc0>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80027dc:	e04d      	b.n	800287a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80027de:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <vTaskSwitchContext+0xc0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <vTaskSwitchContext+0xc4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027f2:	7afb      	ldrb	r3, [r7, #11]
 80027f4:	f1c3 031f 	rsb	r3, r3, #31
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	4925      	ldr	r1, [pc, #148]	; (8002890 <vTaskSwitchContext+0xc8>)
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <vTaskSwitchContext+0x5c>
        __asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	607b      	str	r3, [r7, #4]
    }
 8002820:	bf00      	nop
 8002822:	e7fe      	b.n	8002822 <vTaskSwitchContext+0x5a>
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4a18      	ldr	r2, [pc, #96]	; (8002890 <vTaskSwitchContext+0xc8>)
 8002830:	4413      	add	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	3308      	adds	r3, #8
 8002846:	429a      	cmp	r2, r3
 8002848:	d104      	bne.n	8002854 <vTaskSwitchContext+0x8c>
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <vTaskSwitchContext+0xcc>)
 800285c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <vTaskSwitchContext+0xcc>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <vTaskSwitchContext+0xd0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d102      	bne.n	8002870 <vTaskSwitchContext+0xa8>
 800286a:	f002 fe0b 	bl	8005484 <SEGGER_SYSVIEW_OnIdle>
}
 800286e:	e004      	b.n	800287a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <vTaskSwitchContext+0xcc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fe63 	bl	8005540 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200001e0 	.word	0x200001e0
 8002888:	200001cc 	.word	0x200001cc
 800288c:	200001c0 	.word	0x200001c0
 8002890:	200000e4 	.word	0x200000e4
 8002894:	200000e0 	.word	0x200000e0
 8002898:	200001dc 	.word	0x200001dc

0800289c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80028a4:	f000 f852 	bl	800294c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <prvIdleTask+0x28>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d9f9      	bls.n	80028a4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <prvIdleTask+0x2c>)
 80028b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80028c0:	e7f0      	b.n	80028a4 <prvIdleTask+0x8>
 80028c2:	bf00      	nop
 80028c4:	200000e4 	.word	0x200000e4
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	e00c      	b.n	80028f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <prvInitialiseTaskLists+0x60>)
 80028e4:	4413      	add	r3, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fbb8 	bl	800205c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3301      	adds	r3, #1
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d9ef      	bls.n	80028d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028f8:	480d      	ldr	r0, [pc, #52]	; (8002930 <prvInitialiseTaskLists+0x64>)
 80028fa:	f7ff fbaf 	bl	800205c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028fe:	480d      	ldr	r0, [pc, #52]	; (8002934 <prvInitialiseTaskLists+0x68>)
 8002900:	f7ff fbac 	bl	800205c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <prvInitialiseTaskLists+0x6c>)
 8002906:	f7ff fba9 	bl	800205c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800290a:	480c      	ldr	r0, [pc, #48]	; (800293c <prvInitialiseTaskLists+0x70>)
 800290c:	f7ff fba6 	bl	800205c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002910:	480b      	ldr	r0, [pc, #44]	; (8002940 <prvInitialiseTaskLists+0x74>)
 8002912:	f7ff fba3 	bl	800205c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <prvInitialiseTaskLists+0x78>)
 8002918:	4a05      	ldr	r2, [pc, #20]	; (8002930 <prvInitialiseTaskLists+0x64>)
 800291a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <prvInitialiseTaskLists+0x7c>)
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <prvInitialiseTaskLists+0x68>)
 8002920:	601a      	str	r2, [r3, #0]
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200000e4 	.word	0x200000e4
 8002930:	20000148 	.word	0x20000148
 8002934:	2000015c 	.word	0x2000015c
 8002938:	20000178 	.word	0x20000178
 800293c:	2000018c 	.word	0x2000018c
 8002940:	200001a4 	.word	0x200001a4
 8002944:	20000170 	.word	0x20000170
 8002948:	20000174 	.word	0x20000174

0800294c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002952:	e019      	b.n	8002988 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002954:	f000 f9fe 	bl	8002d54 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002958:	4b10      	ldr	r3, [pc, #64]	; (800299c <prvCheckTasksWaitingTermination+0x50>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fbca 	bl	80020fe <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <prvCheckTasksWaitingTermination+0x54>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3b01      	subs	r3, #1
 8002970:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <prvCheckTasksWaitingTermination+0x54>)
 8002972:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <prvCheckTasksWaitingTermination+0x58>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3b01      	subs	r3, #1
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <prvCheckTasksWaitingTermination+0x58>)
 800297c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800297e:	f000 fa19 	bl	8002db4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f810 	bl	80029a8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <prvCheckTasksWaitingTermination+0x58>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e1      	bne.n	8002954 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	2000018c 	.word	0x2000018c
 80029a0:	200001b8 	.word	0x200001b8
 80029a4:	200001a0 	.word	0x200001a0

080029a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fbd9 	bl	800316c <vPortFree>
                vPortFree( pxTCB );
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fbd6 	bl	800316c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <prvResetNextTaskUnblockTime+0x30>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <prvResetNextTaskUnblockTime+0x34>)
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029de:	e005      	b.n	80029ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <prvResetNextTaskUnblockTime+0x30>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <prvResetNextTaskUnblockTime+0x34>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000170 	.word	0x20000170
 80029fc:	200001d8 	.word	0x200001d8

08002a00 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3b04      	subs	r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f023 0201 	bic.w	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3b04      	subs	r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a30:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <pxPortInitialiseStack+0x64>)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b14      	subs	r3, #20
 8002a3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b04      	subs	r3, #4
 8002a46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f06f 0202 	mvn.w	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3b20      	subs	r3, #32
 8002a54:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	08002a69 	.word	0x08002a69

08002a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <prvTaskExitError+0x54>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d00a      	beq.n	8002a92 <prvTaskExitError+0x2a>
        __asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	60fb      	str	r3, [r7, #12]
    }
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <prvTaskExitError+0x28>
        __asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	60bb      	str	r3, [r7, #8]
    }
 8002aa4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002aa6:	bf00      	nop
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0fc      	beq.n	8002aa8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	20000010 	.word	0x20000010

08002ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ac0:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <pxCurrentTCBConst2>)
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	6808      	ldr	r0, [r1, #0]
 8002ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aca:	f380 8809 	msr	PSP, r0
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f380 8811 	msr	BASEPRI, r0
 8002ada:	4770      	bx	lr
 8002adc:	f3af 8000 	nop.w

08002ae0 <pxCurrentTCBConst2>:
 8002ae0:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop

08002ae8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ae8:	4808      	ldr	r0, [pc, #32]	; (8002b0c <prvPortStartFirstTask+0x24>)
 8002aea:	6800      	ldr	r0, [r0, #0]
 8002aec:	6800      	ldr	r0, [r0, #0]
 8002aee:	f380 8808 	msr	MSP, r0
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f380 8814 	msr	CONTROL, r0
 8002afa:	b662      	cpsie	i
 8002afc:	b661      	cpsie	f
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	df00      	svc	0
 8002b08:	bf00      	nop
 8002b0a:	0000      	.short	0x0000
 8002b0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop

08002b14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b1a:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <xPortStartScheduler+0x120>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a46      	ldr	r2, [pc, #280]	; (8002c38 <xPortStartScheduler+0x124>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d10a      	bne.n	8002b3a <xPortStartScheduler+0x26>
        __asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	613b      	str	r3, [r7, #16]
    }
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b3a:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <xPortStartScheduler+0x120>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a3f      	ldr	r2, [pc, #252]	; (8002c3c <xPortStartScheduler+0x128>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10a      	bne.n	8002b5a <xPortStartScheduler+0x46>
        __asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	60fb      	str	r3, [r7, #12]
    }
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <xPortStartScheduler+0x12c>)
 8002b5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	22ff      	movs	r2, #255	; 0xff
 8002b6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <xPortStartScheduler+0x130>)
 8002b80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <xPortStartScheduler+0x134>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b88:	e009      	b.n	8002b9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <xPortStartScheduler+0x134>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	4a2d      	ldr	r2, [pc, #180]	; (8002c48 <xPortStartScheduler+0x134>)
 8002b92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba6:	2b80      	cmp	r3, #128	; 0x80
 8002ba8:	d0ef      	beq.n	8002b8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <xPortStartScheduler+0x134>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d00a      	beq.n	8002bcc <xPortStartScheduler+0xb8>
        __asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	60bb      	str	r3, [r7, #8]
    }
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bcc:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <xPortStartScheduler+0x134>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <xPortStartScheduler+0x134>)
 8002bd4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <xPortStartScheduler+0x134>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bde:	4a1a      	ldr	r2, [pc, #104]	; (8002c48 <xPortStartScheduler+0x134>)
 8002be0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <xPortStartScheduler+0x138>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <xPortStartScheduler+0x138>)
 8002bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <xPortStartScheduler+0x138>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <xPortStartScheduler+0x138>)
 8002bfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c02:	f000 f963 	bl	8002ecc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <xPortStartScheduler+0x13c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c0c:	f000 f982 	bl	8002f14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <xPortStartScheduler+0x140>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <xPortStartScheduler+0x140>)
 8002c16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c1c:	f7ff ff64 	bl	8002ae8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c20:	f7ff fdd2 	bl	80027c8 <vTaskSwitchContext>
    prvTaskExitError();
 8002c24:	f7ff ff20 	bl	8002a68 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	e000ed00 	.word	0xe000ed00
 8002c38:	410fc271 	.word	0x410fc271
 8002c3c:	410fc270 	.word	0x410fc270
 8002c40:	e000e400 	.word	0xe000e400
 8002c44:	200001e4 	.word	0x200001e4
 8002c48:	200001e8 	.word	0x200001e8
 8002c4c:	e000ed20 	.word	0xe000ed20
 8002c50:	20000010 	.word	0x20000010
 8002c54:	e000ef34 	.word	0xe000ef34

08002c58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c5e:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <vInitPrioGroupValue+0xe4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a37      	ldr	r2, [pc, #220]	; (8002d40 <vInitPrioGroupValue+0xe8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10a      	bne.n	8002c7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	613b      	str	r3, [r7, #16]
    }
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c7e:	4b2f      	ldr	r3, [pc, #188]	; (8002d3c <vInitPrioGroupValue+0xe4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <vInitPrioGroupValue+0xec>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d10a      	bne.n	8002c9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	60fb      	str	r3, [r7, #12]
    }
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <vInitPrioGroupValue+0xf0>)
 8002ca0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <vInitPrioGroupValue+0xf4>)
 8002cc4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <vInitPrioGroupValue+0xf8>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ccc:	e009      	b.n	8002ce2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <vInitPrioGroupValue+0xf8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <vInitPrioGroupValue+0xf8>)
 8002cd6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b80      	cmp	r3, #128	; 0x80
 8002cec:	d0ef      	beq.n	8002cce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <vInitPrioGroupValue+0xf8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d00a      	beq.n	8002d10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	60bb      	str	r3, [r7, #8]
    }
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <vInitPrioGroupValue+0xf8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <vInitPrioGroupValue+0xf8>)
 8002d18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <vInitPrioGroupValue+0xf8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <vInitPrioGroupValue+0xf8>)
 8002d24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00
 8002d40:	410fc271 	.word	0x410fc271
 8002d44:	410fc270 	.word	0x410fc270
 8002d48:	e000e400 	.word	0xe000e400
 8002d4c:	200001e4 	.word	0x200001e4
 8002d50:	200001e8 	.word	0x200001e8

08002d54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
        __asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	607b      	str	r3, [r7, #4]
    }
 8002d6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <vPortEnterCritical+0x58>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <vPortEnterCritical+0x58>)
 8002d76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <vPortEnterCritical+0x58>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d10f      	bne.n	8002da0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <vPortEnterCritical+0x5c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	603b      	str	r3, [r7, #0]
    }
 8002d9c:	bf00      	nop
 8002d9e:	e7fe      	b.n	8002d9e <vPortEnterCritical+0x4a>
    }
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	20000010 	.word	0x20000010
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <vPortExitCritical+0x50>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <vPortExitCritical+0x24>
        __asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	607b      	str	r3, [r7, #4]
    }
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <vPortExitCritical+0x50>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <vPortExitCritical+0x50>)
 8002de0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <vPortExitCritical+0x50>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <vPortExitCritical+0x42>
 8002dea:	2300      	movs	r3, #0
 8002dec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002df4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000010 	.word	0x20000010
	...

08002e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e10:	f3ef 8009 	mrs	r0, PSP
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <pxCurrentTCBConst>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	f01e 0f10 	tst.w	lr, #16
 8002e20:	bf08      	it	eq
 8002e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2a:	6010      	str	r0, [r2, #0]
 8002e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e34:	f380 8811 	msr	BASEPRI, r0
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f7ff fcc2 	bl	80027c8 <vTaskSwitchContext>
 8002e44:	f04f 0000 	mov.w	r0, #0
 8002e48:	f380 8811 	msr	BASEPRI, r0
 8002e4c:	bc09      	pop	{r0, r3}
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	6808      	ldr	r0, [r1, #0]
 8002e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e56:	f01e 0f10 	tst.w	lr, #16
 8002e5a:	bf08      	it	eq
 8002e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e60:	f380 8809 	msr	PSP, r0
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	f3af 8000 	nop.w

08002e70 <pxCurrentTCBConst>:
 8002e70:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop

08002e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	607b      	str	r3, [r7, #4]
    }
 8002e90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002e92:	f002 fa7d 	bl	8005390 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e96:	f7ff fbdb 	bl	8002650 <xTaskIncrementTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d006      	beq.n	8002eae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002ea0:	f002 fad4 	bl	800544c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <SysTick_Handler+0x50>)
 8002ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e001      	b.n	8002eb2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002eae:	f002 fab1 	bl	8005414 <SEGGER_SYSVIEW_RecordExitISR>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f383 8811 	msr	BASEPRI, r3
    }
 8002ebc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <vPortSetupTimerInterrupt+0x34>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <vPortSetupTimerInterrupt+0x38>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <vPortSetupTimerInterrupt+0x3c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <vPortSetupTimerInterrupt+0x40>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <vPortSetupTimerInterrupt+0x44>)
 8002eea:	3b01      	subs	r3, #1
 8002eec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <vPortSetupTimerInterrupt+0x34>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	601a      	str	r2, [r3, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e010 	.word	0xe000e010
 8002f04:	e000e018 	.word	0xe000e018
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	10624dd3 	.word	0x10624dd3
 8002f10:	e000e014 	.word	0xe000e014

08002f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f24 <vPortEnableVFP+0x10>
 8002f18:	6801      	ldr	r1, [r0, #0]
 8002f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f1e:	6001      	str	r1, [r0, #0]
 8002f20:	4770      	bx	lr
 8002f22:	0000      	.short	0x0000
 8002f24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop

08002f2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002f32:	f3ef 8305 	mrs	r3, IPSR
 8002f36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	d914      	bls.n	8002f68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f3e:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <vPortValidateInterruptPriority+0x70>)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f48:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <vPortValidateInterruptPriority+0x74>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	7afa      	ldrb	r2, [r7, #11]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d20a      	bcs.n	8002f68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	607b      	str	r3, [r7, #4]
    }
 8002f64:	bf00      	nop
 8002f66:	e7fe      	b.n	8002f66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <vPortValidateInterruptPriority+0x78>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <vPortValidateInterruptPriority+0x7c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d90a      	bls.n	8002f8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	603b      	str	r3, [r7, #0]
    }
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <vPortValidateInterruptPriority+0x60>
    }
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e3f0 	.word	0xe000e3f0
 8002fa0:	200001e4 	.word	0x200001e4
 8002fa4:	e000ed0c 	.word	0xe000ed0c
 8002fa8:	200001e8 	.word	0x200001e8

08002fac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002fb8:	f7ff fa8a 	bl	80024d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002fbc:	4b65      	ldr	r3, [pc, #404]	; (8003154 <pvPortMalloc+0x1a8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002fc4:	f000 f934 	bl	8003230 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fc8:	4b63      	ldr	r3, [pc, #396]	; (8003158 <pvPortMalloc+0x1ac>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 80a7 	bne.w	8003124 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02d      	beq.n	8003038 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002fdc:	2208      	movs	r2, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d227      	bcs.n	8003038 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002fe8:	2208      	movs	r2, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d021      	beq.n	800303e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f023 0307 	bic.w	r3, r3, #7
 8003000:	3308      	adds	r3, #8
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d214      	bcs.n	8003032 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f023 0307 	bic.w	r3, r3, #7
 800300e:	3308      	adds	r3, #8
 8003010:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <pvPortMalloc+0x92>
        __asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	617b      	str	r3, [r7, #20]
    }
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003036:	e002      	b.n	800303e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	e000      	b.n	8003040 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800303e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d06e      	beq.n	8003124 <pvPortMalloc+0x178>
 8003046:	4b45      	ldr	r3, [pc, #276]	; (800315c <pvPortMalloc+0x1b0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d869      	bhi.n	8003124 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003050:	4b43      	ldr	r3, [pc, #268]	; (8003160 <pvPortMalloc+0x1b4>)
 8003052:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003054:	4b42      	ldr	r3, [pc, #264]	; (8003160 <pvPortMalloc+0x1b4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800305a:	e004      	b.n	8003066 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d903      	bls.n	8003078 <pvPortMalloc+0xcc>
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f1      	bne.n	800305c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <pvPortMalloc+0x1a8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	429a      	cmp	r2, r3
 8003080:	d050      	beq.n	8003124 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2208      	movs	r2, #8
 8003088:	4413      	add	r3, r2
 800308a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1ad2      	subs	r2, r2, r3
 800309c:	2308      	movs	r3, #8
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d91f      	bls.n	80030e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <pvPortMalloc+0x120>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	613b      	str	r3, [r7, #16]
    }
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030de:	69b8      	ldr	r0, [r7, #24]
 80030e0:	f000 f908 	bl	80032f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <pvPortMalloc+0x1b0>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	4a1b      	ldr	r2, [pc, #108]	; (800315c <pvPortMalloc+0x1b0>)
 80030f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <pvPortMalloc+0x1b0>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <pvPortMalloc+0x1b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d203      	bcs.n	8003106 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <pvPortMalloc+0x1b0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a18      	ldr	r2, [pc, #96]	; (8003164 <pvPortMalloc+0x1b8>)
 8003104:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <pvPortMalloc+0x1ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	431a      	orrs	r2, r3
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <pvPortMalloc+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	4a11      	ldr	r2, [pc, #68]	; (8003168 <pvPortMalloc+0x1bc>)
 8003122:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003124:	f7ff f9e2 	bl	80024ec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <pvPortMalloc+0x19c>
        __asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	60fb      	str	r3, [r7, #12]
    }
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <pvPortMalloc+0x19a>
    return pvReturn;
 8003148:	69fb      	ldr	r3, [r7, #28]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3728      	adds	r7, #40	; 0x28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20012df4 	.word	0x20012df4
 8003158:	20012e08 	.word	0x20012e08
 800315c:	20012df8 	.word	0x20012df8
 8003160:	20012dec 	.word	0x20012dec
 8003164:	20012dfc 	.word	0x20012dfc
 8003168:	20012e00 	.word	0x20012e00

0800316c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d04d      	beq.n	800321a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800317e:	2308      	movs	r3, #8
 8003180:	425b      	negs	r3, r3
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4413      	add	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4b24      	ldr	r3, [pc, #144]	; (8003224 <vPortFree+0xb8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <vPortFree+0x44>
        __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	60fb      	str	r3, [r7, #12]
    }
 80031ac:	bf00      	nop
 80031ae:	e7fe      	b.n	80031ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <vPortFree+0x62>
        __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	60bb      	str	r3, [r7, #8]
    }
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <vPortFree+0xb8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01e      	beq.n	800321a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11a      	bne.n	800321a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <vPortFree+0xb8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031f4:	f7ff f96c 	bl	80024d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <vPortFree+0xbc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4413      	add	r3, r2
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <vPortFree+0xbc>)
 8003204:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003206:	6938      	ldr	r0, [r7, #16]
 8003208:	f000 f874 	bl	80032f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <vPortFree+0xc0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	4a06      	ldr	r2, [pc, #24]	; (800322c <vPortFree+0xc0>)
 8003214:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003216:	f7ff f969 	bl	80024ec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20012e08 	.word	0x20012e08
 8003228:	20012df8 	.word	0x20012df8
 800322c:	20012e04 	.word	0x20012e04

08003230 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003236:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800323a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800323c:	4b27      	ldr	r3, [pc, #156]	; (80032dc <prvHeapInit+0xac>)
 800323e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00c      	beq.n	8003264 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3307      	adds	r3, #7
 800324e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0307 	bic.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <prvHeapInit+0xac>)
 8003260:	4413      	add	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003268:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <prvHeapInit+0xb0>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800326e:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <prvHeapInit+0xb0>)
 8003270:	2200      	movs	r2, #0
 8003272:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4413      	add	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800327c:	2208      	movs	r2, #8
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0307 	bic.w	r3, r3, #7
 800328a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <prvHeapInit+0xb4>)
 8003290:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <prvHeapInit+0xb4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <prvHeapInit+0xb4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	1ad2      	subs	r2, r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <prvHeapInit+0xb4>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <prvHeapInit+0xb8>)
 80032be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a09      	ldr	r2, [pc, #36]	; (80032ec <prvHeapInit+0xbc>)
 80032c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <prvHeapInit+0xc0>)
 80032ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032ce:	601a      	str	r2, [r3, #0]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	200001ec 	.word	0x200001ec
 80032e0:	20012dec 	.word	0x20012dec
 80032e4:	20012df4 	.word	0x20012df4
 80032e8:	20012dfc 	.word	0x20012dfc
 80032ec:	20012df8 	.word	0x20012df8
 80032f0:	20012e08 	.word	0x20012e08

080032f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <prvInsertBlockIntoFreeList+0xac>)
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e002      	b.n	8003308 <prvInsertBlockIntoFreeList+0x14>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d8f7      	bhi.n	8003302 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	4413      	add	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d108      	bne.n	8003336 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	441a      	add	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	441a      	add	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d118      	bne.n	800337c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d00d      	beq.n	8003372 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e008      	b.n	8003384 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e003      	b.n	8003384 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	429a      	cmp	r2, r3
 800338a:	d002      	beq.n	8003392 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20012dec 	.word	0x20012dec
 80033a4:	20012df4 	.word	0x20012df4

080033a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80033ac:	4803      	ldr	r0, [pc, #12]	; (80033bc <_cbSendSystemDesc+0x14>)
 80033ae:	f001 ff99 	bl	80052e4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80033b2:	4803      	ldr	r0, [pc, #12]	; (80033c0 <_cbSendSystemDesc+0x18>)
 80033b4:	f001 ff96 	bl	80052e4 <SEGGER_SYSVIEW_SendSysDesc>
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	08006338 	.word	0x08006338
 80033c0:	0800637c 	.word	0x0800637c

080033c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80033d2:	4a06      	ldr	r2, [pc, #24]	; (80033ec <SEGGER_SYSVIEW_Conf+0x28>)
 80033d4:	f001 fc0a 	bl	8004bec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80033d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80033dc:	f001 fc4a 	bl	8004c74 <SEGGER_SYSVIEW_SetRAMBase>
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000000 	.word	0x20000000
 80033e8:	080033a9 	.word	0x080033a9
 80033ec:	0800641c 	.word	0x0800641c

080033f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	e033      	b.n	8003464 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80033fc:	491e      	ldr	r1, [pc, #120]	; (8003478 <_cbSendTaskList+0x88>)
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	491a      	ldr	r1, [pc, #104]	; (8003478 <_cbSendTaskList+0x88>)
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	3304      	adds	r3, #4
 800341c:	6819      	ldr	r1, [r3, #0]
 800341e:	4c16      	ldr	r4, [pc, #88]	; (8003478 <_cbSendTaskList+0x88>)
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4423      	add	r3, r4
 800342c:	3308      	adds	r3, #8
 800342e:	681c      	ldr	r4, [r3, #0]
 8003430:	4d11      	ldr	r5, [pc, #68]	; (8003478 <_cbSendTaskList+0x88>)
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	442b      	add	r3, r5
 800343e:	330c      	adds	r3, #12
 8003440:	681d      	ldr	r5, [r3, #0]
 8003442:	4e0d      	ldr	r6, [pc, #52]	; (8003478 <_cbSendTaskList+0x88>)
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4433      	add	r3, r6
 8003450:	3310      	adds	r3, #16
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	462b      	mov	r3, r5
 8003458:	4622      	mov	r2, r4
 800345a:	f000 f8bd 	bl	80035d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3301      	adds	r3, #1
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <_cbSendTaskList+0x8c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d3c6      	bcc.n	80033fc <_cbSendTaskList+0xc>
  }
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003478:	20012e0c 	.word	0x20012e0c
 800347c:	20012eac 	.word	0x20012eac

08003480 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003488:	f7ff f8d0 	bl	800262c <xTaskGetTickCountFromISR>
 800348c:	4603      	mov	r3, r0
 800348e:	2200      	movs	r2, #0
 8003490:	469a      	mov	sl, r3
 8003492:	4693      	mov	fp, r2
 8003494:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	f04f 0a00 	mov.w	sl, #0
 80034a4:	f04f 0b00 	mov.w	fp, #0
 80034a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80034ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80034b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80034b4:	4652      	mov	r2, sl
 80034b6:	465b      	mov	r3, fp
 80034b8:	1a14      	subs	r4, r2, r0
 80034ba:	eb63 0501 	sbc.w	r5, r3, r1
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	00ab      	lsls	r3, r5, #2
 80034c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80034cc:	00a2      	lsls	r2, r4, #2
 80034ce:	4614      	mov	r4, r2
 80034d0:	461d      	mov	r5, r3
 80034d2:	eb14 0800 	adds.w	r8, r4, r0
 80034d6:	eb45 0901 	adc.w	r9, r5, r1
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ee:	4690      	mov	r8, r2
 80034f0:	4699      	mov	r9, r3
 80034f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80034f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003508 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003516:	2205      	movs	r2, #5
 8003518:	492b      	ldr	r1, [pc, #172]	; (80035c8 <SYSVIEW_AddTask+0xc0>)
 800351a:	68b8      	ldr	r0, [r7, #8]
 800351c:	f002 fa32 	bl	8005984 <memcmp>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d04b      	beq.n	80035be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <SYSVIEW_AddTask+0xc4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b07      	cmp	r3, #7
 800352c:	d903      	bls.n	8003536 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800352e:	4828      	ldr	r0, [pc, #160]	; (80035d0 <SYSVIEW_AddTask+0xc8>)
 8003530:	f002 f97a 	bl	8005828 <SEGGER_SYSVIEW_Warn>
    return;
 8003534:	e044      	b.n	80035c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003536:	4b25      	ldr	r3, [pc, #148]	; (80035cc <SYSVIEW_AddTask+0xc4>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4926      	ldr	r1, [pc, #152]	; (80035d4 <SYSVIEW_AddTask+0xcc>)
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <SYSVIEW_AddTask+0xc4>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4921      	ldr	r1, [pc, #132]	; (80035d4 <SYSVIEW_AddTask+0xcc>)
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3304      	adds	r3, #4
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003560:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <SYSVIEW_AddTask+0xc4>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	491b      	ldr	r1, [pc, #108]	; (80035d4 <SYSVIEW_AddTask+0xcc>)
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3308      	adds	r3, #8
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <SYSVIEW_AddTask+0xc4>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4916      	ldr	r1, [pc, #88]	; (80035d4 <SYSVIEW_AddTask+0xcc>)
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	330c      	adds	r3, #12
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <SYSVIEW_AddTask+0xc4>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4910      	ldr	r1, [pc, #64]	; (80035d4 <SYSVIEW_AddTask+0xcc>)
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3310      	adds	r3, #16
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <SYSVIEW_AddTask+0xc4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3301      	adds	r3, #1
 80035a8:	4a08      	ldr	r2, [pc, #32]	; (80035cc <SYSVIEW_AddTask+0xc4>)
 80035aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f80e 	bl	80035d8 <SYSVIEW_SendTaskInfo>
 80035bc:	e000      	b.n	80035c0 <SYSVIEW_AddTask+0xb8>
    return;
 80035be:	bf00      	nop

}
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	0800638c 	.word	0x0800638c
 80035cc:	20012eac 	.word	0x20012eac
 80035d0:	08006394 	.word	0x08006394
 80035d4:	20012e0c 	.word	0x20012e0c

080035d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	2214      	movs	r2, #20
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 f9e6 	bl	80059c0 <memset>
  TaskInfo.TaskID     = TaskID;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fd71 	bl	80050f4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003612:	bf00      	nop
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <__NVIC_EnableIRQ>:
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	2b00      	cmp	r3, #0
 800362c:	db0b      	blt.n	8003646 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	4907      	ldr	r1, [pc, #28]	; (8003654 <__NVIC_EnableIRQ+0x38>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2001      	movs	r0, #1
 800363e:	fa00 f202 	lsl.w	r2, r0, r2
 8003642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000e100 	.word	0xe000e100

08003658 <__NVIC_SetPriority>:
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	6039      	str	r1, [r7, #0]
 8003662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	2b00      	cmp	r3, #0
 800366a:	db0a      	blt.n	8003682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	490c      	ldr	r1, [pc, #48]	; (80036a4 <__NVIC_SetPriority+0x4c>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	440b      	add	r3, r1
 800367c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003680:	e00a      	b.n	8003698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4908      	ldr	r1, [pc, #32]	; (80036a8 <__NVIC_SetPriority+0x50>)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	3b04      	subs	r3, #4
 8003690:	0112      	lsls	r2, r2, #4
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	440b      	add	r3, r1
 8003696:	761a      	strb	r2, [r3, #24]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000e100 	.word	0xe000e100
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80036b2:	f002 f915 	bl	80058e0 <SEGGER_SYSVIEW_IsStarted>
 80036b6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80036be:	f001 fb9d 	bl	8004dfc <SEGGER_SYSVIEW_Start>
  }
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <_cbOnUARTRx+0x3c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d806      	bhi.n	80036ec <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <_cbOnUARTRx+0x3c>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <_cbOnUARTRx+0x3c>)
 80036e8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80036ea:	e009      	b.n	8003700 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80036ec:	f7ff ffde 	bl	80036ac <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <_cbOnUARTRx+0x3c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4618      	mov	r0, r3
 80036f6:	1dfb      	adds	r3, r7, #7
 80036f8:	2201      	movs	r2, #1
 80036fa:	4619      	mov	r1, r3
 80036fc:	f000 fb9a 	bl	8003e34 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003700:	bf00      	nop
}
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000014 	.word	0x20000014

0800370c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <_cbOnUARTTx+0x5c>)
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d80f      	bhi.n	800373c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <_cbOnUARTTx+0x5c>)
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	461a      	mov	r2, r3
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <_cbOnUARTTx+0x60>)
 8003724:	5c9a      	ldrb	r2, [r3, r2]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <_cbOnUARTTx+0x5c>)
 800372c:	785b      	ldrb	r3, [r3, #1]
 800372e:	3301      	adds	r3, #1
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <_cbOnUARTTx+0x5c>)
 8003734:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
    goto Done;
 800373a:	e00f      	b.n	800375c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <_cbOnUARTTx+0x5c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fa19 	bl	8003b7c <SEGGER_RTT_ReadUpBufferNoLock>
 800374a:	4603      	mov	r3, r0
 800374c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	da02      	bge.n	800375a <_cbOnUARTTx+0x4e>
    r = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e000      	b.n	800375c <_cbOnUARTTx+0x50>
  }
Done:
 800375a:	bf00      	nop
  return r;
 800375c:	68fb      	ldr	r3, [r7, #12]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000014 	.word	0x20000014
 800376c:	08006424 	.word	0x08006424

08003770 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <SEGGER_UART_init+0x1c>)
 800377a:	4905      	ldr	r1, [pc, #20]	; (8003790 <SEGGER_UART_init+0x20>)
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f863 	bl	8003848 <HIF_UART_Init>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	080036cd 	.word	0x080036cd
 8003790:	0800370d 	.word	0x0800370d

08003794 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800379a:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <USART2_IRQHandler+0x80>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d011      	beq.n	80037ce <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <USART2_IRQHandler+0x84>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 030b 	and.w	r3, r3, #11
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <USART2_IRQHandler+0x88>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80037c4:	4b15      	ldr	r3, [pc, #84]	; (800381c <USART2_IRQHandler+0x88>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	79fa      	ldrb	r2, [r7, #7]
 80037ca:	4610      	mov	r0, r2
 80037cc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01a      	beq.n	800380e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <USART2_IRQHandler+0x8c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <USART2_IRQHandler+0x8c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1dfa      	adds	r2, r7, #7
 80037e6:	4610      	mov	r0, r2
 80037e8:	4798      	blx	r3
 80037ea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <USART2_IRQHandler+0x90>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <USART2_IRQHandler+0x90>)
 80037f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e006      	b.n	800380e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <USART2_IRQHandler+0x80>)
 8003802:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003804:	79fa      	ldrb	r2, [r7, #7]
 8003806:	4b04      	ldr	r3, [pc, #16]	; (8003818 <USART2_IRQHandler+0x84>)
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e000      	b.n	800380e <USART2_IRQHandler+0x7a>
      return;
 800380c:	bf00      	nop
    }
  }
}
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40004400 	.word	0x40004400
 8003818:	40004404 	.word	0x40004404
 800381c:	20012eb0 	.word	0x20012eb0
 8003820:	20012eb4 	.word	0x20012eb4
 8003824:	4000440c 	.word	0x4000440c

08003828 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003836:	6013      	str	r3, [r2, #0]
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	4000440c 	.word	0x4000440c

08003848 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003854:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <HIF_UART_Init+0xc8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2d      	ldr	r2, [pc, #180]	; (8003910 <HIF_UART_Init+0xc8>)
 800385a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003860:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <HIF_UART_Init+0xcc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a2b      	ldr	r2, [pc, #172]	; (8003914 <HIF_UART_Init+0xcc>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800386c:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <HIF_UART_Init+0xd0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003878:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003880:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003882:	4a25      	ldr	r2, [pc, #148]	; (8003918 <HIF_UART_Init+0xd0>)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <HIF_UART_Init+0xd4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003894:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800389c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800389e:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HIF_UART_Init+0xd4>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80038a4:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <HIF_UART_Init+0xd8>)
 80038a6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80038aa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HIF_UART_Init+0xdc>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <HIF_UART_Init+0xe0>)
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80038be:	4a1b      	ldr	r2, [pc, #108]	; (800392c <HIF_UART_Init+0xe4>)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d6:	d302      	bcc.n	80038de <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80038d8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80038dc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	4a11      	ldr	r2, [pc, #68]	; (8003930 <HIF_UART_Init+0xe8>)
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80038ee:	4a11      	ldr	r2, [pc, #68]	; (8003934 <HIF_UART_Init+0xec>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80038f4:	4a10      	ldr	r2, [pc, #64]	; (8003938 <HIF_UART_Init+0xf0>)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80038fa:	2106      	movs	r1, #6
 80038fc:	2026      	movs	r0, #38	; 0x26
 80038fe:	f7ff feab 	bl	8003658 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003902:	2026      	movs	r0, #38	; 0x26
 8003904:	f7ff fe8a 	bl	800361c <__NVIC_EnableIRQ>
}
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023840 	.word	0x40023840
 8003914:	40023830 	.word	0x40023830
 8003918:	40020020 	.word	0x40020020
 800391c:	40020000 	.word	0x40020000
 8003920:	4000440c 	.word	0x4000440c
 8003924:	40004410 	.word	0x40004410
 8003928:	40004414 	.word	0x40004414
 800392c:	0501bd00 	.word	0x0501bd00
 8003930:	40004408 	.word	0x40004408
 8003934:	20012eb0 	.word	0x20012eb0
 8003938:	20012eb4 	.word	0x20012eb4

0800393c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <_DoInit+0x98>)
 8003944:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2203      	movs	r2, #3
 800394a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2203      	movs	r2, #3
 8003950:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <_DoInit+0x9c>)
 8003956:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a20      	ldr	r2, [pc, #128]	; (80039dc <_DoInit+0xa0>)
 800395c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003964:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <_DoInit+0x9c>)
 800397c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <_DoInit+0xa4>)
 8003982:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2210      	movs	r2, #16
 8003988:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3307      	adds	r3, #7
 80039a0:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <_DoInit+0xa8>)
 80039a2:	6810      	ldr	r0, [r2, #0]
 80039a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80039a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <_DoInit+0xac>)
 80039ae:	6810      	ldr	r0, [r2, #0]
 80039b0:	6018      	str	r0, [r3, #0]
 80039b2:	8891      	ldrh	r1, [r2, #4]
 80039b4:	7992      	ldrb	r2, [r2, #6]
 80039b6:	8099      	strh	r1, [r3, #4]
 80039b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80039ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80039c4:	f3bf 8f5f 	dmb	sy
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	20012eb8 	.word	0x20012eb8
 80039d8:	080063e4 	.word	0x080063e4
 80039dc:	20012f60 	.word	0x20012f60
 80039e0:	20013360 	.word	0x20013360
 80039e4:	080063f0 	.word	0x080063f0
 80039e8:	080063f4 	.word	0x080063f4

080039ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80039f8:	2300      	movs	r3, #0
 80039fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d905      	bls.n	8003a1c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	e007      	b.n	8003a2c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	69b9      	ldr	r1, [r7, #24]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	1acb      	subs	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	4293      	cmp	r3, r2
 8003a38:	bf28      	it	cs
 8003a3a:	4613      	movcs	r3, r2
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4293      	cmp	r3, r2
 8003a44:	bf28      	it	cs
 8003a46:	4613      	movcs	r3, r2
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f001 ffa3 	bl	80059a4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003a5e:	6a3a      	ldr	r2, [r7, #32]
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	4413      	add	r3, r2
 8003a64:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	4413      	add	r3, r2
 8003a6c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	4413      	add	r3, r2
 8003a7c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d101      	bne.n	8003a8c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a8c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1b2      	bne.n	8003a02 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3728      	adds	r7, #40	; 0x28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b088      	sub	sp, #32
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d911      	bls.n	8003aee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	6938      	ldr	r0, [r7, #16]
 8003ada:	f001 ff63 	bl	80059a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ade:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	441a      	add	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003aec:	e01f      	b.n	8003b2e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	6938      	ldr	r0, [r7, #16]
 8003b02:	f001 ff4f 	bl	80059a4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4413      	add	r3, r2
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6938      	ldr	r0, [r7, #16]
 8003b20:	f001 ff40 	bl	80059a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b24:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	60da      	str	r2, [r3, #12]
}
 8003b2e:	bf00      	nop
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003b36:	b480      	push	{r7}
 8003b38:	b087      	sub	sp, #28
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d808      	bhi.n	8003b64 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad2      	subs	r2, r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e004      	b.n	8003b6e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003b6e:	697b      	ldr	r3, [r7, #20]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08c      	sub	sp, #48	; 0x30
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003b88:	4b3e      	ldr	r3, [pc, #248]	; (8003c84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003b96:	f7ff fed1 	bl	800393c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4a37      	ldr	r2, [pc, #220]	; (8003c84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d92b      	bls.n	8003c20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	bf28      	it	cs
 8003bda:	4613      	movcs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	4413      	add	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	6939      	ldr	r1, [r7, #16]
 8003bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bee:	f001 fed9 	bl	80059a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4413      	add	r3, r2
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d101      	bne.n	8003c20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf28      	it	cs
 8003c30:	4613      	movcs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d019      	beq.n	8003c6e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	4413      	add	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	6939      	ldr	r1, [r7, #16]
 8003c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c4a:	f001 feab 	bl	80059a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4413      	add	r3, r2
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c78:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3730      	adds	r7, #48	; 0x30
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20012eb8 	.word	0x20012eb8

08003c88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	; 0x30
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003c94:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003ca2:	f7ff fe4b 	bl	800393c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	3360      	adds	r3, #96	; 0x60
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <SEGGER_RTT_ReadNoLock+0x108>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d92b      	bls.n	8003d2c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	bf28      	it	cs
 8003ce6:	4613      	movcs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	4413      	add	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	6939      	ldr	r1, [r7, #16]
 8003cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cfa:	f001 fe53 	bl	80059a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4413      	add	r3, r2
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d101      	bne.n	8003d2c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	bf28      	it	cs
 8003d3c:	4613      	movcs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d019      	beq.n	8003d7a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	4413      	add	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	6939      	ldr	r1, [r7, #16]
 8003d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d56:	f001 fe25 	bl	80059a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	4413      	add	r3, r2
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4413      	add	r3, r2
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4413      	add	r3, r2
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d84:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3730      	adds	r7, #48	; 0x30
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20012eb8 	.word	0x20012eb8

08003d94 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	3360      	adds	r3, #96	; 0x60
 8003db0:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003db2:	4413      	add	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d029      	beq.n	8003e12 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d82e      	bhi.n	8003e20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d013      	beq.n	8003df2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003dca:	e029      	b.n	8003e20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003dcc:	6978      	ldr	r0, [r7, #20]
 8003dce:	f7ff feb2 	bl	8003b36 <_GetAvailWriteSpace>
 8003dd2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d202      	bcs.n	8003de2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003de0:	e021      	b.n	8003e26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	69b9      	ldr	r1, [r7, #24]
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f7ff fe5b 	bl	8003aa6 <_WriteNoCheck>
    break;
 8003df0:	e019      	b.n	8003e26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003df2:	6978      	ldr	r0, [r7, #20]
 8003df4:	f7ff fe9f 	bl	8003b36 <_GetAvailWriteSpace>
 8003df8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	bf28      	it	cs
 8003e02:	4613      	movcs	r3, r2
 8003e04:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	69b9      	ldr	r1, [r7, #24]
 8003e0a:	6978      	ldr	r0, [r7, #20]
 8003e0c:	f7ff fe4b 	bl	8003aa6 <_WriteNoCheck>
    break;
 8003e10:	e009      	b.n	8003e26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	6978      	ldr	r0, [r7, #20]
 8003e18:	f7ff fde8 	bl	80039ec <_WriteBlocking>
 8003e1c:	61f8      	str	r0, [r7, #28]
    break;
 8003e1e:	e002      	b.n	8003e26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
    break;
 8003e24:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003e26:	69fb      	ldr	r3, [r7, #28]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20012eb8 	.word	0x20012eb8

08003e34 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003e4e:	f7ff fd75 	bl	800393c <_DoInit>
  SEGGER_RTT_LOCK();
 8003e52:	f3ef 8311 	mrs	r3, BASEPRI
 8003e56:	f04f 0120 	mov.w	r1, #32
 8003e5a:	f381 8811 	msr	BASEPRI, r1
 8003e5e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff ff95 	bl	8003d94 <SEGGER_RTT_WriteDownBufferNoLock>
 8003e6a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003e72:	697b      	ldr	r3, [r7, #20]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20012eb8 	.word	0x20012eb8

08003e80 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e9c:	f7ff fd4e 	bl	800393c <_DoInit>
  SEGGER_RTT_LOCK();
 8003ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ea4:	f04f 0120 	mov.w	r1, #32
 8003ea8:	f381 8811 	msr	BASEPRI, r1
 8003eac:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003eae:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003eb0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003eb6:	6939      	ldr	r1, [r7, #16]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	dbeb      	blt.n	8003eb6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003ede:	e000      	b.n	8003ee2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003ee0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	da3f      	bge.n	8003f6c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003eec:	6939      	ldr	r1, [r7, #16]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	440b      	add	r3, r1
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f00:	6939      	ldr	r1, [r7, #16]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	3304      	adds	r3, #4
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003f16:	6939      	ldr	r1, [r7, #16]
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	3320      	adds	r3, #32
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003f2a:	6939      	ldr	r1, [r7, #16]
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	440b      	add	r3, r1
 8003f38:	3328      	adds	r3, #40	; 0x28
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003f3e:	6939      	ldr	r1, [r7, #16]
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	440b      	add	r3, r1
 8003f4c:	3324      	adds	r3, #36	; 0x24
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f52:	6939      	ldr	r1, [r7, #16]
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	440b      	add	r3, r1
 8003f60:	332c      	adds	r3, #44	; 0x2c
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f66:	f3bf 8f5f 	dmb	sy
 8003f6a:	e002      	b.n	8003f72 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003f78:	69fb      	ldr	r3, [r7, #28]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20012eb8 	.word	0x20012eb8

08003f88 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003f96:	4b33      	ldr	r3, [pc, #204]	; (8004064 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003fa4:	f7ff fcca 	bl	800393c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fa8:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003faa:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d24d      	bcs.n	8004054 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8003fbc:	f04f 0120 	mov.w	r1, #32
 8003fc0:	f381 8811 	msr	BASEPRI, r1
 8003fc4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d031      	beq.n	8004030 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	440b      	add	r3, r1
 8003fda:	3360      	adds	r3, #96	; 0x60
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003fe0:	6979      	ldr	r1, [r7, #20]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	440b      	add	r3, r1
 8003fee:	3364      	adds	r3, #100	; 0x64
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003ff4:	6979      	ldr	r1, [r7, #20]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	3368      	adds	r3, #104	; 0x68
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004008:	6979      	ldr	r1, [r7, #20]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	440b      	add	r3, r1
 8004016:	3370      	adds	r3, #112	; 0x70
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	440b      	add	r3, r1
 800402a:	336c      	adds	r3, #108	; 0x6c
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004030:	6979      	ldr	r1, [r7, #20]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	440b      	add	r3, r1
 800403e:	3374      	adds	r3, #116	; 0x74
 8004040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004042:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004044:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e002      	b.n	800405a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800405a:	69fb      	ldr	r3, [r7, #28]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20012eb8 	.word	0x20012eb8

08004068 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004078:	e002      	b.n	8004080 <_EncodeStr+0x18>
    Len++;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	3301      	adds	r3, #1
 800407e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f6      	bne.n	800407a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	d901      	bls.n	8004098 <_EncodeStr+0x30>
    Len = Limit;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2bfe      	cmp	r3, #254	; 0xfe
 800409c:	d806      	bhi.n	80040ac <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	60fa      	str	r2, [r7, #12]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e011      	b.n	80040d0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	60fa      	str	r2, [r7, #12]
 80040b2:	22ff      	movs	r2, #255	; 0xff
 80040b4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	60fa      	str	r2, [r7, #12]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	0a19      	lsrs	r1, r3, #8
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	60fa      	str	r2, [r7, #12]
 80040cc:	b2ca      	uxtb	r2, r1
 80040ce:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80040d4:	e00a      	b.n	80040ec <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	1c53      	adds	r3, r2, #1
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1c59      	adds	r1, r3, #1
 80040e0:	60f9      	str	r1, [r7, #12]
 80040e2:	7812      	ldrb	r2, [r2, #0]
 80040e4:	701a      	strb	r2, [r3, #0]
    n++;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	3301      	adds	r3, #1
 80040ea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d3f0      	bcc.n	80040d6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80040f4:	68fb      	ldr	r3, [r7, #12]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3304      	adds	r3, #4
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004122:	4b36      	ldr	r3, [pc, #216]	; (80041fc <_HandleIncomingPacket+0xe0>)
 8004124:	7e1b      	ldrb	r3, [r3, #24]
 8004126:	4618      	mov	r0, r3
 8004128:	1cfb      	adds	r3, r7, #3
 800412a:	2201      	movs	r2, #1
 800412c:	4619      	mov	r1, r3
 800412e:	f7ff fdab 	bl	8003c88 <SEGGER_RTT_ReadNoLock>
 8004132:	4603      	mov	r3, r0
 8004134:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	dd54      	ble.n	80041e6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d032      	beq.n	80041a8 <_HandleIncomingPacket+0x8c>
 8004142:	2b80      	cmp	r3, #128	; 0x80
 8004144:	dc42      	bgt.n	80041cc <_HandleIncomingPacket+0xb0>
 8004146:	2b07      	cmp	r3, #7
 8004148:	dc16      	bgt.n	8004178 <_HandleIncomingPacket+0x5c>
 800414a:	2b00      	cmp	r3, #0
 800414c:	dd3e      	ble.n	80041cc <_HandleIncomingPacket+0xb0>
 800414e:	3b01      	subs	r3, #1
 8004150:	2b06      	cmp	r3, #6
 8004152:	d83b      	bhi.n	80041cc <_HandleIncomingPacket+0xb0>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <_HandleIncomingPacket+0x40>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	0800417f 	.word	0x0800417f
 8004160:	08004185 	.word	0x08004185
 8004164:	0800418b 	.word	0x0800418b
 8004168:	08004191 	.word	0x08004191
 800416c:	08004197 	.word	0x08004197
 8004170:	0800419d 	.word	0x0800419d
 8004174:	080041a3 	.word	0x080041a3
 8004178:	2b7f      	cmp	r3, #127	; 0x7f
 800417a:	d036      	beq.n	80041ea <_HandleIncomingPacket+0xce>
 800417c:	e026      	b.n	80041cc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800417e:	f000 fe3d 	bl	8004dfc <SEGGER_SYSVIEW_Start>
      break;
 8004182:	e037      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004184:	f000 fef6 	bl	8004f74 <SEGGER_SYSVIEW_Stop>
      break;
 8004188:	e034      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800418a:	f001 f8cf 	bl	800532c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800418e:	e031      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004190:	f001 f894 	bl	80052bc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004194:	e02e      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004196:	f000 ff13 	bl	8004fc0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800419a:	e02b      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800419c:	f001 faf2 	bl	8005784 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80041a0:	e028      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80041a2:	f001 fad1 	bl	8005748 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80041a6:	e025      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041a8:	4b14      	ldr	r3, [pc, #80]	; (80041fc <_HandleIncomingPacket+0xe0>)
 80041aa:	7e1b      	ldrb	r3, [r3, #24]
 80041ac:	4618      	mov	r0, r3
 80041ae:	1cfb      	adds	r3, r7, #3
 80041b0:	2201      	movs	r2, #1
 80041b2:	4619      	mov	r1, r3
 80041b4:	f7ff fd68 	bl	8003c88 <SEGGER_RTT_ReadNoLock>
 80041b8:	4603      	mov	r3, r0
 80041ba:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	dd15      	ble.n	80041ee <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 fa3f 	bl	8005648 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80041ca:	e010      	b.n	80041ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	b25b      	sxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	da0e      	bge.n	80041f2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <_HandleIncomingPacket+0xe0>)
 80041d6:	7e1b      	ldrb	r3, [r3, #24]
 80041d8:	4618      	mov	r0, r3
 80041da:	1cfb      	adds	r3, r7, #3
 80041dc:	2201      	movs	r2, #1
 80041de:	4619      	mov	r1, r3
 80041e0:	f7ff fd52 	bl	8003c88 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80041e4:	e005      	b.n	80041f2 <_HandleIncomingPacket+0xd6>
    }
  }
 80041e6:	bf00      	nop
 80041e8:	e004      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
      break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
      break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <_HandleIncomingPacket+0xd8>
      break;
 80041f2:	bf00      	nop
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20014378 	.word	0x20014378

08004200 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b08c      	sub	sp, #48	; 0x30
 8004204:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004206:	2301      	movs	r3, #1
 8004208:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800420a:	1d3b      	adds	r3, r7, #4
 800420c:	3301      	adds	r3, #1
 800420e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004214:	4b32      	ldr	r3, [pc, #200]	; (80042e0 <_TrySendOverflowPacket+0xe0>)
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
 800421a:	e00b      	b.n	8004234 <_TrySendOverflowPacket+0x34>
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	b2da      	uxtb	r2, r3
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004222:	1c59      	adds	r1, r3, #1
 8004224:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	09db      	lsrs	r3, r3, #7
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	2b7f      	cmp	r3, #127	; 0x7f
 8004238:	d8f0      	bhi.n	800421c <_TrySendOverflowPacket+0x1c>
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800424a:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <_TrySendOverflowPacket+0xe4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <_TrySendOverflowPacket+0xe0>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	623b      	str	r3, [r7, #32]
 8004262:	e00b      	b.n	800427c <_TrySendOverflowPacket+0x7c>
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	6279      	str	r1, [r7, #36]	; 0x24
 800426e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	09db      	lsrs	r3, r3, #7
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	2b7f      	cmp	r3, #127	; 0x7f
 8004280:	d8f0      	bhi.n	8004264 <_TrySendOverflowPacket+0x64>
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	627a      	str	r2, [r7, #36]	; 0x24
 8004288:	6a3a      	ldr	r2, [r7, #32]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <_TrySendOverflowPacket+0xe0>)
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	4618      	mov	r0, r3
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	f7fb ff94 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042a8:	4603      	mov	r3, r0
 80042aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80042ac:	f7ff fabc 	bl	8003828 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <_TrySendOverflowPacket+0xe0>)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <_TrySendOverflowPacket+0xe0>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <_TrySendOverflowPacket+0xe0>)
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e004      	b.n	80042d4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <_TrySendOverflowPacket+0xe0>)
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	3301      	adds	r3, #1
 80042d0:	4a03      	ldr	r2, [pc, #12]	; (80042e0 <_TrySendOverflowPacket+0xe0>)
 80042d2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80042d4:	693b      	ldr	r3, [r7, #16]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3730      	adds	r7, #48	; 0x30
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20014378 	.word	0x20014378
 80042e4:	e0001004 	.word	0xe0001004

080042e8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80042f4:	4b6d      	ldr	r3, [pc, #436]	; (80044ac <_SendPacket+0x1c4>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d010      	beq.n	800431e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80042fc:	4b6b      	ldr	r3, [pc, #428]	; (80044ac <_SendPacket+0x1c4>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80a5 	beq.w	8004450 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004306:	4b69      	ldr	r3, [pc, #420]	; (80044ac <_SendPacket+0x1c4>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d109      	bne.n	8004322 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800430e:	f7ff ff77 	bl	8004200 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004312:	4b66      	ldr	r3, [pc, #408]	; (80044ac <_SendPacket+0x1c4>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	f040 809c 	bne.w	8004454 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800431c:	e001      	b.n	8004322 <_SendPacket+0x3a>
    goto Send;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <_SendPacket+0x3c>
Send:
 8004322:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b1f      	cmp	r3, #31
 8004328:	d809      	bhi.n	800433e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800432a:	4b60      	ldr	r3, [pc, #384]	; (80044ac <_SendPacket+0x1c4>)
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	f040 808d 	bne.w	8004458 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b17      	cmp	r3, #23
 8004342:	d807      	bhi.n	8004354 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3b01      	subs	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e03d      	b.n	80043d0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b7f      	cmp	r3, #127	; 0x7f
 8004360:	d912      	bls.n	8004388 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	09da      	lsrs	r2, r3, #7
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3b01      	subs	r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	3a01      	subs	r2, #1
 800437a:	60fa      	str	r2, [r7, #12]
 800437c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e006      	b.n	8004396 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b7f      	cmp	r3, #127	; 0x7f
 800439a:	d912      	bls.n	80043c2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	09da      	lsrs	r2, r3, #7
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	3a01      	subs	r2, #1
 80043b4:	60fa      	str	r2, [r7, #12]
 80043b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e006      	b.n	80043d0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043d0:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <_SendPacket+0x1c8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043d6:	4b35      	ldr	r3, [pc, #212]	; (80044ac <_SendPacket+0x1c4>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	e00b      	b.n	8004402 <_SendPacket+0x11a>
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	6279      	str	r1, [r7, #36]	; 0x24
 80043f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	09db      	lsrs	r3, r3, #7
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	2b7f      	cmp	r3, #127	; 0x7f
 8004406:	d8f0      	bhi.n	80043ea <_SendPacket+0x102>
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	627a      	str	r2, [r7, #36]	; 0x24
 800440e:	6a3a      	ldr	r2, [r7, #32]
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004418:	4b24      	ldr	r3, [pc, #144]	; (80044ac <_SendPacket+0x1c4>)
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	4618      	mov	r0, r3
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	461a      	mov	r2, r3
 8004426:	68f9      	ldr	r1, [r7, #12]
 8004428:	f7fb fed2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800442c:	4603      	mov	r3, r0
 800442e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004430:	f7ff f9fa 	bl	8003828 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800443a:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <_SendPacket+0x1c4>)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	60d3      	str	r3, [r2, #12]
 8004440:	e00b      	b.n	800445a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004442:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <_SendPacket+0x1c4>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	b2da      	uxtb	r2, r3
 800444a:	4b18      	ldr	r3, [pc, #96]	; (80044ac <_SendPacket+0x1c4>)
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e004      	b.n	800445a <_SendPacket+0x172>
    goto SendDone;
 8004450:	bf00      	nop
 8004452:	e002      	b.n	800445a <_SendPacket+0x172>
      goto SendDone;
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <_SendPacket+0x172>
      goto SendDone;
 8004458:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <_SendPacket+0x1c4>)
 800445c:	7e1b      	ldrb	r3, [r3, #24]
 800445e:	4619      	mov	r1, r3
 8004460:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <_SendPacket+0x1cc>)
 8004462:	460b      	mov	r3, r1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	440b      	add	r3, r1
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4413      	add	r3, r2
 800446c:	336c      	adds	r3, #108	; 0x6c
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <_SendPacket+0x1c4>)
 8004472:	7e1b      	ldrb	r3, [r3, #24]
 8004474:	4618      	mov	r0, r3
 8004476:	490f      	ldr	r1, [pc, #60]	; (80044b4 <_SendPacket+0x1cc>)
 8004478:	4603      	mov	r3, r0
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	4403      	add	r3, r0
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	440b      	add	r3, r1
 8004482:	3370      	adds	r3, #112	; 0x70
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d00b      	beq.n	80044a2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <_SendPacket+0x1c4>)
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d107      	bne.n	80044a2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <_SendPacket+0x1c4>)
 8004494:	2201      	movs	r2, #1
 8004496:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004498:	f7ff fe40 	bl	800411c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <_SendPacket+0x1c4>)
 800449e:	2200      	movs	r2, #0
 80044a0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80044a2:	bf00      	nop
 80044a4:	3728      	adds	r7, #40	; 0x28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20014378 	.word	0x20014378
 80044b0:	e0001004 	.word	0xe0001004
 80044b4:	20012eb8 	.word	0x20012eb8

080044b8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	3301      	adds	r3, #1
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d80a      	bhi.n	80044e8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	1c59      	adds	r1, r3, #1
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6051      	str	r1, [r2, #4]
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b80      	cmp	r3, #128	; 0x80
 80044ee:	d15a      	bne.n	80045a6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	e00b      	b.n	800452a <_StoreChar+0x72>
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	1c59      	adds	r1, r3, #1
 800451a:	6279      	str	r1, [r7, #36]	; 0x24
 800451c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	09db      	lsrs	r3, r3, #7
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	2b7f      	cmp	r3, #127	; 0x7f
 800452e:	d8f0      	bhi.n	8004512 <_StoreChar+0x5a>
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	627a      	str	r2, [r7, #36]	; 0x24
 8004536:	6a3a      	ldr	r2, [r7, #32]
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e00b      	b.n	8004562 <_StoreChar+0xaa>
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	1c59      	adds	r1, r3, #1
 8004552:	61f9      	str	r1, [r7, #28]
 8004554:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	09db      	lsrs	r3, r3, #7
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b7f      	cmp	r3, #127	; 0x7f
 8004566:	d8f0      	bhi.n	800454a <_StoreChar+0x92>
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	61fa      	str	r2, [r7, #28]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	221a      	movs	r2, #26
 800457e:	6939      	ldr	r1, [r7, #16]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff feb1 	bl	80042e8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fdb9 	bl	8004102 <_PreparePacket>
 8004590:	4602      	mov	r2, r0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]
  }
}
 80045a6:	bf00      	nop
 80045a8:	3728      	adds	r7, #40	; 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80045c2:	2301      	movs	r3, #1
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80045ca:	e007      	b.n	80045dc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	623b      	str	r3, [r7, #32]
    Width++;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d2f3      	bcs.n	80045cc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d901      	bls.n	80045f0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80045f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11f      	bne.n	800463a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01c      	beq.n	800463a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <_PrintUnsigned+0x66>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <_PrintUnsigned+0x66>
        c = '0';
 8004610:	2330      	movs	r3, #48	; 0x30
 8004612:	76fb      	strb	r3, [r7, #27]
 8004614:	e001      	b.n	800461a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004616:	2320      	movs	r3, #32
 8004618:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800461a:	e007      	b.n	800462c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	3b01      	subs	r3, #1
 8004620:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004622:	7efb      	ldrb	r3, [r7, #27]
 8004624:	4619      	mov	r1, r3
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff ff46 	bl	80044b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <_PrintUnsigned+0x8a>
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	429a      	cmp	r2, r3
 8004638:	d3f0      	bcc.n	800461c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d903      	bls.n	8004648 <_PrintUnsigned+0x98>
      NumDigits--;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	e009      	b.n	800465c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d200      	bcs.n	800465c <_PrintUnsigned+0xac>
        break;
 800465a:	e005      	b.n	8004668 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	fb02 f303 	mul.w	r3, r2, r3
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004666:	e7e8      	b.n	800463a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004680:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <_PrintUnsigned+0x128>)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	4619      	mov	r1, r3
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff ff14 	bl	80044b8 <_StoreChar>
    Digit /= Base;
 8004690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e3      	bne.n	8004668 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d011      	beq.n	80046ce <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00e      	beq.n	80046ce <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046b0:	e006      	b.n	80046c0 <_PrintUnsigned+0x110>
        FieldWidth--;
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	3b01      	subs	r3, #1
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80046b8:	2120      	movs	r1, #32
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff fefc 	bl	80044b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <_PrintUnsigned+0x11e>
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d3f1      	bcc.n	80046b2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80046ce:	bf00      	nop
 80046d0:	3728      	adds	r7, #40	; 0x28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	08006434 	.word	0x08006434

080046dc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bfb8      	it	lt
 80046f0:	425b      	neglt	r3, r3
 80046f2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80046f8:	e007      	b.n	800470a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004702:	613b      	str	r3, [r7, #16]
    Width++;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	3301      	adds	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	429a      	cmp	r2, r3
 8004710:	daf3      	bge.n	80046fa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	429a      	cmp	r2, r3
 8004718:	d901      	bls.n	800471e <_PrintInt+0x42>
    Width = NumDigits;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <_PrintInt+0x5e>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	db04      	blt.n	8004734 <_PrintInt+0x58>
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <_PrintInt+0x5e>
    FieldWidth--;
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	3b01      	subs	r3, #1
 8004738:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <_PrintInt+0x6e>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d016      	beq.n	8004778 <_PrintInt+0x9c>
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d111      	bne.n	8004778 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00e      	beq.n	8004778 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800475a:	e006      	b.n	800476a <_PrintInt+0x8e>
        FieldWidth--;
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	3b01      	subs	r3, #1
 8004760:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004762:	2120      	movs	r1, #32
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fea7 	bl	80044b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <_PrintInt+0x9c>
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	429a      	cmp	r2, r3
 8004776:	d3f1      	bcc.n	800475c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	da07      	bge.n	800478e <_PrintInt+0xb2>
    v = -v;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	425b      	negs	r3, r3
 8004782:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004784:	212d      	movs	r1, #45	; 0x2d
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff fe96 	bl	80044b8 <_StoreChar>
 800478c:	e008      	b.n	80047a0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004798:	212b      	movs	r1, #43	; 0x2b
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff fe8c 	bl	80044b8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d019      	beq.n	80047de <_PrintInt+0x102>
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d114      	bne.n	80047de <_PrintInt+0x102>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d111      	bne.n	80047de <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00e      	beq.n	80047de <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047c0:	e006      	b.n	80047d0 <_PrintInt+0xf4>
        FieldWidth--;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80047c8:	2130      	movs	r1, #48	; 0x30
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff fe74 	bl	80044b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <_PrintInt+0x102>
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3f1      	bcc.n	80047c2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fedf 	bl	80045b0 <_PrintUnsigned>
}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b098      	sub	sp, #96	; 0x60
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004808:	f3ef 8311 	mrs	r3, BASEPRI
 800480c:	f04f 0120 	mov.w	r1, #32
 8004810:	f381 8811 	msr	BASEPRI, r1
 8004814:	633b      	str	r3, [r7, #48]	; 0x30
 8004816:	48b7      	ldr	r0, [pc, #732]	; (8004af4 <_VPrintTarget+0x2f8>)
 8004818:	f7ff fc73 	bl	8004102 <_PreparePacket>
 800481c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800481e:	4bb5      	ldr	r3, [pc, #724]	; (8004af4 <_VPrintTarget+0x2f8>)
 8004820:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004822:	2300      	movs	r3, #0
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3301      	adds	r3, #1
 800482e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004842:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8183 	beq.w	8004b52 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800484c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004850:	2b25      	cmp	r3, #37	; 0x25
 8004852:	f040 8170 	bne.w	8004b36 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004856:	2300      	movs	r3, #0
 8004858:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800485a:	2301      	movs	r3, #1
 800485c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004866:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800486a:	3b23      	subs	r3, #35	; 0x23
 800486c:	2b0d      	cmp	r3, #13
 800486e:	d83f      	bhi.n	80048f0 <_VPrintTarget+0xf4>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <_VPrintTarget+0x7c>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	080048e1 	.word	0x080048e1
 800487c:	080048f1 	.word	0x080048f1
 8004880:	080048f1 	.word	0x080048f1
 8004884:	080048f1 	.word	0x080048f1
 8004888:	080048f1 	.word	0x080048f1
 800488c:	080048f1 	.word	0x080048f1
 8004890:	080048f1 	.word	0x080048f1
 8004894:	080048f1 	.word	0x080048f1
 8004898:	080048d1 	.word	0x080048d1
 800489c:	080048f1 	.word	0x080048f1
 80048a0:	080048b1 	.word	0x080048b1
 80048a4:	080048f1 	.word	0x080048f1
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	080048c1 	.word	0x080048c1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e01a      	b.n	80048f6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80048c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c2:	f043 0302 	orr.w	r3, r3, #2
 80048c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e012      	b.n	80048f6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80048d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d2:	f043 0304 	orr.w	r3, r3, #4
 80048d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e00a      	b.n	80048f6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80048e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e2:	f043 0308 	orr.w	r3, r3, #8
 80048e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e002      	b.n	80048f6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80048f0:	2300      	movs	r3, #0
 80048f2:	653b      	str	r3, [r7, #80]	; 0x50
 80048f4:	bf00      	nop
        }
      } while (v);
 80048f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1b0      	bne.n	800485e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80048fc:	2300      	movs	r3, #0
 80048fe:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800490c:	2b2f      	cmp	r3, #47	; 0x2f
 800490e:	d912      	bls.n	8004936 <_VPrintTarget+0x13a>
 8004910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004914:	2b39      	cmp	r3, #57	; 0x39
 8004916:	d80e      	bhi.n	8004936 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800491e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	461a      	mov	r2, r3
 800492a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800492e:	4413      	add	r3, r2
 8004930:	3b30      	subs	r3, #48	; 0x30
 8004932:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004934:	e7e4      	b.n	8004900 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004936:	2300      	movs	r3, #0
 8004938:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004942:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004946:	2b2e      	cmp	r3, #46	; 0x2e
 8004948:	d11d      	bne.n	8004986 <_VPrintTarget+0x18a>
        sFormat++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004958:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800495c:	2b2f      	cmp	r3, #47	; 0x2f
 800495e:	d912      	bls.n	8004986 <_VPrintTarget+0x18a>
 8004960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004964:	2b39      	cmp	r3, #57	; 0x39
 8004966:	d80e      	bhi.n	8004986 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800496e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	461a      	mov	r2, r3
 800497a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800497e:	4413      	add	r3, r2
 8004980:	3b30      	subs	r3, #48	; 0x30
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004984:	e7e4      	b.n	8004950 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800498e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004992:	2b6c      	cmp	r3, #108	; 0x6c
 8004994:	d003      	beq.n	800499e <_VPrintTarget+0x1a2>
 8004996:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800499a:	2b68      	cmp	r3, #104	; 0x68
 800499c:	d107      	bne.n	80049ae <_VPrintTarget+0x1b2>
          c = *sFormat;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80049ac:	e7ef      	b.n	800498e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80049ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049b2:	2b25      	cmp	r3, #37	; 0x25
 80049b4:	f000 80b3 	beq.w	8004b1e <_VPrintTarget+0x322>
 80049b8:	2b25      	cmp	r3, #37	; 0x25
 80049ba:	f2c0 80b7 	blt.w	8004b2c <_VPrintTarget+0x330>
 80049be:	2b78      	cmp	r3, #120	; 0x78
 80049c0:	f300 80b4 	bgt.w	8004b2c <_VPrintTarget+0x330>
 80049c4:	2b58      	cmp	r3, #88	; 0x58
 80049c6:	f2c0 80b1 	blt.w	8004b2c <_VPrintTarget+0x330>
 80049ca:	3b58      	subs	r3, #88	; 0x58
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	f200 80ad 	bhi.w	8004b2c <_VPrintTarget+0x330>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <_VPrintTarget+0x1dc>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	08004acf 	.word	0x08004acf
 80049dc:	08004b2d 	.word	0x08004b2d
 80049e0:	08004b2d 	.word	0x08004b2d
 80049e4:	08004b2d 	.word	0x08004b2d
 80049e8:	08004b2d 	.word	0x08004b2d
 80049ec:	08004b2d 	.word	0x08004b2d
 80049f0:	08004b2d 	.word	0x08004b2d
 80049f4:	08004b2d 	.word	0x08004b2d
 80049f8:	08004b2d 	.word	0x08004b2d
 80049fc:	08004b2d 	.word	0x08004b2d
 8004a00:	08004b2d 	.word	0x08004b2d
 8004a04:	08004a5d 	.word	0x08004a5d
 8004a08:	08004a83 	.word	0x08004a83
 8004a0c:	08004b2d 	.word	0x08004b2d
 8004a10:	08004b2d 	.word	0x08004b2d
 8004a14:	08004b2d 	.word	0x08004b2d
 8004a18:	08004b2d 	.word	0x08004b2d
 8004a1c:	08004b2d 	.word	0x08004b2d
 8004a20:	08004b2d 	.word	0x08004b2d
 8004a24:	08004b2d 	.word	0x08004b2d
 8004a28:	08004b2d 	.word	0x08004b2d
 8004a2c:	08004b2d 	.word	0x08004b2d
 8004a30:	08004b2d 	.word	0x08004b2d
 8004a34:	08004b2d 	.word	0x08004b2d
 8004a38:	08004af9 	.word	0x08004af9
 8004a3c:	08004b2d 	.word	0x08004b2d
 8004a40:	08004b2d 	.word	0x08004b2d
 8004a44:	08004b2d 	.word	0x08004b2d
 8004a48:	08004b2d 	.word	0x08004b2d
 8004a4c:	08004aa9 	.word	0x08004aa9
 8004a50:	08004b2d 	.word	0x08004b2d
 8004a54:	08004b2d 	.word	0x08004b2d
 8004a58:	08004acf 	.word	0x08004acf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	1d19      	adds	r1, r3, #4
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6011      	str	r1, [r2, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004a70:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004a74:	f107 0314 	add.w	r3, r7, #20
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fd1c 	bl	80044b8 <_StoreChar>
        break;
 8004a80:	e055      	b.n	8004b2e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1d19      	adds	r1, r3, #4
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6011      	str	r1, [r2, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a90:	f107 0014 	add.w	r0, r7, #20
 8004a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9e:	220a      	movs	r2, #10
 8004aa0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004aa2:	f7ff fe1b 	bl	80046dc <_PrintInt>
        break;
 8004aa6:	e042      	b.n	8004b2e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	1d19      	adds	r1, r3, #4
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6011      	str	r1, [r2, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004ab6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ab8:	f107 0014 	add.w	r0, r7, #20
 8004abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac6:	220a      	movs	r2, #10
 8004ac8:	f7ff fd72 	bl	80045b0 <_PrintUnsigned>
        break;
 8004acc:	e02f      	b.n	8004b2e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	1d19      	adds	r1, r3, #4
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6011      	str	r1, [r2, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004adc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ade:	f107 0014 	add.w	r0, r7, #20
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aec:	2210      	movs	r2, #16
 8004aee:	f7ff fd5f 	bl	80045b0 <_PrintUnsigned>
        break;
 8004af2:	e01c      	b.n	8004b2e <_VPrintTarget+0x332>
 8004af4:	200143a8 	.word	0x200143a8
      case 'p':
        v = va_arg(*pParamList, int);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	1d19      	adds	r1, r3, #4
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6011      	str	r1, [r2, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004b06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b08:	f107 0014 	add.w	r0, r7, #20
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	2308      	movs	r3, #8
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2308      	movs	r3, #8
 8004b16:	2210      	movs	r2, #16
 8004b18:	f7ff fd4a 	bl	80045b0 <_PrintUnsigned>
        break;
 8004b1c:	e007      	b.n	8004b2e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	2125      	movs	r1, #37	; 0x25
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff fcc7 	bl	80044b8 <_StoreChar>
        break;
 8004b2a:	e000      	b.n	8004b2e <_VPrintTarget+0x332>
      default:
        break;
 8004b2c:	bf00      	nop
      }
      sFormat++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3301      	adds	r3, #1
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e007      	b.n	8004b46 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004b36:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004b3a:	f107 0314 	add.w	r3, r7, #20
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff fcb9 	bl	80044b8 <_StoreChar>
    }
  } while (*sFormat);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f47f ae72 	bne.w	8004834 <_VPrintTarget+0x38>
 8004b50:	e000      	b.n	8004b54 <_VPrintTarget+0x358>
      break;
 8004b52:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d041      	beq.n	8004bde <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	643b      	str	r3, [r7, #64]	; 0x40
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b6a:	e00b      	b.n	8004b84 <_VPrintTarget+0x388>
 8004b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b72:	1c59      	adds	r1, r3, #1
 8004b74:	6439      	str	r1, [r7, #64]	; 0x40
 8004b76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b80:	09db      	lsrs	r3, r3, #7
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b86:	2b7f      	cmp	r3, #127	; 0x7f
 8004b88:	d8f0      	bhi.n	8004b6c <_VPrintTarget+0x370>
 8004b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	643a      	str	r2, [r7, #64]	; 0x40
 8004b90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b98:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba2:	e00b      	b.n	8004bbc <_VPrintTarget+0x3c0>
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	1c59      	adds	r1, r3, #1
 8004bac:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb8:	09db      	lsrs	r3, r3, #7
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc0:	d8f0      	bhi.n	8004ba4 <_VPrintTarget+0x3a8>
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	63ba      	str	r2, [r7, #56]	; 0x38
 8004bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	221a      	movs	r2, #26
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fb85 	bl	80042e8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004be4:	bf00      	nop
 8004be6:	3758      	adds	r7, #88	; 0x58
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c00:	4917      	ldr	r1, [pc, #92]	; (8004c60 <SEGGER_SYSVIEW_Init+0x74>)
 8004c02:	4818      	ldr	r0, [pc, #96]	; (8004c64 <SEGGER_SYSVIEW_Init+0x78>)
 8004c04:	f7ff f93c 	bl	8003e80 <SEGGER_RTT_AllocUpBuffer>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c0e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c12:	785a      	ldrb	r2, [r3, #1]
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c16:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c18:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c1a:	7e1b      	ldrb	r3, [r3, #24]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	2308      	movs	r3, #8
 8004c24:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <SEGGER_SYSVIEW_Init+0x80>)
 8004c26:	490f      	ldr	r1, [pc, #60]	; (8004c64 <SEGGER_SYSVIEW_Init+0x78>)
 8004c28:	f7ff f9ae 	bl	8003f88 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c32:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <SEGGER_SYSVIEW_Init+0x84>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a0c      	ldr	r2, [pc, #48]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c38:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c3a:	4a0b      	ldr	r2, [pc, #44]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c40:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c46:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c4c:	4a06      	ldr	r2, [pc, #24]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20013370 	.word	0x20013370
 8004c64:	080063fc 	.word	0x080063fc
 8004c68:	20014378 	.word	0x20014378
 8004c6c:	20014370 	.word	0x20014370
 8004c70:	e0001004 	.word	0xe0001004

08004c74 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c7c:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6113      	str	r3, [r2, #16]
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20014378 	.word	0x20014378

08004c94 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ca0:	f04f 0120 	mov.w	r1, #32
 8004ca4:	f381 8811 	msr	BASEPRI, r1
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	4808      	ldr	r0, [pc, #32]	; (8004ccc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004cac:	f7ff fa29 	bl	8004102 <_PreparePacket>
 8004cb0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68b8      	ldr	r0, [r7, #8]
 8004cb8:	f7ff fb16 	bl	80042e8 <_SendPacket>
  RECORD_END();
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f383 8811 	msr	BASEPRI, r3
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	200143a8 	.word	0x200143a8

08004cd0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cda:	f3ef 8311 	mrs	r3, BASEPRI
 8004cde:	f04f 0120 	mov.w	r1, #32
 8004ce2:	f381 8811 	msr	BASEPRI, r1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	4816      	ldr	r0, [pc, #88]	; (8004d44 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004cea:	f7ff fa0a 	bl	8004102 <_PreparePacket>
 8004cee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	e00b      	b.n	8004d16 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	1c59      	adds	r1, r3, #1
 8004d06:	61f9      	str	r1, [r7, #28]
 8004d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	09db      	lsrs	r3, r3, #7
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1a:	d8f0      	bhi.n	8004cfe <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	61fa      	str	r2, [r7, #28]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	6938      	ldr	r0, [r7, #16]
 8004d32:	f7ff fad9 	bl	80042e8 <_SendPacket>
  RECORD_END();
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f383 8811 	msr	BASEPRI, r3
}
 8004d3c:	bf00      	nop
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	200143a8 	.word	0x200143a8

08004d48 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08c      	sub	sp, #48	; 0x30
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d54:	f3ef 8311 	mrs	r3, BASEPRI
 8004d58:	f04f 0120 	mov.w	r1, #32
 8004d5c:	f381 8811 	msr	BASEPRI, r1
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	4825      	ldr	r0, [pc, #148]	; (8004df8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d64:	f7ff f9cd 	bl	8004102 <_PreparePacket>
 8004d68:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d76:	e00b      	b.n	8004d90 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	09db      	lsrs	r3, r3, #7
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b7f      	cmp	r3, #127	; 0x7f
 8004d94:	d8f0      	bhi.n	8004d78 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	623b      	str	r3, [r7, #32]
 8004dae:	e00b      	b.n	8004dc8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	1c59      	adds	r1, r3, #1
 8004db8:	6279      	str	r1, [r7, #36]	; 0x24
 8004dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	09db      	lsrs	r3, r3, #7
 8004dc6:	623b      	str	r3, [r7, #32]
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2b7f      	cmp	r3, #127	; 0x7f
 8004dcc:	d8f0      	bhi.n	8004db0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	627a      	str	r2, [r7, #36]	; 0x24
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	6979      	ldr	r1, [r7, #20]
 8004de2:	69b8      	ldr	r0, [r7, #24]
 8004de4:	f7ff fa80 	bl	80042e8 <_SendPacket>
  RECORD_END();
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f383 8811 	msr	BASEPRI, r3
}
 8004dee:	bf00      	nop
 8004df0:	3730      	adds	r7, #48	; 0x30
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	200143a8 	.word	0x200143a8

08004dfc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	; 0x30
 8004e00:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004e02:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004e08:	f3ef 8311 	mrs	r3, BASEPRI
 8004e0c:	f04f 0120 	mov.w	r1, #32
 8004e10:	f381 8811 	msr	BASEPRI, r1
 8004e14:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004e16:	4b54      	ldr	r3, [pc, #336]	; (8004f68 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e18:	785b      	ldrb	r3, [r3, #1]
 8004e1a:	220a      	movs	r2, #10
 8004e1c:	4953      	ldr	r1, [pc, #332]	; (8004f6c <SEGGER_SYSVIEW_Start+0x170>)
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fb f9d6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004e2a:	f7fe fcfd 	bl	8003828 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e2e:	200a      	movs	r0, #10
 8004e30:	f7ff ff30 	bl	8004c94 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e34:	f3ef 8311 	mrs	r3, BASEPRI
 8004e38:	f04f 0120 	mov.w	r1, #32
 8004e3c:	f381 8811 	msr	BASEPRI, r1
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	484b      	ldr	r0, [pc, #300]	; (8004f70 <SEGGER_SYSVIEW_Start+0x174>)
 8004e44:	f7ff f95d 	bl	8004102 <_PreparePacket>
 8004e48:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e52:	4b45      	ldr	r3, [pc, #276]	; (8004f68 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e58:	e00b      	b.n	8004e72 <SEGGER_SYSVIEW_Start+0x76>
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	1c59      	adds	r1, r3, #1
 8004e62:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	09db      	lsrs	r3, r3, #7
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	2b7f      	cmp	r3, #127	; 0x7f
 8004e76:	d8f0      	bhi.n	8004e5a <SEGGER_SYSVIEW_Start+0x5e>
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8c:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	623b      	str	r3, [r7, #32]
 8004e92:	e00b      	b.n	8004eac <SEGGER_SYSVIEW_Start+0xb0>
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	1c59      	adds	r1, r3, #1
 8004e9c:	6279      	str	r1, [r7, #36]	; 0x24
 8004e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	09db      	lsrs	r3, r3, #7
 8004eaa:	623b      	str	r3, [r7, #32]
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb0:	d8f0      	bhi.n	8004e94 <SEGGER_SYSVIEW_Start+0x98>
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	627a      	str	r2, [r7, #36]	; 0x24
 8004eb8:	6a3a      	ldr	r2, [r7, #32]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	e00b      	b.n	8004ee6 <SEGGER_SYSVIEW_Start+0xea>
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	1c59      	adds	r1, r3, #1
 8004ed6:	61f9      	str	r1, [r7, #28]
 8004ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	09db      	lsrs	r3, r3, #7
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eea:	d8f0      	bhi.n	8004ece <SEGGER_SYSVIEW_Start+0xd2>
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	61fa      	str	r2, [r7, #28]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e00b      	b.n	8004f1e <SEGGER_SYSVIEW_Start+0x122>
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	6179      	str	r1, [r7, #20]
 8004f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	09db      	lsrs	r3, r3, #7
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b7f      	cmp	r3, #127	; 0x7f
 8004f22:	d8f0      	bhi.n	8004f06 <SEGGER_SYSVIEW_Start+0x10a>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	617a      	str	r2, [r7, #20]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f34:	2218      	movs	r2, #24
 8004f36:	6839      	ldr	r1, [r7, #0]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff f9d5 	bl	80042e8 <_SendPacket>
      RECORD_END();
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f44:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004f52:	f000 f9eb 	bl	800532c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004f56:	f000 f9b1 	bl	80052bc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004f5a:	f000 fc13 	bl	8005784 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004f5e:	bf00      	nop
 8004f60:	3730      	adds	r7, #48	; 0x30
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20014378 	.word	0x20014378
 8004f6c:	08006428 	.word	0x08006428
 8004f70:	200143a8 	.word	0x200143a8

08004f74 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f7e:	f04f 0120 	mov.w	r1, #32
 8004f82:	f381 8811 	msr	BASEPRI, r1
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	480b      	ldr	r0, [pc, #44]	; (8004fb8 <SEGGER_SYSVIEW_Stop+0x44>)
 8004f8a:	f7ff f8ba 	bl	8004102 <_PreparePacket>
 8004f8e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <SEGGER_SYSVIEW_Stop+0x48>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004f98:	220b      	movs	r2, #11
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6838      	ldr	r0, [r7, #0]
 8004f9e:	f7ff f9a3 	bl	80042e8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <SEGGER_SYSVIEW_Stop+0x48>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f383 8811 	msr	BASEPRI, r3
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200143a8 	.word	0x200143a8
 8004fbc:	20014378 	.word	0x20014378

08004fc0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fca:	f04f 0120 	mov.w	r1, #32
 8004fce:	f381 8811 	msr	BASEPRI, r1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	4845      	ldr	r0, [pc, #276]	; (80050ec <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004fd6:	f7ff f894 	bl	8004102 <_PreparePacket>
 8004fda:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe4:	4b42      	ldr	r3, [pc, #264]	; (80050f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fea:	e00b      	b.n	8005004 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	09db      	lsrs	r3, r3, #7
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	2b7f      	cmp	r3, #127	; 0x7f
 8005008:	d8f0      	bhi.n	8004fec <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
 800501e:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	e00b      	b.n	800503e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	1c59      	adds	r1, r3, #1
 800502e:	6279      	str	r1, [r7, #36]	; 0x24
 8005030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	09db      	lsrs	r3, r3, #7
 800503c:	623b      	str	r3, [r7, #32]
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	2b7f      	cmp	r3, #127	; 0x7f
 8005042:	d8f0      	bhi.n	8005026 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	627a      	str	r2, [r7, #36]	; 0x24
 800504a:	6a3a      	ldr	r2, [r7, #32]
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	e00b      	b.n	8005078 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	b2da      	uxtb	r2, r3
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	1c59      	adds	r1, r3, #1
 8005068:	61f9      	str	r1, [r7, #28]
 800506a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	09db      	lsrs	r3, r3, #7
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b7f      	cmp	r3, #127	; 0x7f
 800507c:	d8f0      	bhi.n	8005060 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	61fa      	str	r2, [r7, #28]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	e00b      	b.n	80050b0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	b2da      	uxtb	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1c59      	adds	r1, r3, #1
 80050a0:	6179      	str	r1, [r7, #20]
 80050a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	09db      	lsrs	r3, r3, #7
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b7f      	cmp	r3, #127	; 0x7f
 80050b4:	d8f0      	bhi.n	8005098 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	617a      	str	r2, [r7, #20]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050c6:	2218      	movs	r2, #24
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	68b8      	ldr	r0, [r7, #8]
 80050cc:	f7ff f90c 	bl	80042e8 <_SendPacket>
  RECORD_END();
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80050de:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	4798      	blx	r3
  }
}
 80050e4:	bf00      	nop
 80050e6:	3730      	adds	r7, #48	; 0x30
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200143a8 	.word	0x200143a8
 80050f0:	20014378 	.word	0x20014378

080050f4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b092      	sub	sp, #72	; 0x48
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80050fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005100:	f04f 0120 	mov.w	r1, #32
 8005104:	f381 8811 	msr	BASEPRI, r1
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	486a      	ldr	r0, [pc, #424]	; (80052b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800510c:	f7fe fff9 	bl	8004102 <_PreparePacket>
 8005110:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	647b      	str	r3, [r7, #68]	; 0x44
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b66      	ldr	r3, [pc, #408]	; (80052b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	643b      	str	r3, [r7, #64]	; 0x40
 8005126:	e00b      	b.n	8005140 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512a:	b2da      	uxtb	r2, r3
 800512c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512e:	1c59      	adds	r1, r3, #1
 8005130:	6479      	str	r1, [r7, #68]	; 0x44
 8005132:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513c:	09db      	lsrs	r3, r3, #7
 800513e:	643b      	str	r3, [r7, #64]	; 0x40
 8005140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005142:	2b7f      	cmp	r3, #127	; 0x7f
 8005144:	d8f0      	bhi.n	8005128 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	647a      	str	r2, [r7, #68]	; 0x44
 800514c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005154:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005160:	e00b      	b.n	800517a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	b2da      	uxtb	r2, r3
 8005166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800516c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	09db      	lsrs	r3, r3, #7
 8005178:	63bb      	str	r3, [r7, #56]	; 0x38
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2b7f      	cmp	r3, #127	; 0x7f
 800517e:	d8f0      	bhi.n	8005162 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	4619      	mov	r1, r3
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7fe ff65 	bl	8004068 <_EncodeStr>
 800519e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80051a0:	2209      	movs	r2, #9
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	6938      	ldr	r0, [r7, #16]
 80051a6:	f7ff f89f 	bl	80042e8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b40      	ldr	r3, [pc, #256]	; (80052b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	633b      	str	r3, [r7, #48]	; 0x30
 80051be:	e00b      	b.n	80051d8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	6379      	str	r1, [r7, #52]	; 0x34
 80051ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	09db      	lsrs	r3, r3, #7
 80051d6:	633b      	str	r3, [r7, #48]	; 0x30
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	2b7f      	cmp	r3, #127	; 0x7f
 80051dc:	d8f0      	bhi.n	80051c0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80051de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	637a      	str	r2, [r7, #52]	; 0x34
 80051e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f8:	e00b      	b.n	8005212 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	1c59      	adds	r1, r3, #1
 8005202:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005204:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	09db      	lsrs	r3, r3, #7
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	2b7f      	cmp	r3, #127	; 0x7f
 8005216:	d8f0      	bhi.n	80051fa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800521e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	e00b      	b.n	800524c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	b2da      	uxtb	r2, r3
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	1c59      	adds	r1, r3, #1
 800523c:	6279      	str	r1, [r7, #36]	; 0x24
 800523e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	09db      	lsrs	r3, r3, #7
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	2b7f      	cmp	r3, #127	; 0x7f
 8005250:	d8f0      	bhi.n	8005234 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	627a      	str	r2, [r7, #36]	; 0x24
 8005258:	6a3a      	ldr	r2, [r7, #32]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	2300      	movs	r3, #0
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e00b      	b.n	8005284 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	b2da      	uxtb	r2, r3
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	1c59      	adds	r1, r3, #1
 8005274:	61f9      	str	r1, [r7, #28]
 8005276:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	09db      	lsrs	r3, r3, #7
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b7f      	cmp	r3, #127	; 0x7f
 8005288:	d8f0      	bhi.n	800526c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	61fa      	str	r2, [r7, #28]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800529a:	2215      	movs	r2, #21
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	6938      	ldr	r0, [r7, #16]
 80052a0:	f7ff f822 	bl	80042e8 <_SendPacket>
  RECORD_END();
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f383 8811 	msr	BASEPRI, r3
}
 80052aa:	bf00      	nop
 80052ac:	3748      	adds	r7, #72	; 0x48
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	200143a8 	.word	0x200143a8
 80052b8:	20014378 	.word	0x20014378

080052bc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80052c0:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80052d2:	4b03      	ldr	r3, [pc, #12]	; (80052e0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4798      	blx	r3
  }
}
 80052da:	bf00      	nop
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20014378 	.word	0x20014378

080052e4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052ec:	f3ef 8311 	mrs	r3, BASEPRI
 80052f0:	f04f 0120 	mov.w	r1, #32
 80052f4:	f381 8811 	msr	BASEPRI, r1
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	480b      	ldr	r0, [pc, #44]	; (8005328 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80052fc:	f7fe ff01 	bl	8004102 <_PreparePacket>
 8005300:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005302:	2280      	movs	r2, #128	; 0x80
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	6938      	ldr	r0, [r7, #16]
 8005308:	f7fe feae 	bl	8004068 <_EncodeStr>
 800530c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800530e:	220e      	movs	r2, #14
 8005310:	68f9      	ldr	r1, [r7, #12]
 8005312:	6938      	ldr	r0, [r7, #16]
 8005314:	f7fe ffe8 	bl	80042e8 <_SendPacket>
  RECORD_END();
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f383 8811 	msr	BASEPRI, r3
}
 800531e:	bf00      	nop
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	200143a8 	.word	0x200143a8

0800532c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01a      	beq.n	8005370 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005344:	4b10      	ldr	r3, [pc, #64]	; (8005388 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4798      	blx	r3
 800534c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005350:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	000a      	movs	r2, r1
 8005360:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005362:	4613      	mov	r3, r2
 8005364:	461a      	mov	r2, r3
 8005366:	4621      	mov	r1, r4
 8005368:	200d      	movs	r0, #13
 800536a:	f7ff fced 	bl	8004d48 <SEGGER_SYSVIEW_RecordU32x2>
 800536e:	e006      	b.n	800537e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005370:	4b06      	ldr	r3, [pc, #24]	; (800538c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4619      	mov	r1, r3
 8005376:	200c      	movs	r0, #12
 8005378:	f7ff fcaa 	bl	8004cd0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}
 8005386:	bf00      	nop
 8005388:	20014378 	.word	0x20014378
 800538c:	e0001004 	.word	0xe0001004

08005390 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005396:	f3ef 8311 	mrs	r3, BASEPRI
 800539a:	f04f 0120 	mov.w	r1, #32
 800539e:	f381 8811 	msr	BASEPRI, r1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	4819      	ldr	r0, [pc, #100]	; (800540c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80053a6:	f7fe feac 	bl	8004102 <_PreparePacket>
 80053aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80053b0:	4b17      	ldr	r3, [pc, #92]	; (8005410 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	e00b      	b.n	80053dc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	1c59      	adds	r1, r3, #1
 80053cc:	6179      	str	r1, [r7, #20]
 80053ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	09db      	lsrs	r3, r3, #7
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b7f      	cmp	r3, #127	; 0x7f
 80053e0:	d8f0      	bhi.n	80053c4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	617a      	str	r2, [r7, #20]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80053f2:	2202      	movs	r2, #2
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	68b8      	ldr	r0, [r7, #8]
 80053f8:	f7fe ff76 	bl	80042e8 <_SendPacket>
  RECORD_END();
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f383 8811 	msr	BASEPRI, r3
}
 8005402:	bf00      	nop
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	200143a8 	.word	0x200143a8
 8005410:	e000ed04 	.word	0xe000ed04

08005414 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800541a:	f3ef 8311 	mrs	r3, BASEPRI
 800541e:	f04f 0120 	mov.w	r1, #32
 8005422:	f381 8811 	msr	BASEPRI, r1
 8005426:	607b      	str	r3, [r7, #4]
 8005428:	4807      	ldr	r0, [pc, #28]	; (8005448 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800542a:	f7fe fe6a 	bl	8004102 <_PreparePacket>
 800542e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005430:	2203      	movs	r2, #3
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6838      	ldr	r0, [r7, #0]
 8005436:	f7fe ff57 	bl	80042e8 <_SendPacket>
  RECORD_END();
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f383 8811 	msr	BASEPRI, r3
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	200143a8 	.word	0x200143a8

0800544c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005452:	f3ef 8311 	mrs	r3, BASEPRI
 8005456:	f04f 0120 	mov.w	r1, #32
 800545a:	f381 8811 	msr	BASEPRI, r1
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	4807      	ldr	r0, [pc, #28]	; (8005480 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005462:	f7fe fe4e 	bl	8004102 <_PreparePacket>
 8005466:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005468:	2212      	movs	r2, #18
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	6838      	ldr	r0, [r7, #0]
 800546e:	f7fe ff3b 	bl	80042e8 <_SendPacket>
  RECORD_END();
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f383 8811 	msr	BASEPRI, r3
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200143a8 	.word	0x200143a8

08005484 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800548a:	f3ef 8311 	mrs	r3, BASEPRI
 800548e:	f04f 0120 	mov.w	r1, #32
 8005492:	f381 8811 	msr	BASEPRI, r1
 8005496:	607b      	str	r3, [r7, #4]
 8005498:	4807      	ldr	r0, [pc, #28]	; (80054b8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800549a:	f7fe fe32 	bl	8004102 <_PreparePacket>
 800549e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80054a0:	2211      	movs	r2, #17
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	6838      	ldr	r0, [r7, #0]
 80054a6:	f7fe ff1f 	bl	80042e8 <_SendPacket>
  RECORD_END();
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f383 8811 	msr	BASEPRI, r3
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200143a8 	.word	0x200143a8

080054bc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054c4:	f3ef 8311 	mrs	r3, BASEPRI
 80054c8:	f04f 0120 	mov.w	r1, #32
 80054cc:	f381 8811 	msr	BASEPRI, r1
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	4819      	ldr	r0, [pc, #100]	; (8005538 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80054d4:	f7fe fe15 	bl	8004102 <_PreparePacket>
 80054d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054de:	4b17      	ldr	r3, [pc, #92]	; (800553c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	61fb      	str	r3, [r7, #28]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	e00b      	b.n	800550a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	1c59      	adds	r1, r3, #1
 80054fa:	61f9      	str	r1, [r7, #28]
 80054fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	09db      	lsrs	r3, r3, #7
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b7f      	cmp	r3, #127	; 0x7f
 800550e:	d8f0      	bhi.n	80054f2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	61fa      	str	r2, [r7, #28]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005520:	2208      	movs	r2, #8
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	6938      	ldr	r0, [r7, #16]
 8005526:	f7fe fedf 	bl	80042e8 <_SendPacket>
  RECORD_END();
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f383 8811 	msr	BASEPRI, r3
}
 8005530:	bf00      	nop
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	200143a8 	.word	0x200143a8
 800553c:	20014378 	.word	0x20014378

08005540 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005548:	f3ef 8311 	mrs	r3, BASEPRI
 800554c:	f04f 0120 	mov.w	r1, #32
 8005550:	f381 8811 	msr	BASEPRI, r1
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	4819      	ldr	r0, [pc, #100]	; (80055bc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005558:	f7fe fdd3 	bl	8004102 <_PreparePacket>
 800555c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005562:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	e00b      	b.n	800558e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	1c59      	adds	r1, r3, #1
 800557e:	61f9      	str	r1, [r7, #28]
 8005580:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	09db      	lsrs	r3, r3, #7
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b7f      	cmp	r3, #127	; 0x7f
 8005592:	d8f0      	bhi.n	8005576 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	61fa      	str	r2, [r7, #28]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80055a4:	2204      	movs	r2, #4
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	6938      	ldr	r0, [r7, #16]
 80055aa:	f7fe fe9d 	bl	80042e8 <_SendPacket>
  RECORD_END();
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f383 8811 	msr	BASEPRI, r3
}
 80055b4:	bf00      	nop
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	200143a8 	.word	0x200143a8
 80055c0:	20014378 	.word	0x20014378

080055c4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055cc:	f3ef 8311 	mrs	r3, BASEPRI
 80055d0:	f04f 0120 	mov.w	r1, #32
 80055d4:	f381 8811 	msr	BASEPRI, r1
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	4819      	ldr	r0, [pc, #100]	; (8005640 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80055dc:	f7fe fd91 	bl	8004102 <_PreparePacket>
 80055e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055e6:	4b17      	ldr	r3, [pc, #92]	; (8005644 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	e00b      	b.n	8005612 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	1c59      	adds	r1, r3, #1
 8005602:	61f9      	str	r1, [r7, #28]
 8005604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	09db      	lsrs	r3, r3, #7
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b7f      	cmp	r3, #127	; 0x7f
 8005616:	d8f0      	bhi.n	80055fa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	61fa      	str	r2, [r7, #28]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005628:	2206      	movs	r2, #6
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	6938      	ldr	r0, [r7, #16]
 800562e:	f7fe fe5b 	bl	80042e8 <_SendPacket>
  RECORD_END();
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f383 8811 	msr	BASEPRI, r3
}
 8005638:	bf00      	nop
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	200143a8 	.word	0x200143a8
 8005644:	20014378 	.word	0x20014378

08005648 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b08c      	sub	sp, #48	; 0x30
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005652:	4b3b      	ldr	r3, [pc, #236]	; (8005740 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d06d      	beq.n	8005736 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800565a:	4b39      	ldr	r3, [pc, #228]	; (8005740 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005660:	2300      	movs	r3, #0
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
 8005664:	e008      	b.n	8005678 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	3301      	adds	r3, #1
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800567c:	429a      	cmp	r2, r3
 800567e:	d3f2      	bcc.n	8005666 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005680:	e000      	b.n	8005684 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005682:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d055      	beq.n	8005736 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800568a:	f3ef 8311 	mrs	r3, BASEPRI
 800568e:	f04f 0120 	mov.w	r1, #32
 8005692:	f381 8811 	msr	BASEPRI, r1
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	482a      	ldr	r0, [pc, #168]	; (8005744 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800569a:	f7fe fd32 	bl	8004102 <_PreparePacket>
 800569e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	623b      	str	r3, [r7, #32]
 80056ac:	e00b      	b.n	80056c6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	1c59      	adds	r1, r3, #1
 80056b6:	6279      	str	r1, [r7, #36]	; 0x24
 80056b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	09db      	lsrs	r3, r3, #7
 80056c4:	623b      	str	r3, [r7, #32]
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	2b7f      	cmp	r3, #127	; 0x7f
 80056ca:	d8f0      	bhi.n	80056ae <SEGGER_SYSVIEW_SendModule+0x66>
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	627a      	str	r2, [r7, #36]	; 0x24
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	e00b      	b.n	8005700 <SEGGER_SYSVIEW_SendModule+0xb8>
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	61f9      	str	r1, [r7, #28]
 80056f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	09db      	lsrs	r3, r3, #7
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b7f      	cmp	r3, #127	; 0x7f
 8005704:	d8f0      	bhi.n	80056e8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	61fa      	str	r2, [r7, #28]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2280      	movs	r2, #128	; 0x80
 800571c:	4619      	mov	r1, r3
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7fe fca2 	bl	8004068 <_EncodeStr>
 8005724:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005726:	2216      	movs	r2, #22
 8005728:	68f9      	ldr	r1, [r7, #12]
 800572a:	6938      	ldr	r0, [r7, #16]
 800572c:	f7fe fddc 	bl	80042e8 <_SendPacket>
      RECORD_END();
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005736:	bf00      	nop
 8005738:	3730      	adds	r7, #48	; 0x30
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200143a0 	.word	0x200143a0
 8005744:	200143a8 	.word	0x200143a8

08005748 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800574e:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00f      	beq.n	8005776 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f2      	bne.n	800575c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	200143a0 	.word	0x200143a0

08005784 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800578a:	f3ef 8311 	mrs	r3, BASEPRI
 800578e:	f04f 0120 	mov.w	r1, #32
 8005792:	f381 8811 	msr	BASEPRI, r1
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	4817      	ldr	r0, [pc, #92]	; (80057f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800579a:	f7fe fcb2 	bl	8004102 <_PreparePacket>
 800579e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	e00b      	b.n	80057c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	1c59      	adds	r1, r3, #1
 80057b8:	6179      	str	r1, [r7, #20]
 80057ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	09db      	lsrs	r3, r3, #7
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b7f      	cmp	r3, #127	; 0x7f
 80057cc:	d8f0      	bhi.n	80057b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	617a      	str	r2, [r7, #20]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80057de:	221b      	movs	r2, #27
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	68b8      	ldr	r0, [r7, #8]
 80057e4:	f7fe fd80 	bl	80042e8 <_SendPacket>
  RECORD_END();
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f383 8811 	msr	BASEPRI, r3
}
 80057ee:	bf00      	nop
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	200143a8 	.word	0x200143a8
 80057fc:	200143a4 	.word	0x200143a4

08005800 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005800:	b40f      	push	{r0, r1, r2, r3}
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005808:	f107 0314 	add.w	r3, r7, #20
 800580c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	461a      	mov	r2, r3
 8005812:	2100      	movs	r1, #0
 8005814:	6938      	ldr	r0, [r7, #16]
 8005816:	f7fe fff1 	bl	80047fc <_VPrintTarget>
  va_end(ParamList);
}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr

08005828 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	; 0x28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005830:	f3ef 8311 	mrs	r3, BASEPRI
 8005834:	f04f 0120 	mov.w	r1, #32
 8005838:	f381 8811 	msr	BASEPRI, r1
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	4827      	ldr	r0, [pc, #156]	; (80058dc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005840:	f7fe fc5f 	bl	8004102 <_PreparePacket>
 8005844:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	6938      	ldr	r0, [r7, #16]
 800584c:	f7fe fc0c 	bl	8004068 <_EncodeStr>
 8005850:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	2301      	movs	r3, #1
 8005858:	623b      	str	r3, [r7, #32]
 800585a:	e00b      	b.n	8005874 <SEGGER_SYSVIEW_Warn+0x4c>
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	1c59      	adds	r1, r3, #1
 8005864:	6279      	str	r1, [r7, #36]	; 0x24
 8005866:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	09db      	lsrs	r3, r3, #7
 8005872:	623b      	str	r3, [r7, #32]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	2b7f      	cmp	r3, #127	; 0x7f
 8005878:	d8f0      	bhi.n	800585c <SEGGER_SYSVIEW_Warn+0x34>
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	627a      	str	r2, [r7, #36]	; 0x24
 8005880:	6a3a      	ldr	r2, [r7, #32]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	2300      	movs	r3, #0
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e00b      	b.n	80058ac <SEGGER_SYSVIEW_Warn+0x84>
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	61f9      	str	r1, [r7, #28]
 800589e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	09db      	lsrs	r3, r3, #7
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2b7f      	cmp	r3, #127	; 0x7f
 80058b0:	d8f0      	bhi.n	8005894 <SEGGER_SYSVIEW_Warn+0x6c>
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	61fa      	str	r2, [r7, #28]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058c2:	221a      	movs	r2, #26
 80058c4:	68f9      	ldr	r1, [r7, #12]
 80058c6:	6938      	ldr	r0, [r7, #16]
 80058c8:	f7fe fd0e 	bl	80042e8 <_SendPacket>
  RECORD_END();
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f383 8811 	msr	BASEPRI, r3
}
 80058d2:	bf00      	nop
 80058d4:	3728      	adds	r7, #40	; 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200143a8 	.word	0x200143a8

080058e0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80058e4:	4b13      	ldr	r3, [pc, #76]	; (8005934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058e6:	7e1b      	ldrb	r3, [r3, #24]
 80058e8:	4619      	mov	r1, r3
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80058ec:	460b      	mov	r3, r1
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	440b      	add	r3, r1
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	336c      	adds	r3, #108	; 0x6c
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058fc:	7e1b      	ldrb	r3, [r3, #24]
 80058fe:	4618      	mov	r0, r3
 8005900:	490d      	ldr	r1, [pc, #52]	; (8005938 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005902:	4603      	mov	r3, r0
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	4403      	add	r3, r0
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	440b      	add	r3, r1
 800590c:	3370      	adds	r3, #112	; 0x70
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d00b      	beq.n	800592c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005916:	789b      	ldrb	r3, [r3, #2]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800591e:	2201      	movs	r2, #1
 8005920:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005922:	f7fe fbfb 	bl	800411c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005926:	4b03      	ldr	r3, [pc, #12]	; (8005934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005928:	2200      	movs	r2, #0
 800592a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800592c:	4b01      	ldr	r3, [pc, #4]	; (8005934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800592e:	781b      	ldrb	r3, [r3, #0]
}
 8005930:	4618      	mov	r0, r3
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20014378 	.word	0x20014378
 8005938:	20012eb8 	.word	0x20012eb8

0800593c <__libc_init_array>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4d0d      	ldr	r5, [pc, #52]	; (8005974 <__libc_init_array+0x38>)
 8005940:	4c0d      	ldr	r4, [pc, #52]	; (8005978 <__libc_init_array+0x3c>)
 8005942:	1b64      	subs	r4, r4, r5
 8005944:	10a4      	asrs	r4, r4, #2
 8005946:	2600      	movs	r6, #0
 8005948:	42a6      	cmp	r6, r4
 800594a:	d109      	bne.n	8005960 <__libc_init_array+0x24>
 800594c:	4d0b      	ldr	r5, [pc, #44]	; (800597c <__libc_init_array+0x40>)
 800594e:	4c0c      	ldr	r4, [pc, #48]	; (8005980 <__libc_init_array+0x44>)
 8005950:	f000 fcc0 	bl	80062d4 <_init>
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	2600      	movs	r6, #0
 800595a:	42a6      	cmp	r6, r4
 800595c:	d105      	bne.n	800596a <__libc_init_array+0x2e>
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	f855 3b04 	ldr.w	r3, [r5], #4
 8005964:	4798      	blx	r3
 8005966:	3601      	adds	r6, #1
 8005968:	e7ee      	b.n	8005948 <__libc_init_array+0xc>
 800596a:	f855 3b04 	ldr.w	r3, [r5], #4
 800596e:	4798      	blx	r3
 8005970:	3601      	adds	r6, #1
 8005972:	e7f2      	b.n	800595a <__libc_init_array+0x1e>
 8005974:	08006480 	.word	0x08006480
 8005978:	08006480 	.word	0x08006480
 800597c:	08006480 	.word	0x08006480
 8005980:	08006484 	.word	0x08006484

08005984 <memcmp>:
 8005984:	b510      	push	{r4, lr}
 8005986:	3901      	subs	r1, #1
 8005988:	4402      	add	r2, r0
 800598a:	4290      	cmp	r0, r2
 800598c:	d101      	bne.n	8005992 <memcmp+0xe>
 800598e:	2000      	movs	r0, #0
 8005990:	e005      	b.n	800599e <memcmp+0x1a>
 8005992:	7803      	ldrb	r3, [r0, #0]
 8005994:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005998:	42a3      	cmp	r3, r4
 800599a:	d001      	beq.n	80059a0 <memcmp+0x1c>
 800599c:	1b18      	subs	r0, r3, r4
 800599e:	bd10      	pop	{r4, pc}
 80059a0:	3001      	adds	r0, #1
 80059a2:	e7f2      	b.n	800598a <memcmp+0x6>

080059a4 <memcpy>:
 80059a4:	440a      	add	r2, r1
 80059a6:	4291      	cmp	r1, r2
 80059a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059ac:	d100      	bne.n	80059b0 <memcpy+0xc>
 80059ae:	4770      	bx	lr
 80059b0:	b510      	push	{r4, lr}
 80059b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ba:	4291      	cmp	r1, r2
 80059bc:	d1f9      	bne.n	80059b2 <memcpy+0xe>
 80059be:	bd10      	pop	{r4, pc}

080059c0 <memset>:
 80059c0:	4402      	add	r2, r0
 80059c2:	4603      	mov	r3, r0
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d100      	bne.n	80059ca <memset+0xa>
 80059c8:	4770      	bx	lr
 80059ca:	f803 1b01 	strb.w	r1, [r3], #1
 80059ce:	e7f9      	b.n	80059c4 <memset+0x4>

080059d0 <sniprintf>:
 80059d0:	b40c      	push	{r2, r3}
 80059d2:	b530      	push	{r4, r5, lr}
 80059d4:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <sniprintf+0x64>)
 80059d6:	1e0c      	subs	r4, r1, #0
 80059d8:	681d      	ldr	r5, [r3, #0]
 80059da:	b09d      	sub	sp, #116	; 0x74
 80059dc:	da08      	bge.n	80059f0 <sniprintf+0x20>
 80059de:	238b      	movs	r3, #139	; 0x8b
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	f04f 30ff 	mov.w	r0, #4294967295
 80059e6:	b01d      	add	sp, #116	; 0x74
 80059e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059ec:	b002      	add	sp, #8
 80059ee:	4770      	bx	lr
 80059f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80059f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059f8:	bf14      	ite	ne
 80059fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059fe:	4623      	moveq	r3, r4
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	9307      	str	r3, [sp, #28]
 8005a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a08:	9002      	str	r0, [sp, #8]
 8005a0a:	9006      	str	r0, [sp, #24]
 8005a0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a12:	ab21      	add	r3, sp, #132	; 0x84
 8005a14:	a902      	add	r1, sp, #8
 8005a16:	4628      	mov	r0, r5
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	f000 f869 	bl	8005af0 <_svfiprintf_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	bfbc      	itt	lt
 8005a22:	238b      	movlt	r3, #139	; 0x8b
 8005a24:	602b      	strlt	r3, [r5, #0]
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	d0dd      	beq.n	80059e6 <sniprintf+0x16>
 8005a2a:	9b02      	ldr	r3, [sp, #8]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e7d9      	b.n	80059e6 <sniprintf+0x16>
 8005a32:	bf00      	nop
 8005a34:	2000001c 	.word	0x2000001c

08005a38 <__ssputs_r>:
 8005a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	688e      	ldr	r6, [r1, #8]
 8005a3e:	429e      	cmp	r6, r3
 8005a40:	4682      	mov	sl, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	4690      	mov	r8, r2
 8005a46:	461f      	mov	r7, r3
 8005a48:	d838      	bhi.n	8005abc <__ssputs_r+0x84>
 8005a4a:	898a      	ldrh	r2, [r1, #12]
 8005a4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a50:	d032      	beq.n	8005ab8 <__ssputs_r+0x80>
 8005a52:	6825      	ldr	r5, [r4, #0]
 8005a54:	6909      	ldr	r1, [r1, #16]
 8005a56:	eba5 0901 	sub.w	r9, r5, r1
 8005a5a:	6965      	ldr	r5, [r4, #20]
 8005a5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a64:	3301      	adds	r3, #1
 8005a66:	444b      	add	r3, r9
 8005a68:	106d      	asrs	r5, r5, #1
 8005a6a:	429d      	cmp	r5, r3
 8005a6c:	bf38      	it	cc
 8005a6e:	461d      	movcc	r5, r3
 8005a70:	0553      	lsls	r3, r2, #21
 8005a72:	d531      	bpl.n	8005ad8 <__ssputs_r+0xa0>
 8005a74:	4629      	mov	r1, r5
 8005a76:	f000 fb55 	bl	8006124 <_malloc_r>
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	b950      	cbnz	r0, 8005a94 <__ssputs_r+0x5c>
 8005a7e:	230c      	movs	r3, #12
 8005a80:	f8ca 3000 	str.w	r3, [sl]
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a8a:	81a3      	strh	r3, [r4, #12]
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a94:	6921      	ldr	r1, [r4, #16]
 8005a96:	464a      	mov	r2, r9
 8005a98:	f7ff ff84 	bl	80059a4 <memcpy>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa6:	81a3      	strh	r3, [r4, #12]
 8005aa8:	6126      	str	r6, [r4, #16]
 8005aaa:	6165      	str	r5, [r4, #20]
 8005aac:	444e      	add	r6, r9
 8005aae:	eba5 0509 	sub.w	r5, r5, r9
 8005ab2:	6026      	str	r6, [r4, #0]
 8005ab4:	60a5      	str	r5, [r4, #8]
 8005ab6:	463e      	mov	r6, r7
 8005ab8:	42be      	cmp	r6, r7
 8005aba:	d900      	bls.n	8005abe <__ssputs_r+0x86>
 8005abc:	463e      	mov	r6, r7
 8005abe:	6820      	ldr	r0, [r4, #0]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	f000 faa8 	bl	8006018 <memmove>
 8005ac8:	68a3      	ldr	r3, [r4, #8]
 8005aca:	1b9b      	subs	r3, r3, r6
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	4433      	add	r3, r6
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e7db      	b.n	8005a90 <__ssputs_r+0x58>
 8005ad8:	462a      	mov	r2, r5
 8005ada:	f000 fb97 	bl	800620c <_realloc_r>
 8005ade:	4606      	mov	r6, r0
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d1e1      	bne.n	8005aa8 <__ssputs_r+0x70>
 8005ae4:	6921      	ldr	r1, [r4, #16]
 8005ae6:	4650      	mov	r0, sl
 8005ae8:	f000 fab0 	bl	800604c <_free_r>
 8005aec:	e7c7      	b.n	8005a7e <__ssputs_r+0x46>
	...

08005af0 <_svfiprintf_r>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	4698      	mov	r8, r3
 8005af6:	898b      	ldrh	r3, [r1, #12]
 8005af8:	061b      	lsls	r3, r3, #24
 8005afa:	b09d      	sub	sp, #116	; 0x74
 8005afc:	4607      	mov	r7, r0
 8005afe:	460d      	mov	r5, r1
 8005b00:	4614      	mov	r4, r2
 8005b02:	d50e      	bpl.n	8005b22 <_svfiprintf_r+0x32>
 8005b04:	690b      	ldr	r3, [r1, #16]
 8005b06:	b963      	cbnz	r3, 8005b22 <_svfiprintf_r+0x32>
 8005b08:	2140      	movs	r1, #64	; 0x40
 8005b0a:	f000 fb0b 	bl	8006124 <_malloc_r>
 8005b0e:	6028      	str	r0, [r5, #0]
 8005b10:	6128      	str	r0, [r5, #16]
 8005b12:	b920      	cbnz	r0, 8005b1e <_svfiprintf_r+0x2e>
 8005b14:	230c      	movs	r3, #12
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	e0d1      	b.n	8005cc2 <_svfiprintf_r+0x1d2>
 8005b1e:	2340      	movs	r3, #64	; 0x40
 8005b20:	616b      	str	r3, [r5, #20]
 8005b22:	2300      	movs	r3, #0
 8005b24:	9309      	str	r3, [sp, #36]	; 0x24
 8005b26:	2320      	movs	r3, #32
 8005b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b30:	2330      	movs	r3, #48	; 0x30
 8005b32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005cdc <_svfiprintf_r+0x1ec>
 8005b36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b3a:	f04f 0901 	mov.w	r9, #1
 8005b3e:	4623      	mov	r3, r4
 8005b40:	469a      	mov	sl, r3
 8005b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b46:	b10a      	cbz	r2, 8005b4c <_svfiprintf_r+0x5c>
 8005b48:	2a25      	cmp	r2, #37	; 0x25
 8005b4a:	d1f9      	bne.n	8005b40 <_svfiprintf_r+0x50>
 8005b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b50:	d00b      	beq.n	8005b6a <_svfiprintf_r+0x7a>
 8005b52:	465b      	mov	r3, fp
 8005b54:	4622      	mov	r2, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f7ff ff6d 	bl	8005a38 <__ssputs_r>
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f000 80aa 	beq.w	8005cb8 <_svfiprintf_r+0x1c8>
 8005b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b66:	445a      	add	r2, fp
 8005b68:	9209      	str	r2, [sp, #36]	; 0x24
 8005b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80a2 	beq.w	8005cb8 <_svfiprintf_r+0x1c8>
 8005b74:	2300      	movs	r3, #0
 8005b76:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b7e:	f10a 0a01 	add.w	sl, sl, #1
 8005b82:	9304      	str	r3, [sp, #16]
 8005b84:	9307      	str	r3, [sp, #28]
 8005b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b8c:	4654      	mov	r4, sl
 8005b8e:	2205      	movs	r2, #5
 8005b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b94:	4851      	ldr	r0, [pc, #324]	; (8005cdc <_svfiprintf_r+0x1ec>)
 8005b96:	f7fa fb6b 	bl	8000270 <memchr>
 8005b9a:	9a04      	ldr	r2, [sp, #16]
 8005b9c:	b9d8      	cbnz	r0, 8005bd6 <_svfiprintf_r+0xe6>
 8005b9e:	06d0      	lsls	r0, r2, #27
 8005ba0:	bf44      	itt	mi
 8005ba2:	2320      	movmi	r3, #32
 8005ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ba8:	0711      	lsls	r1, r2, #28
 8005baa:	bf44      	itt	mi
 8005bac:	232b      	movmi	r3, #43	; 0x2b
 8005bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8005bb8:	d015      	beq.n	8005be6 <_svfiprintf_r+0xf6>
 8005bba:	9a07      	ldr	r2, [sp, #28]
 8005bbc:	4654      	mov	r4, sl
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	f04f 0c0a 	mov.w	ip, #10
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bca:	3b30      	subs	r3, #48	; 0x30
 8005bcc:	2b09      	cmp	r3, #9
 8005bce:	d94e      	bls.n	8005c6e <_svfiprintf_r+0x17e>
 8005bd0:	b1b0      	cbz	r0, 8005c00 <_svfiprintf_r+0x110>
 8005bd2:	9207      	str	r2, [sp, #28]
 8005bd4:	e014      	b.n	8005c00 <_svfiprintf_r+0x110>
 8005bd6:	eba0 0308 	sub.w	r3, r0, r8
 8005bda:	fa09 f303 	lsl.w	r3, r9, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	9304      	str	r3, [sp, #16]
 8005be2:	46a2      	mov	sl, r4
 8005be4:	e7d2      	b.n	8005b8c <_svfiprintf_r+0x9c>
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	1d19      	adds	r1, r3, #4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	9103      	str	r1, [sp, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfbb      	ittet	lt
 8005bf2:	425b      	neglt	r3, r3
 8005bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8005bf8:	9307      	strge	r3, [sp, #28]
 8005bfa:	9307      	strlt	r3, [sp, #28]
 8005bfc:	bfb8      	it	lt
 8005bfe:	9204      	strlt	r2, [sp, #16]
 8005c00:	7823      	ldrb	r3, [r4, #0]
 8005c02:	2b2e      	cmp	r3, #46	; 0x2e
 8005c04:	d10c      	bne.n	8005c20 <_svfiprintf_r+0x130>
 8005c06:	7863      	ldrb	r3, [r4, #1]
 8005c08:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0a:	d135      	bne.n	8005c78 <_svfiprintf_r+0x188>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	1d1a      	adds	r2, r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	9203      	str	r2, [sp, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bfb8      	it	lt
 8005c18:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c1c:	3402      	adds	r4, #2
 8005c1e:	9305      	str	r3, [sp, #20]
 8005c20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cec <_svfiprintf_r+0x1fc>
 8005c24:	7821      	ldrb	r1, [r4, #0]
 8005c26:	2203      	movs	r2, #3
 8005c28:	4650      	mov	r0, sl
 8005c2a:	f7fa fb21 	bl	8000270 <memchr>
 8005c2e:	b140      	cbz	r0, 8005c42 <_svfiprintf_r+0x152>
 8005c30:	2340      	movs	r3, #64	; 0x40
 8005c32:	eba0 000a 	sub.w	r0, r0, sl
 8005c36:	fa03 f000 	lsl.w	r0, r3, r0
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	4303      	orrs	r3, r0
 8005c3e:	3401      	adds	r4, #1
 8005c40:	9304      	str	r3, [sp, #16]
 8005c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c46:	4826      	ldr	r0, [pc, #152]	; (8005ce0 <_svfiprintf_r+0x1f0>)
 8005c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c4c:	2206      	movs	r2, #6
 8005c4e:	f7fa fb0f 	bl	8000270 <memchr>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d038      	beq.n	8005cc8 <_svfiprintf_r+0x1d8>
 8005c56:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <_svfiprintf_r+0x1f4>)
 8005c58:	bb1b      	cbnz	r3, 8005ca2 <_svfiprintf_r+0x1b2>
 8005c5a:	9b03      	ldr	r3, [sp, #12]
 8005c5c:	3307      	adds	r3, #7
 8005c5e:	f023 0307 	bic.w	r3, r3, #7
 8005c62:	3308      	adds	r3, #8
 8005c64:	9303      	str	r3, [sp, #12]
 8005c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c68:	4433      	add	r3, r6
 8005c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6c:	e767      	b.n	8005b3e <_svfiprintf_r+0x4e>
 8005c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c72:	460c      	mov	r4, r1
 8005c74:	2001      	movs	r0, #1
 8005c76:	e7a5      	b.n	8005bc4 <_svfiprintf_r+0xd4>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	3401      	adds	r4, #1
 8005c7c:	9305      	str	r3, [sp, #20]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	f04f 0c0a 	mov.w	ip, #10
 8005c84:	4620      	mov	r0, r4
 8005c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c8a:	3a30      	subs	r2, #48	; 0x30
 8005c8c:	2a09      	cmp	r2, #9
 8005c8e:	d903      	bls.n	8005c98 <_svfiprintf_r+0x1a8>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0c5      	beq.n	8005c20 <_svfiprintf_r+0x130>
 8005c94:	9105      	str	r1, [sp, #20]
 8005c96:	e7c3      	b.n	8005c20 <_svfiprintf_r+0x130>
 8005c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e7f0      	b.n	8005c84 <_svfiprintf_r+0x194>
 8005ca2:	ab03      	add	r3, sp, #12
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	462a      	mov	r2, r5
 8005ca8:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <_svfiprintf_r+0x1f8>)
 8005caa:	a904      	add	r1, sp, #16
 8005cac:	4638      	mov	r0, r7
 8005cae:	f3af 8000 	nop.w
 8005cb2:	1c42      	adds	r2, r0, #1
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	d1d6      	bne.n	8005c66 <_svfiprintf_r+0x176>
 8005cb8:	89ab      	ldrh	r3, [r5, #12]
 8005cba:	065b      	lsls	r3, r3, #25
 8005cbc:	f53f af2c 	bmi.w	8005b18 <_svfiprintf_r+0x28>
 8005cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cc2:	b01d      	add	sp, #116	; 0x74
 8005cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc8:	ab03      	add	r3, sp, #12
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	462a      	mov	r2, r5
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <_svfiprintf_r+0x1f8>)
 8005cd0:	a904      	add	r1, sp, #16
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f000 f87a 	bl	8005dcc <_printf_i>
 8005cd8:	e7eb      	b.n	8005cb2 <_svfiprintf_r+0x1c2>
 8005cda:	bf00      	nop
 8005cdc:	08006444 	.word	0x08006444
 8005ce0:	0800644e 	.word	0x0800644e
 8005ce4:	00000000 	.word	0x00000000
 8005ce8:	08005a39 	.word	0x08005a39
 8005cec:	0800644a 	.word	0x0800644a

08005cf0 <_printf_common>:
 8005cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	4616      	mov	r6, r2
 8005cf6:	4699      	mov	r9, r3
 8005cf8:	688a      	ldr	r2, [r1, #8]
 8005cfa:	690b      	ldr	r3, [r1, #16]
 8005cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d00:	4293      	cmp	r3, r2
 8005d02:	bfb8      	it	lt
 8005d04:	4613      	movlt	r3, r2
 8005d06:	6033      	str	r3, [r6, #0]
 8005d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	460c      	mov	r4, r1
 8005d10:	b10a      	cbz	r2, 8005d16 <_printf_common+0x26>
 8005d12:	3301      	adds	r3, #1
 8005d14:	6033      	str	r3, [r6, #0]
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	0699      	lsls	r1, r3, #26
 8005d1a:	bf42      	ittt	mi
 8005d1c:	6833      	ldrmi	r3, [r6, #0]
 8005d1e:	3302      	addmi	r3, #2
 8005d20:	6033      	strmi	r3, [r6, #0]
 8005d22:	6825      	ldr	r5, [r4, #0]
 8005d24:	f015 0506 	ands.w	r5, r5, #6
 8005d28:	d106      	bne.n	8005d38 <_printf_common+0x48>
 8005d2a:	f104 0a19 	add.w	sl, r4, #25
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	6832      	ldr	r2, [r6, #0]
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	42ab      	cmp	r3, r5
 8005d36:	dc26      	bgt.n	8005d86 <_printf_common+0x96>
 8005d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d3c:	1e13      	subs	r3, r2, #0
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	bf18      	it	ne
 8005d42:	2301      	movne	r3, #1
 8005d44:	0692      	lsls	r2, r2, #26
 8005d46:	d42b      	bmi.n	8005da0 <_printf_common+0xb0>
 8005d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	4638      	mov	r0, r7
 8005d50:	47c0      	blx	r8
 8005d52:	3001      	adds	r0, #1
 8005d54:	d01e      	beq.n	8005d94 <_printf_common+0xa4>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	68e5      	ldr	r5, [r4, #12]
 8005d5a:	6832      	ldr	r2, [r6, #0]
 8005d5c:	f003 0306 	and.w	r3, r3, #6
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	bf08      	it	eq
 8005d64:	1aad      	subeq	r5, r5, r2
 8005d66:	68a3      	ldr	r3, [r4, #8]
 8005d68:	6922      	ldr	r2, [r4, #16]
 8005d6a:	bf0c      	ite	eq
 8005d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d70:	2500      	movne	r5, #0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	bfc4      	itt	gt
 8005d76:	1a9b      	subgt	r3, r3, r2
 8005d78:	18ed      	addgt	r5, r5, r3
 8005d7a:	2600      	movs	r6, #0
 8005d7c:	341a      	adds	r4, #26
 8005d7e:	42b5      	cmp	r5, r6
 8005d80:	d11a      	bne.n	8005db8 <_printf_common+0xc8>
 8005d82:	2000      	movs	r0, #0
 8005d84:	e008      	b.n	8005d98 <_printf_common+0xa8>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4652      	mov	r2, sl
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	47c0      	blx	r8
 8005d90:	3001      	adds	r0, #1
 8005d92:	d103      	bne.n	8005d9c <_printf_common+0xac>
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	e7c6      	b.n	8005d2e <_printf_common+0x3e>
 8005da0:	18e1      	adds	r1, r4, r3
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	2030      	movs	r0, #48	; 0x30
 8005da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005daa:	4422      	add	r2, r4
 8005dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005db4:	3302      	adds	r3, #2
 8005db6:	e7c7      	b.n	8005d48 <_printf_common+0x58>
 8005db8:	2301      	movs	r3, #1
 8005dba:	4622      	mov	r2, r4
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	47c0      	blx	r8
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d0e6      	beq.n	8005d94 <_printf_common+0xa4>
 8005dc6:	3601      	adds	r6, #1
 8005dc8:	e7d9      	b.n	8005d7e <_printf_common+0x8e>
	...

08005dcc <_printf_i>:
 8005dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd0:	7e0f      	ldrb	r7, [r1, #24]
 8005dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dd4:	2f78      	cmp	r7, #120	; 0x78
 8005dd6:	4691      	mov	r9, r2
 8005dd8:	4680      	mov	r8, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	469a      	mov	sl, r3
 8005dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005de2:	d807      	bhi.n	8005df4 <_printf_i+0x28>
 8005de4:	2f62      	cmp	r7, #98	; 0x62
 8005de6:	d80a      	bhi.n	8005dfe <_printf_i+0x32>
 8005de8:	2f00      	cmp	r7, #0
 8005dea:	f000 80d8 	beq.w	8005f9e <_printf_i+0x1d2>
 8005dee:	2f58      	cmp	r7, #88	; 0x58
 8005df0:	f000 80a3 	beq.w	8005f3a <_printf_i+0x16e>
 8005df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dfc:	e03a      	b.n	8005e74 <_printf_i+0xa8>
 8005dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e02:	2b15      	cmp	r3, #21
 8005e04:	d8f6      	bhi.n	8005df4 <_printf_i+0x28>
 8005e06:	a101      	add	r1, pc, #4	; (adr r1, 8005e0c <_printf_i+0x40>)
 8005e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e0c:	08005e65 	.word	0x08005e65
 8005e10:	08005e79 	.word	0x08005e79
 8005e14:	08005df5 	.word	0x08005df5
 8005e18:	08005df5 	.word	0x08005df5
 8005e1c:	08005df5 	.word	0x08005df5
 8005e20:	08005df5 	.word	0x08005df5
 8005e24:	08005e79 	.word	0x08005e79
 8005e28:	08005df5 	.word	0x08005df5
 8005e2c:	08005df5 	.word	0x08005df5
 8005e30:	08005df5 	.word	0x08005df5
 8005e34:	08005df5 	.word	0x08005df5
 8005e38:	08005f85 	.word	0x08005f85
 8005e3c:	08005ea9 	.word	0x08005ea9
 8005e40:	08005f67 	.word	0x08005f67
 8005e44:	08005df5 	.word	0x08005df5
 8005e48:	08005df5 	.word	0x08005df5
 8005e4c:	08005fa7 	.word	0x08005fa7
 8005e50:	08005df5 	.word	0x08005df5
 8005e54:	08005ea9 	.word	0x08005ea9
 8005e58:	08005df5 	.word	0x08005df5
 8005e5c:	08005df5 	.word	0x08005df5
 8005e60:	08005f6f 	.word	0x08005f6f
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	1d1a      	adds	r2, r3, #4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	602a      	str	r2, [r5, #0]
 8005e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0a3      	b.n	8005fc0 <_printf_i+0x1f4>
 8005e78:	6820      	ldr	r0, [r4, #0]
 8005e7a:	6829      	ldr	r1, [r5, #0]
 8005e7c:	0606      	lsls	r6, r0, #24
 8005e7e:	f101 0304 	add.w	r3, r1, #4
 8005e82:	d50a      	bpl.n	8005e9a <_printf_i+0xce>
 8005e84:	680e      	ldr	r6, [r1, #0]
 8005e86:	602b      	str	r3, [r5, #0]
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	da03      	bge.n	8005e94 <_printf_i+0xc8>
 8005e8c:	232d      	movs	r3, #45	; 0x2d
 8005e8e:	4276      	negs	r6, r6
 8005e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e94:	485e      	ldr	r0, [pc, #376]	; (8006010 <_printf_i+0x244>)
 8005e96:	230a      	movs	r3, #10
 8005e98:	e019      	b.n	8005ece <_printf_i+0x102>
 8005e9a:	680e      	ldr	r6, [r1, #0]
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ea2:	bf18      	it	ne
 8005ea4:	b236      	sxthne	r6, r6
 8005ea6:	e7ef      	b.n	8005e88 <_printf_i+0xbc>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	6820      	ldr	r0, [r4, #0]
 8005eac:	1d19      	adds	r1, r3, #4
 8005eae:	6029      	str	r1, [r5, #0]
 8005eb0:	0601      	lsls	r1, r0, #24
 8005eb2:	d501      	bpl.n	8005eb8 <_printf_i+0xec>
 8005eb4:	681e      	ldr	r6, [r3, #0]
 8005eb6:	e002      	b.n	8005ebe <_printf_i+0xf2>
 8005eb8:	0646      	lsls	r6, r0, #25
 8005eba:	d5fb      	bpl.n	8005eb4 <_printf_i+0xe8>
 8005ebc:	881e      	ldrh	r6, [r3, #0]
 8005ebe:	4854      	ldr	r0, [pc, #336]	; (8006010 <_printf_i+0x244>)
 8005ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ec2:	bf0c      	ite	eq
 8005ec4:	2308      	moveq	r3, #8
 8005ec6:	230a      	movne	r3, #10
 8005ec8:	2100      	movs	r1, #0
 8005eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ece:	6865      	ldr	r5, [r4, #4]
 8005ed0:	60a5      	str	r5, [r4, #8]
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	bfa2      	ittt	ge
 8005ed6:	6821      	ldrge	r1, [r4, #0]
 8005ed8:	f021 0104 	bicge.w	r1, r1, #4
 8005edc:	6021      	strge	r1, [r4, #0]
 8005ede:	b90e      	cbnz	r6, 8005ee4 <_printf_i+0x118>
 8005ee0:	2d00      	cmp	r5, #0
 8005ee2:	d04d      	beq.n	8005f80 <_printf_i+0x1b4>
 8005ee4:	4615      	mov	r5, r2
 8005ee6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005eea:	fb03 6711 	mls	r7, r3, r1, r6
 8005eee:	5dc7      	ldrb	r7, [r0, r7]
 8005ef0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ef4:	4637      	mov	r7, r6
 8005ef6:	42bb      	cmp	r3, r7
 8005ef8:	460e      	mov	r6, r1
 8005efa:	d9f4      	bls.n	8005ee6 <_printf_i+0x11a>
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d10b      	bne.n	8005f18 <_printf_i+0x14c>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	07de      	lsls	r6, r3, #31
 8005f04:	d508      	bpl.n	8005f18 <_printf_i+0x14c>
 8005f06:	6923      	ldr	r3, [r4, #16]
 8005f08:	6861      	ldr	r1, [r4, #4]
 8005f0a:	4299      	cmp	r1, r3
 8005f0c:	bfde      	ittt	le
 8005f0e:	2330      	movle	r3, #48	; 0x30
 8005f10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f18:	1b52      	subs	r2, r2, r5
 8005f1a:	6122      	str	r2, [r4, #16]
 8005f1c:	f8cd a000 	str.w	sl, [sp]
 8005f20:	464b      	mov	r3, r9
 8005f22:	aa03      	add	r2, sp, #12
 8005f24:	4621      	mov	r1, r4
 8005f26:	4640      	mov	r0, r8
 8005f28:	f7ff fee2 	bl	8005cf0 <_printf_common>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d14c      	bne.n	8005fca <_printf_i+0x1fe>
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	b004      	add	sp, #16
 8005f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3a:	4835      	ldr	r0, [pc, #212]	; (8006010 <_printf_i+0x244>)
 8005f3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f40:	6829      	ldr	r1, [r5, #0]
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f48:	6029      	str	r1, [r5, #0]
 8005f4a:	061d      	lsls	r5, r3, #24
 8005f4c:	d514      	bpl.n	8005f78 <_printf_i+0x1ac>
 8005f4e:	07df      	lsls	r7, r3, #31
 8005f50:	bf44      	itt	mi
 8005f52:	f043 0320 	orrmi.w	r3, r3, #32
 8005f56:	6023      	strmi	r3, [r4, #0]
 8005f58:	b91e      	cbnz	r6, 8005f62 <_printf_i+0x196>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	f023 0320 	bic.w	r3, r3, #32
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	2310      	movs	r3, #16
 8005f64:	e7b0      	b.n	8005ec8 <_printf_i+0xfc>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	f043 0320 	orr.w	r3, r3, #32
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	2378      	movs	r3, #120	; 0x78
 8005f70:	4828      	ldr	r0, [pc, #160]	; (8006014 <_printf_i+0x248>)
 8005f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f76:	e7e3      	b.n	8005f40 <_printf_i+0x174>
 8005f78:	0659      	lsls	r1, r3, #25
 8005f7a:	bf48      	it	mi
 8005f7c:	b2b6      	uxthmi	r6, r6
 8005f7e:	e7e6      	b.n	8005f4e <_printf_i+0x182>
 8005f80:	4615      	mov	r5, r2
 8005f82:	e7bb      	b.n	8005efc <_printf_i+0x130>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	6826      	ldr	r6, [r4, #0]
 8005f88:	6961      	ldr	r1, [r4, #20]
 8005f8a:	1d18      	adds	r0, r3, #4
 8005f8c:	6028      	str	r0, [r5, #0]
 8005f8e:	0635      	lsls	r5, r6, #24
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	d501      	bpl.n	8005f98 <_printf_i+0x1cc>
 8005f94:	6019      	str	r1, [r3, #0]
 8005f96:	e002      	b.n	8005f9e <_printf_i+0x1d2>
 8005f98:	0670      	lsls	r0, r6, #25
 8005f9a:	d5fb      	bpl.n	8005f94 <_printf_i+0x1c8>
 8005f9c:	8019      	strh	r1, [r3, #0]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	4615      	mov	r5, r2
 8005fa4:	e7ba      	b.n	8005f1c <_printf_i+0x150>
 8005fa6:	682b      	ldr	r3, [r5, #0]
 8005fa8:	1d1a      	adds	r2, r3, #4
 8005faa:	602a      	str	r2, [r5, #0]
 8005fac:	681d      	ldr	r5, [r3, #0]
 8005fae:	6862      	ldr	r2, [r4, #4]
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f7fa f95c 	bl	8000270 <memchr>
 8005fb8:	b108      	cbz	r0, 8005fbe <_printf_i+0x1f2>
 8005fba:	1b40      	subs	r0, r0, r5
 8005fbc:	6060      	str	r0, [r4, #4]
 8005fbe:	6863      	ldr	r3, [r4, #4]
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc8:	e7a8      	b.n	8005f1c <_printf_i+0x150>
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	462a      	mov	r2, r5
 8005fce:	4649      	mov	r1, r9
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	47d0      	blx	sl
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d0ab      	beq.n	8005f30 <_printf_i+0x164>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	079b      	lsls	r3, r3, #30
 8005fdc:	d413      	bmi.n	8006006 <_printf_i+0x23a>
 8005fde:	68e0      	ldr	r0, [r4, #12]
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	4298      	cmp	r0, r3
 8005fe4:	bfb8      	it	lt
 8005fe6:	4618      	movlt	r0, r3
 8005fe8:	e7a4      	b.n	8005f34 <_printf_i+0x168>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4632      	mov	r2, r6
 8005fee:	4649      	mov	r1, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	47d0      	blx	sl
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d09b      	beq.n	8005f30 <_printf_i+0x164>
 8005ff8:	3501      	adds	r5, #1
 8005ffa:	68e3      	ldr	r3, [r4, #12]
 8005ffc:	9903      	ldr	r1, [sp, #12]
 8005ffe:	1a5b      	subs	r3, r3, r1
 8006000:	42ab      	cmp	r3, r5
 8006002:	dcf2      	bgt.n	8005fea <_printf_i+0x21e>
 8006004:	e7eb      	b.n	8005fde <_printf_i+0x212>
 8006006:	2500      	movs	r5, #0
 8006008:	f104 0619 	add.w	r6, r4, #25
 800600c:	e7f5      	b.n	8005ffa <_printf_i+0x22e>
 800600e:	bf00      	nop
 8006010:	08006455 	.word	0x08006455
 8006014:	08006466 	.word	0x08006466

08006018 <memmove>:
 8006018:	4288      	cmp	r0, r1
 800601a:	b510      	push	{r4, lr}
 800601c:	eb01 0402 	add.w	r4, r1, r2
 8006020:	d902      	bls.n	8006028 <memmove+0x10>
 8006022:	4284      	cmp	r4, r0
 8006024:	4623      	mov	r3, r4
 8006026:	d807      	bhi.n	8006038 <memmove+0x20>
 8006028:	1e43      	subs	r3, r0, #1
 800602a:	42a1      	cmp	r1, r4
 800602c:	d008      	beq.n	8006040 <memmove+0x28>
 800602e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006036:	e7f8      	b.n	800602a <memmove+0x12>
 8006038:	4402      	add	r2, r0
 800603a:	4601      	mov	r1, r0
 800603c:	428a      	cmp	r2, r1
 800603e:	d100      	bne.n	8006042 <memmove+0x2a>
 8006040:	bd10      	pop	{r4, pc}
 8006042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800604a:	e7f7      	b.n	800603c <memmove+0x24>

0800604c <_free_r>:
 800604c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800604e:	2900      	cmp	r1, #0
 8006050:	d044      	beq.n	80060dc <_free_r+0x90>
 8006052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006056:	9001      	str	r0, [sp, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f1a1 0404 	sub.w	r4, r1, #4
 800605e:	bfb8      	it	lt
 8006060:	18e4      	addlt	r4, r4, r3
 8006062:	f000 f913 	bl	800628c <__malloc_lock>
 8006066:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <_free_r+0x94>)
 8006068:	9801      	ldr	r0, [sp, #4]
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	b933      	cbnz	r3, 800607c <_free_r+0x30>
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	6014      	str	r4, [r2, #0]
 8006072:	b003      	add	sp, #12
 8006074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006078:	f000 b90e 	b.w	8006298 <__malloc_unlock>
 800607c:	42a3      	cmp	r3, r4
 800607e:	d908      	bls.n	8006092 <_free_r+0x46>
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	1961      	adds	r1, r4, r5
 8006084:	428b      	cmp	r3, r1
 8006086:	bf01      	itttt	eq
 8006088:	6819      	ldreq	r1, [r3, #0]
 800608a:	685b      	ldreq	r3, [r3, #4]
 800608c:	1949      	addeq	r1, r1, r5
 800608e:	6021      	streq	r1, [r4, #0]
 8006090:	e7ed      	b.n	800606e <_free_r+0x22>
 8006092:	461a      	mov	r2, r3
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	b10b      	cbz	r3, 800609c <_free_r+0x50>
 8006098:	42a3      	cmp	r3, r4
 800609a:	d9fa      	bls.n	8006092 <_free_r+0x46>
 800609c:	6811      	ldr	r1, [r2, #0]
 800609e:	1855      	adds	r5, r2, r1
 80060a0:	42a5      	cmp	r5, r4
 80060a2:	d10b      	bne.n	80060bc <_free_r+0x70>
 80060a4:	6824      	ldr	r4, [r4, #0]
 80060a6:	4421      	add	r1, r4
 80060a8:	1854      	adds	r4, r2, r1
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	d1e0      	bne.n	8006072 <_free_r+0x26>
 80060b0:	681c      	ldr	r4, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	6053      	str	r3, [r2, #4]
 80060b6:	4421      	add	r1, r4
 80060b8:	6011      	str	r1, [r2, #0]
 80060ba:	e7da      	b.n	8006072 <_free_r+0x26>
 80060bc:	d902      	bls.n	80060c4 <_free_r+0x78>
 80060be:	230c      	movs	r3, #12
 80060c0:	6003      	str	r3, [r0, #0]
 80060c2:	e7d6      	b.n	8006072 <_free_r+0x26>
 80060c4:	6825      	ldr	r5, [r4, #0]
 80060c6:	1961      	adds	r1, r4, r5
 80060c8:	428b      	cmp	r3, r1
 80060ca:	bf04      	itt	eq
 80060cc:	6819      	ldreq	r1, [r3, #0]
 80060ce:	685b      	ldreq	r3, [r3, #4]
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	bf04      	itt	eq
 80060d4:	1949      	addeq	r1, r1, r5
 80060d6:	6021      	streq	r1, [r4, #0]
 80060d8:	6054      	str	r4, [r2, #4]
 80060da:	e7ca      	b.n	8006072 <_free_r+0x26>
 80060dc:	b003      	add	sp, #12
 80060de:	bd30      	pop	{r4, r5, pc}
 80060e0:	2001448c 	.word	0x2001448c

080060e4 <sbrk_aligned>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4e0e      	ldr	r6, [pc, #56]	; (8006120 <sbrk_aligned+0x3c>)
 80060e8:	460c      	mov	r4, r1
 80060ea:	6831      	ldr	r1, [r6, #0]
 80060ec:	4605      	mov	r5, r0
 80060ee:	b911      	cbnz	r1, 80060f6 <sbrk_aligned+0x12>
 80060f0:	f000 f8bc 	bl	800626c <_sbrk_r>
 80060f4:	6030      	str	r0, [r6, #0]
 80060f6:	4621      	mov	r1, r4
 80060f8:	4628      	mov	r0, r5
 80060fa:	f000 f8b7 	bl	800626c <_sbrk_r>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	d00a      	beq.n	8006118 <sbrk_aligned+0x34>
 8006102:	1cc4      	adds	r4, r0, #3
 8006104:	f024 0403 	bic.w	r4, r4, #3
 8006108:	42a0      	cmp	r0, r4
 800610a:	d007      	beq.n	800611c <sbrk_aligned+0x38>
 800610c:	1a21      	subs	r1, r4, r0
 800610e:	4628      	mov	r0, r5
 8006110:	f000 f8ac 	bl	800626c <_sbrk_r>
 8006114:	3001      	adds	r0, #1
 8006116:	d101      	bne.n	800611c <sbrk_aligned+0x38>
 8006118:	f04f 34ff 	mov.w	r4, #4294967295
 800611c:	4620      	mov	r0, r4
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	20014490 	.word	0x20014490

08006124 <_malloc_r>:
 8006124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006128:	1ccd      	adds	r5, r1, #3
 800612a:	f025 0503 	bic.w	r5, r5, #3
 800612e:	3508      	adds	r5, #8
 8006130:	2d0c      	cmp	r5, #12
 8006132:	bf38      	it	cc
 8006134:	250c      	movcc	r5, #12
 8006136:	2d00      	cmp	r5, #0
 8006138:	4607      	mov	r7, r0
 800613a:	db01      	blt.n	8006140 <_malloc_r+0x1c>
 800613c:	42a9      	cmp	r1, r5
 800613e:	d905      	bls.n	800614c <_malloc_r+0x28>
 8006140:	230c      	movs	r3, #12
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	2600      	movs	r6, #0
 8006146:	4630      	mov	r0, r6
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	4e2e      	ldr	r6, [pc, #184]	; (8006208 <_malloc_r+0xe4>)
 800614e:	f000 f89d 	bl	800628c <__malloc_lock>
 8006152:	6833      	ldr	r3, [r6, #0]
 8006154:	461c      	mov	r4, r3
 8006156:	bb34      	cbnz	r4, 80061a6 <_malloc_r+0x82>
 8006158:	4629      	mov	r1, r5
 800615a:	4638      	mov	r0, r7
 800615c:	f7ff ffc2 	bl	80060e4 <sbrk_aligned>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	4604      	mov	r4, r0
 8006164:	d14d      	bne.n	8006202 <_malloc_r+0xde>
 8006166:	6834      	ldr	r4, [r6, #0]
 8006168:	4626      	mov	r6, r4
 800616a:	2e00      	cmp	r6, #0
 800616c:	d140      	bne.n	80061f0 <_malloc_r+0xcc>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	4631      	mov	r1, r6
 8006172:	4638      	mov	r0, r7
 8006174:	eb04 0803 	add.w	r8, r4, r3
 8006178:	f000 f878 	bl	800626c <_sbrk_r>
 800617c:	4580      	cmp	r8, r0
 800617e:	d13a      	bne.n	80061f6 <_malloc_r+0xd2>
 8006180:	6821      	ldr	r1, [r4, #0]
 8006182:	3503      	adds	r5, #3
 8006184:	1a6d      	subs	r5, r5, r1
 8006186:	f025 0503 	bic.w	r5, r5, #3
 800618a:	3508      	adds	r5, #8
 800618c:	2d0c      	cmp	r5, #12
 800618e:	bf38      	it	cc
 8006190:	250c      	movcc	r5, #12
 8006192:	4629      	mov	r1, r5
 8006194:	4638      	mov	r0, r7
 8006196:	f7ff ffa5 	bl	80060e4 <sbrk_aligned>
 800619a:	3001      	adds	r0, #1
 800619c:	d02b      	beq.n	80061f6 <_malloc_r+0xd2>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	442b      	add	r3, r5
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	e00e      	b.n	80061c4 <_malloc_r+0xa0>
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	1b52      	subs	r2, r2, r5
 80061aa:	d41e      	bmi.n	80061ea <_malloc_r+0xc6>
 80061ac:	2a0b      	cmp	r2, #11
 80061ae:	d916      	bls.n	80061de <_malloc_r+0xba>
 80061b0:	1961      	adds	r1, r4, r5
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	6025      	str	r5, [r4, #0]
 80061b6:	bf18      	it	ne
 80061b8:	6059      	strne	r1, [r3, #4]
 80061ba:	6863      	ldr	r3, [r4, #4]
 80061bc:	bf08      	it	eq
 80061be:	6031      	streq	r1, [r6, #0]
 80061c0:	5162      	str	r2, [r4, r5]
 80061c2:	604b      	str	r3, [r1, #4]
 80061c4:	4638      	mov	r0, r7
 80061c6:	f104 060b 	add.w	r6, r4, #11
 80061ca:	f000 f865 	bl	8006298 <__malloc_unlock>
 80061ce:	f026 0607 	bic.w	r6, r6, #7
 80061d2:	1d23      	adds	r3, r4, #4
 80061d4:	1af2      	subs	r2, r6, r3
 80061d6:	d0b6      	beq.n	8006146 <_malloc_r+0x22>
 80061d8:	1b9b      	subs	r3, r3, r6
 80061da:	50a3      	str	r3, [r4, r2]
 80061dc:	e7b3      	b.n	8006146 <_malloc_r+0x22>
 80061de:	6862      	ldr	r2, [r4, #4]
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	bf0c      	ite	eq
 80061e4:	6032      	streq	r2, [r6, #0]
 80061e6:	605a      	strne	r2, [r3, #4]
 80061e8:	e7ec      	b.n	80061c4 <_malloc_r+0xa0>
 80061ea:	4623      	mov	r3, r4
 80061ec:	6864      	ldr	r4, [r4, #4]
 80061ee:	e7b2      	b.n	8006156 <_malloc_r+0x32>
 80061f0:	4634      	mov	r4, r6
 80061f2:	6876      	ldr	r6, [r6, #4]
 80061f4:	e7b9      	b.n	800616a <_malloc_r+0x46>
 80061f6:	230c      	movs	r3, #12
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	4638      	mov	r0, r7
 80061fc:	f000 f84c 	bl	8006298 <__malloc_unlock>
 8006200:	e7a1      	b.n	8006146 <_malloc_r+0x22>
 8006202:	6025      	str	r5, [r4, #0]
 8006204:	e7de      	b.n	80061c4 <_malloc_r+0xa0>
 8006206:	bf00      	nop
 8006208:	2001448c 	.word	0x2001448c

0800620c <_realloc_r>:
 800620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006210:	4680      	mov	r8, r0
 8006212:	4614      	mov	r4, r2
 8006214:	460e      	mov	r6, r1
 8006216:	b921      	cbnz	r1, 8006222 <_realloc_r+0x16>
 8006218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800621c:	4611      	mov	r1, r2
 800621e:	f7ff bf81 	b.w	8006124 <_malloc_r>
 8006222:	b92a      	cbnz	r2, 8006230 <_realloc_r+0x24>
 8006224:	f7ff ff12 	bl	800604c <_free_r>
 8006228:	4625      	mov	r5, r4
 800622a:	4628      	mov	r0, r5
 800622c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006230:	f000 f838 	bl	80062a4 <_malloc_usable_size_r>
 8006234:	4284      	cmp	r4, r0
 8006236:	4607      	mov	r7, r0
 8006238:	d802      	bhi.n	8006240 <_realloc_r+0x34>
 800623a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800623e:	d812      	bhi.n	8006266 <_realloc_r+0x5a>
 8006240:	4621      	mov	r1, r4
 8006242:	4640      	mov	r0, r8
 8006244:	f7ff ff6e 	bl	8006124 <_malloc_r>
 8006248:	4605      	mov	r5, r0
 800624a:	2800      	cmp	r0, #0
 800624c:	d0ed      	beq.n	800622a <_realloc_r+0x1e>
 800624e:	42bc      	cmp	r4, r7
 8006250:	4622      	mov	r2, r4
 8006252:	4631      	mov	r1, r6
 8006254:	bf28      	it	cs
 8006256:	463a      	movcs	r2, r7
 8006258:	f7ff fba4 	bl	80059a4 <memcpy>
 800625c:	4631      	mov	r1, r6
 800625e:	4640      	mov	r0, r8
 8006260:	f7ff fef4 	bl	800604c <_free_r>
 8006264:	e7e1      	b.n	800622a <_realloc_r+0x1e>
 8006266:	4635      	mov	r5, r6
 8006268:	e7df      	b.n	800622a <_realloc_r+0x1e>
	...

0800626c <_sbrk_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d06      	ldr	r5, [pc, #24]	; (8006288 <_sbrk_r+0x1c>)
 8006270:	2300      	movs	r3, #0
 8006272:	4604      	mov	r4, r0
 8006274:	4608      	mov	r0, r1
 8006276:	602b      	str	r3, [r5, #0]
 8006278:	f000 f81e 	bl	80062b8 <_sbrk>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_sbrk_r+0x1a>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_sbrk_r+0x1a>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	20014494 	.word	0x20014494

0800628c <__malloc_lock>:
 800628c:	4801      	ldr	r0, [pc, #4]	; (8006294 <__malloc_lock+0x8>)
 800628e:	f000 b811 	b.w	80062b4 <__retarget_lock_acquire_recursive>
 8006292:	bf00      	nop
 8006294:	20014498 	.word	0x20014498

08006298 <__malloc_unlock>:
 8006298:	4801      	ldr	r0, [pc, #4]	; (80062a0 <__malloc_unlock+0x8>)
 800629a:	f000 b80c 	b.w	80062b6 <__retarget_lock_release_recursive>
 800629e:	bf00      	nop
 80062a0:	20014498 	.word	0x20014498

080062a4 <_malloc_usable_size_r>:
 80062a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a8:	1f18      	subs	r0, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bfbc      	itt	lt
 80062ae:	580b      	ldrlt	r3, [r1, r0]
 80062b0:	18c0      	addlt	r0, r0, r3
 80062b2:	4770      	bx	lr

080062b4 <__retarget_lock_acquire_recursive>:
 80062b4:	4770      	bx	lr

080062b6 <__retarget_lock_release_recursive>:
 80062b6:	4770      	bx	lr

080062b8 <_sbrk>:
 80062b8:	4a04      	ldr	r2, [pc, #16]	; (80062cc <_sbrk+0x14>)
 80062ba:	6811      	ldr	r1, [r2, #0]
 80062bc:	4603      	mov	r3, r0
 80062be:	b909      	cbnz	r1, 80062c4 <_sbrk+0xc>
 80062c0:	4903      	ldr	r1, [pc, #12]	; (80062d0 <_sbrk+0x18>)
 80062c2:	6011      	str	r1, [r2, #0]
 80062c4:	6810      	ldr	r0, [r2, #0]
 80062c6:	4403      	add	r3, r0
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	4770      	bx	lr
 80062cc:	2001449c 	.word	0x2001449c
 80062d0:	200144a0 	.word	0x200144a0

080062d4 <_init>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	bf00      	nop
 80062d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062da:	bc08      	pop	{r3}
 80062dc:	469e      	mov	lr, r3
 80062de:	4770      	bx	lr

080062e0 <_fini>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	bf00      	nop
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr

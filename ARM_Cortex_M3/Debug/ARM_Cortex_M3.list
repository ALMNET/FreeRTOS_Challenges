
ARM_Cortex_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005748  08005748  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005748  08005748  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005748  08005748  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000151c  2000007c  080057cc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001598  080057cc  00021598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001275d  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002deb  00000000  00000000  00032802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  000355f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  000368e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8dc  00000000  00000000  00037ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001540d  00000000  00000000  000523ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000962f4  00000000  00000000  000677b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdaad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005594  00000000  00000000  000fdb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ea8 	.word	0x08004ea8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08004ea8 	.word	0x08004ea8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000098 	.word	0x20000098
 800017c:	2000014c 	.word	0x2000014c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b090      	sub	sp, #64	; 0x40
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fedb 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f8bd 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f94f 	bl	8000430 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f923 	bl	80003dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000196:	f000 f8f3 	bl	8000380 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	SSD1306_Init();
 800019a:	f000 f9fb 	bl	8000594 <SSD1306_Init>
//	SSD1306_GotoXY (0, 20);
//	SSD1306_Puts ("YO XD", &Font_11x18, SSD1306_COLOR_WHITE);



	SSD1306_GotoXY (0,0);
 800019e:	2100      	movs	r1, #0
 80001a0:	2000      	movs	r0, #0
 80001a2:	f000 fb5f 	bl	8000864 <SSD1306_GotoXY>
	SSD1306_Puts ("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 80001a6:	2201      	movs	r2, #1
 80001a8:	4947      	ldr	r1, [pc, #284]	; (80002c8 <main+0x148>)
 80001aa:	4848      	ldr	r0, [pc, #288]	; (80002cc <main+0x14c>)
 80001ac:	f000 fbf0 	bl	8000990 <SSD1306_Puts>
	SSD1306_GotoXY (0, 20);
 80001b0:	2114      	movs	r1, #20
 80001b2:	2000      	movs	r0, #0
 80001b4:	f000 fb56 	bl	8000864 <SSD1306_GotoXY>
	SSD1306_Puts ("(1) CONGRESO", &Font_7x10, SSD1306_COLOR_WHITE);
 80001b8:	2201      	movs	r2, #1
 80001ba:	4943      	ldr	r1, [pc, #268]	; (80002c8 <main+0x148>)
 80001bc:	4844      	ldr	r0, [pc, #272]	; (80002d0 <main+0x150>)
 80001be:	f000 fbe7 	bl	8000990 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);
 80001c2:	2128      	movs	r1, #40	; 0x28
 80001c4:	2000      	movs	r0, #0
 80001c6:	f000 fb4d 	bl	8000864 <SSD1306_GotoXY>
	SSD1306_Puts ("(2) HARTONG", &Font_7x10, SSD1306_COLOR_WHITE);
 80001ca:	2201      	movs	r2, #1
 80001cc:	493e      	ldr	r1, [pc, #248]	; (80002c8 <main+0x148>)
 80001ce:	4841      	ldr	r0, [pc, #260]	; (80002d4 <main+0x154>)
 80001d0:	f000 fbde 	bl	8000990 <SSD1306_Puts>
	SSD1306_GotoXY (0, 60);
 80001d4:	213c      	movs	r1, #60	; 0x3c
 80001d6:	2000      	movs	r0, #0
 80001d8:	f000 fb44 	bl	8000864 <SSD1306_GotoXY>
	SSD1306_Puts ("(1) CONGRESO", &Font_7x10, SSD1306_COLOR_WHITE);
 80001dc:	2201      	movs	r2, #1
 80001de:	493a      	ldr	r1, [pc, #232]	; (80002c8 <main+0x148>)
 80001e0:	483b      	ldr	r0, [pc, #236]	; (80002d0 <main+0x150>)
 80001e2:	f000 fbd5 	bl	8000990 <SSD1306_Puts>
//		printf("\nValue of x = %u", x);
//		SSD1306_UpdateScreen();
//		HAL_Delay (200);
//	}

	SSD1306_UpdateScreen();
 80001e6:	f000 fa99 	bl	800071c <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ee:	f000 fed9 	bl	8000fa4 <HAL_Delay>
  /* definition and creation of Task1 */
//  osThreadDef(Task1, task1_handler, osPriorityIdle, 0, 128);
//  Task1Handle = osThreadCreate(osThread(Task1), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
    taskCreationStatus = xTaskCreate(task1_UART, "Task-1", 100, "Hello World task 1", 2, &task1_UART_hndl);
 80001f2:	f107 0320 	add.w	r3, r7, #32
 80001f6:	9301      	str	r3, [sp, #4]
 80001f8:	2302      	movs	r3, #2
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	4b36      	ldr	r3, [pc, #216]	; (80002d8 <main+0x158>)
 80001fe:	2264      	movs	r2, #100	; 0x64
 8000200:	4936      	ldr	r1, [pc, #216]	; (80002dc <main+0x15c>)
 8000202:	4837      	ldr	r0, [pc, #220]	; (80002e0 <main+0x160>)
 8000204:	f003 f83d 	bl	8003282 <xTaskCreate>
 8000208:	6378      	str	r0, [r7, #52]	; 0x34

    configASSERT(taskCreationStatus == pdPASS);
 800020a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800020c:	2b01      	cmp	r3, #1
 800020e:	d00a      	beq.n	8000226 <main+0xa6>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000214:	f383 8811 	msr	BASEPRI, r3
 8000218:	f3bf 8f6f 	isb	sy
 800021c:	f3bf 8f4f 	dsb	sy
 8000220:	633b      	str	r3, [r7, #48]	; 0x30
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000222:	bf00      	nop
 8000224:	e7fe      	b.n	8000224 <main+0xa4>

    taskCreationStatus = xTaskCreate(task2_UART, "Task-2", 100, "Hello World task 2", 2, &task2_UART_hndl);
 8000226:	f107 031c 	add.w	r3, r7, #28
 800022a:	9301      	str	r3, [sp, #4]
 800022c:	2302      	movs	r3, #2
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	4b2c      	ldr	r3, [pc, #176]	; (80002e4 <main+0x164>)
 8000232:	2264      	movs	r2, #100	; 0x64
 8000234:	492c      	ldr	r1, [pc, #176]	; (80002e8 <main+0x168>)
 8000236:	482d      	ldr	r0, [pc, #180]	; (80002ec <main+0x16c>)
 8000238:	f003 f823 	bl	8003282 <xTaskCreate>
 800023c:	6378      	str	r0, [r7, #52]	; 0x34

    configASSERT(taskCreationStatus == pdPASS);
 800023e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000240:	2b01      	cmp	r3, #1
 8000242:	d00a      	beq.n	800025a <main+0xda>
	__asm volatile
 8000244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000248:	f383 8811 	msr	BASEPRI, r3
 800024c:	f3bf 8f6f 	isb	sy
 8000250:	f3bf 8f4f 	dsb	sy
 8000254:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 8000256:	bf00      	nop
 8000258:	e7fe      	b.n	8000258 <main+0xd8>

    taskCreationStatus = xTaskCreate(task_LED, "Task-LED", 50, "LED Task", 3, &task_LED_XD);
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	2303      	movs	r3, #3
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <main+0x170>)
 8000266:	2232      	movs	r2, #50	; 0x32
 8000268:	4922      	ldr	r1, [pc, #136]	; (80002f4 <main+0x174>)
 800026a:	4823      	ldr	r0, [pc, #140]	; (80002f8 <main+0x178>)
 800026c:	f003 f809 	bl	8003282 <xTaskCreate>
 8000270:	6378      	str	r0, [r7, #52]	; 0x34

    configASSERT(taskCreationStatus == pdPASS);
 8000272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000274:	2b01      	cmp	r3, #1
 8000276:	d00a      	beq.n	800028e <main+0x10e>
	__asm volatile
 8000278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800027c:	f383 8811 	msr	BASEPRI, r3
 8000280:	f3bf 8f6f 	isb	sy
 8000284:	f3bf 8f4f 	dsb	sy
 8000288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800028a:	bf00      	nop
 800028c:	e7fe      	b.n	800028c <main+0x10c>

    taskCreationStatus = xTaskCreate(task_OLED, "OLED", 200, "OLED Task", 3, &task_OLED_XD);
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	2303      	movs	r3, #3
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	4b18      	ldr	r3, [pc, #96]	; (80002fc <main+0x17c>)
 800029a:	22c8      	movs	r2, #200	; 0xc8
 800029c:	4918      	ldr	r1, [pc, #96]	; (8000300 <main+0x180>)
 800029e:	4819      	ldr	r0, [pc, #100]	; (8000304 <main+0x184>)
 80002a0:	f002 ffef 	bl	8003282 <xTaskCreate>
 80002a4:	6378      	str	r0, [r7, #52]	; 0x34

    configASSERT(taskCreationStatus == pdPASS);
 80002a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d00a      	beq.n	80002c2 <main+0x142>
	__asm volatile
 80002ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002b0:	f383 8811 	msr	BASEPRI, r3
 80002b4:	f3bf 8f6f 	isb	sy
 80002b8:	f3bf 8f4f 	dsb	sy
 80002bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80002be:	bf00      	nop
 80002c0:	e7fe      	b.n	80002c0 <main+0x140>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80002c2:	f003 f957 	bl	8003574 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <main+0x146>
 80002c8:	20000000 	.word	0x20000000
 80002cc:	08004ec0 	.word	0x08004ec0
 80002d0:	08004ec8 	.word	0x08004ec8
 80002d4:	08004ed8 	.word	0x08004ed8
 80002d8:	08004ee4 	.word	0x08004ee4
 80002dc:	08004ef8 	.word	0x08004ef8
 80002e0:	080004c9 	.word	0x080004c9
 80002e4:	08004f00 	.word	0x08004f00
 80002e8:	08004f14 	.word	0x08004f14
 80002ec:	080004df 	.word	0x080004df
 80002f0:	08004f1c 	.word	0x08004f1c
 80002f4:	08004f28 	.word	0x08004f28
 80002f8:	080004f5 	.word	0x080004f5
 80002fc:	08004f34 	.word	0x08004f34
 8000300:	08004f40 	.word	0x08004f40
 8000304:	0800052d 	.word	0x0800052d

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b090      	sub	sp, #64	; 0x40
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f004 f955 	bl	80045c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032a:	2302      	movs	r3, #2
 800032c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000332:	2310      	movs	r3, #16
 8000334:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000336:	2300      	movs	r3, #0
 8000338:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fe48 	bl	8001fd4 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800034a:	f000 f91d 	bl	8000588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f002 f8b6 	bl	80024d8 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000372:	f000 f909 	bl	8000588 <Error_Handler>
  }
}
 8000376:	bf00      	nop
 8000378:	3740      	adds	r7, #64	; 0x40
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MX_I2C1_Init+0x50>)
 8000386:	4a13      	ldr	r2, [pc, #76]	; (80003d4 <MX_I2C1_Init+0x54>)
 8000388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_I2C1_Init+0x50>)
 800038c:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <MX_I2C1_Init+0x58>)
 800038e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_I2C1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_I2C1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_I2C1_Init+0x50>)
 800039e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003be:	f001 f891 	bl	80014e4 <HAL_I2C_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003c8:	f000 f8de 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	2000034c 	.word	0x2000034c
 80003d4:	40005400 	.word	0x40005400
 80003d8:	00061a80 	.word	0x00061a80

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	; (800042c <MX_USART2_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000414:	f002 fc72 	bl	8002cfc <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f8b3 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200003a0 	.word	0x200003a0
 800042c:	40004400 	.word	0x40004400

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <MX_GPIO_Init+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <MX_GPIO_Init+0x90>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <MX_GPIO_Init+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <MX_GPIO_Init+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a17      	ldr	r2, [pc, #92]	; (80004c0 <MX_GPIO_Init+0x90>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_GPIO_Init+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_GPIO_Init+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <MX_GPIO_Init+0x90>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_GPIO_Init+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	480c      	ldr	r0, [pc, #48]	; (80004c4 <MX_GPIO_Init+0x94>)
 8000494:	f001 f80e 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_GPIO_Init+0x94>)
 80004b2:	f000 fe7b 	bl	80011ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b6:	bf00      	nop
 80004b8:	3720      	adds	r7, #32
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40011000 	.word	0x40011000

080004c8 <task1_UART>:

/* USER CODE BEGIN 4 */

static void task1_UART(void * parameters)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f004 f983 	bl	80047dc <puts>
		vTaskDelay(100);
 80004d6:	2064      	movs	r0, #100	; 0x64
 80004d8:	f003 f818 	bl	800350c <vTaskDelay>
		printf("%s\n", (char*)parameters);
 80004dc:	e7f8      	b.n	80004d0 <task1_UART+0x8>

080004de <task2_UART>:
	}
}


static void task2_UART(void * parameters)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b082      	sub	sp, #8
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f004 f978 	bl	80047dc <puts>
		vTaskDelay(100);
 80004ec:	2064      	movs	r0, #100	; 0x64
 80004ee:	f003 f80d 	bl	800350c <vTaskDelay>
		printf("%s\n", (char*)parameters);
 80004f2:	e7f8      	b.n	80004e6 <task2_UART+0x8>

080004f4 <task_LED>:
	}

}

static void task_LED(void * parameters)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4809      	ldr	r0, [pc, #36]	; (8000528 <task_LED+0x34>)
 8000504:	f000 ffd6 	bl	80014b4 <HAL_GPIO_WritePin>
		vTaskDelay(500);
 8000508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050c:	f002 fffe 	bl	800350c <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <task_LED+0x34>)
 8000518:	f000 ffcc 	bl	80014b4 <HAL_GPIO_WritePin>
		vTaskDelay(500);
 800051c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000520:	f002 fff4 	bl	800350c <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000524:	e7ea      	b.n	80004fc <task_LED+0x8>
 8000526:	bf00      	nop
 8000528:	40011000 	.word	0x40011000

0800052c <task_OLED>:
	}

}

static void task_OLED(void * parameters)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

//	vTaskSuspend(task_OLED);
	while(1)
	{
		vTaskDelay(1000);
 8000534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000538:	f002 ffe8 	bl	800350c <vTaskDelay>
 800053c:	e7fa      	b.n	8000534 <task_OLED+0x8>
	...

08000540 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000548:	1d39      	adds	r1, r7, #4
 800054a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054e:	2201      	movs	r2, #1
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <__io_putchar+0x20>)
 8000552:	f002 fc20 	bl	8002d96 <HAL_UART_Transmit>

  return ch;
 8000556:	687b      	ldr	r3, [r7, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200003a0 	.word	0x200003a0

08000564 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d101      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000576:	f000 fcf9 	bl	8000f6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40000800 	.word	0x40000800

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	e7fe      	b.n	8000590 <Error_Handler+0x8>
	...

08000594 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800059a:	f000 fa1f 	bl	80009dc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800059e:	f644 6320 	movw	r3, #20000	; 0x4e20
 80005a2:	2201      	movs	r2, #1
 80005a4:	2178      	movs	r1, #120	; 0x78
 80005a6:	485b      	ldr	r0, [pc, #364]	; (8000714 <SSD1306_Init+0x180>)
 80005a8:	f001 f9de 	bl	8001968 <HAL_I2C_IsDeviceReady>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e0a9      	b.n	800070a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005b6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80005ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005bc:	e002      	b.n	80005c4 <SSD1306_Init+0x30>
		p--;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f9      	bne.n	80005be <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80005ca:	22ae      	movs	r2, #174	; 0xae
 80005cc:	2100      	movs	r1, #0
 80005ce:	2078      	movs	r0, #120	; 0x78
 80005d0:	f000 fa7e 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80005d4:	2220      	movs	r2, #32
 80005d6:	2100      	movs	r1, #0
 80005d8:	2078      	movs	r0, #120	; 0x78
 80005da:	f000 fa79 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005de:	2210      	movs	r2, #16
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	; 0x78
 80005e4:	f000 fa74 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005e8:	22b0      	movs	r2, #176	; 0xb0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2078      	movs	r0, #120	; 0x78
 80005ee:	f000 fa6f 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80005f2:	22c8      	movs	r2, #200	; 0xc8
 80005f4:	2100      	movs	r1, #0
 80005f6:	2078      	movs	r0, #120	; 0x78
 80005f8:	f000 fa6a 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2078      	movs	r0, #120	; 0x78
 8000602:	f000 fa65 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000606:	2210      	movs	r2, #16
 8000608:	2100      	movs	r1, #0
 800060a:	2078      	movs	r0, #120	; 0x78
 800060c:	f000 fa60 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000610:	2240      	movs	r2, #64	; 0x40
 8000612:	2100      	movs	r1, #0
 8000614:	2078      	movs	r0, #120	; 0x78
 8000616:	f000 fa5b 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800061a:	2281      	movs	r2, #129	; 0x81
 800061c:	2100      	movs	r1, #0
 800061e:	2078      	movs	r0, #120	; 0x78
 8000620:	f000 fa56 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000624:	22ff      	movs	r2, #255	; 0xff
 8000626:	2100      	movs	r1, #0
 8000628:	2078      	movs	r0, #120	; 0x78
 800062a:	f000 fa51 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800062e:	22a1      	movs	r2, #161	; 0xa1
 8000630:	2100      	movs	r1, #0
 8000632:	2078      	movs	r0, #120	; 0x78
 8000634:	f000 fa4c 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000638:	22a6      	movs	r2, #166	; 0xa6
 800063a:	2100      	movs	r1, #0
 800063c:	2078      	movs	r0, #120	; 0x78
 800063e:	f000 fa47 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000642:	22a8      	movs	r2, #168	; 0xa8
 8000644:	2100      	movs	r1, #0
 8000646:	2078      	movs	r0, #120	; 0x78
 8000648:	f000 fa42 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800064c:	223f      	movs	r2, #63	; 0x3f
 800064e:	2100      	movs	r1, #0
 8000650:	2078      	movs	r0, #120	; 0x78
 8000652:	f000 fa3d 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000656:	22a4      	movs	r2, #164	; 0xa4
 8000658:	2100      	movs	r1, #0
 800065a:	2078      	movs	r0, #120	; 0x78
 800065c:	f000 fa38 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000660:	22d3      	movs	r2, #211	; 0xd3
 8000662:	2100      	movs	r1, #0
 8000664:	2078      	movs	r0, #120	; 0x78
 8000666:	f000 fa33 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2078      	movs	r0, #120	; 0x78
 8000670:	f000 fa2e 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000674:	22d5      	movs	r2, #213	; 0xd5
 8000676:	2100      	movs	r1, #0
 8000678:	2078      	movs	r0, #120	; 0x78
 800067a:	f000 fa29 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800067e:	22f0      	movs	r2, #240	; 0xf0
 8000680:	2100      	movs	r1, #0
 8000682:	2078      	movs	r0, #120	; 0x78
 8000684:	f000 fa24 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000688:	22d9      	movs	r2, #217	; 0xd9
 800068a:	2100      	movs	r1, #0
 800068c:	2078      	movs	r0, #120	; 0x78
 800068e:	f000 fa1f 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000692:	2222      	movs	r2, #34	; 0x22
 8000694:	2100      	movs	r1, #0
 8000696:	2078      	movs	r0, #120	; 0x78
 8000698:	f000 fa1a 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800069c:	22da      	movs	r2, #218	; 0xda
 800069e:	2100      	movs	r1, #0
 80006a0:	2078      	movs	r0, #120	; 0x78
 80006a2:	f000 fa15 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80006a6:	2212      	movs	r2, #18
 80006a8:	2100      	movs	r1, #0
 80006aa:	2078      	movs	r0, #120	; 0x78
 80006ac:	f000 fa10 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80006b0:	22db      	movs	r2, #219	; 0xdb
 80006b2:	2100      	movs	r1, #0
 80006b4:	2078      	movs	r0, #120	; 0x78
 80006b6:	f000 fa0b 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80006ba:	2220      	movs	r2, #32
 80006bc:	2100      	movs	r1, #0
 80006be:	2078      	movs	r0, #120	; 0x78
 80006c0:	f000 fa06 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80006c4:	228d      	movs	r2, #141	; 0x8d
 80006c6:	2100      	movs	r1, #0
 80006c8:	2078      	movs	r0, #120	; 0x78
 80006ca:	f000 fa01 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80006ce:	2214      	movs	r2, #20
 80006d0:	2100      	movs	r1, #0
 80006d2:	2078      	movs	r0, #120	; 0x78
 80006d4:	f000 f9fc 	bl	8000ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80006d8:	22af      	movs	r2, #175	; 0xaf
 80006da:	2100      	movs	r1, #0
 80006dc:	2078      	movs	r0, #120	; 0x78
 80006de:	f000 f9f7 	bl	8000ad0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80006e2:	222e      	movs	r2, #46	; 0x2e
 80006e4:	2100      	movs	r1, #0
 80006e6:	2078      	movs	r0, #120	; 0x78
 80006e8:	f000 f9f2 	bl	8000ad0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 f843 	bl	8000778 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80006f2:	f000 f813 	bl	800071c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <SSD1306_Init+0x184>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <SSD1306_Init+0x184>)
 80006fe:	2200      	movs	r2, #0
 8000700:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <SSD1306_Init+0x184>)
 8000704:	2201      	movs	r2, #1
 8000706:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000708:	2301      	movs	r3, #1
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000034c 	.word	0x2000034c
 8000718:	200007e4 	.word	0x200007e4

0800071c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000722:	2300      	movs	r3, #0
 8000724:	71fb      	strb	r3, [r7, #7]
 8000726:	e01d      	b.n	8000764 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3b50      	subs	r3, #80	; 0x50
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f000 f9cc 	bl	8000ad0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	2078      	movs	r0, #120	; 0x78
 800073e:	f000 f9c7 	bl	8000ad0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000742:	2210      	movs	r2, #16
 8000744:	2100      	movs	r1, #0
 8000746:	2078      	movs	r0, #120	; 0x78
 8000748:	f000 f9c2 	bl	8000ad0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	01db      	lsls	r3, r3, #7
 8000750:	4a08      	ldr	r2, [pc, #32]	; (8000774 <SSD1306_UpdateScreen+0x58>)
 8000752:	441a      	add	r2, r3
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	2078      	movs	r0, #120	; 0x78
 800075a:	f000 f953 	bl	8000a04 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	3301      	adds	r3, #1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b07      	cmp	r3, #7
 8000768:	d9de      	bls.n	8000728 <SSD1306_UpdateScreen+0xc>
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200003e4 	.word	0x200003e4

08000778 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <SSD1306_Fill+0x14>
 8000788:	2300      	movs	r3, #0
 800078a:	e000      	b.n	800078e <SSD1306_Fill+0x16>
 800078c:	23ff      	movs	r3, #255	; 0xff
 800078e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000792:	4619      	mov	r1, r3
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <SSD1306_Fill+0x2c>)
 8000796:	f003 ff16 	bl	80045c6 <memset>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200003e4 	.word	0x200003e4

080007a8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
 80007b2:	460b      	mov	r3, r1
 80007b4:	80bb      	strh	r3, [r7, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	70fb      	strb	r3, [r7, #3]
	if (
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	2b7f      	cmp	r3, #127	; 0x7f
 80007be:	d848      	bhi.n	8000852 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	2b3f      	cmp	r3, #63	; 0x3f
 80007c4:	d845      	bhi.n	8000852 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <SSD1306_DrawPixel+0xb4>)
 80007c8:	791b      	ldrb	r3, [r3, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d006      	beq.n	80007dc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d11a      	bne.n	8000818 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007e2:	88fa      	ldrh	r2, [r7, #6]
 80007e4:	88bb      	ldrh	r3, [r7, #4]
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	b298      	uxth	r0, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	01db      	lsls	r3, r3, #7
 80007ee:	4413      	add	r3, r2
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <SSD1306_DrawPixel+0xb8>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	b25a      	sxtb	r2, r3
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	b25b      	sxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b259      	sxtb	r1, r3
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	4603      	mov	r3, r0
 800080c:	01db      	lsls	r3, r3, #7
 800080e:	4413      	add	r3, r2
 8000810:	b2c9      	uxtb	r1, r1
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <SSD1306_DrawPixel+0xb8>)
 8000814:	54d1      	strb	r1, [r2, r3]
 8000816:	e01d      	b.n	8000854 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000818:	88fa      	ldrh	r2, [r7, #6]
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	08db      	lsrs	r3, r3, #3
 800081e:	b298      	uxth	r0, r3
 8000820:	4603      	mov	r3, r0
 8000822:	01db      	lsls	r3, r3, #7
 8000824:	4413      	add	r3, r2
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <SSD1306_DrawPixel+0xb8>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	b25a      	sxtb	r2, r3
 800082c:	88bb      	ldrh	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	b25b      	sxtb	r3, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	4013      	ands	r3, r2
 8000840:	b259      	sxtb	r1, r3
 8000842:	88fa      	ldrh	r2, [r7, #6]
 8000844:	4603      	mov	r3, r0
 8000846:	01db      	lsls	r3, r3, #7
 8000848:	4413      	add	r3, r2
 800084a:	b2c9      	uxtb	r1, r1
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <SSD1306_DrawPixel+0xb8>)
 800084e:	54d1      	strb	r1, [r2, r3]
 8000850:	e000      	b.n	8000854 <SSD1306_DrawPixel+0xac>
		return;
 8000852:	bf00      	nop
	}
}
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	200007e4 	.word	0x200007e4
 8000860:	200003e4 	.word	0x200003e4

08000864 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	80fb      	strh	r3, [r7, #6]
 8000870:	4613      	mov	r3, r2
 8000872:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000874:	4a05      	ldr	r2, [pc, #20]	; (800088c <SSD1306_GotoXY+0x28>)
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <SSD1306_GotoXY+0x28>)
 800087c:	88bb      	ldrh	r3, [r7, #4]
 800087e:	8053      	strh	r3, [r2, #2]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	200007e4 	.word	0x200007e4

08000890 <SSD1306_Putc>:
	/* Set write pointers */
	SSD1306.CurrentX = 64 - (sizeof(buffer) / 16);
	SSD1306.CurrentY = ((1 - line) * 20);
}

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008a0:	4b3a      	ldr	r3, [pc, #232]	; (800098c <SSD1306_Putc+0xfc>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4413      	add	r3, r2
	if (
 80008ac:	2b7f      	cmp	r3, #127	; 0x7f
 80008ae:	dc07      	bgt.n	80008c0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80008b0:	4b36      	ldr	r3, [pc, #216]	; (800098c <SSD1306_Putc+0xfc>)
 80008b2:	885b      	ldrh	r3, [r3, #2]
 80008b4:	461a      	mov	r2, r3
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	785b      	ldrb	r3, [r3, #1]
 80008ba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008bc:	2b3f      	cmp	r3, #63	; 0x3f
 80008be:	dd01      	ble.n	80008c4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	e05e      	b.n	8000982 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e04b      	b.n	8000962 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685a      	ldr	r2, [r3, #4]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	3b20      	subs	r3, #32
 80008d2:	6839      	ldr	r1, [r7, #0]
 80008d4:	7849      	ldrb	r1, [r1, #1]
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	440b      	add	r3, r1
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	e030      	b.n	8000950 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d010      	beq.n	8000920 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <SSD1306_Putc+0xfc>)
 8000900:	881a      	ldrh	r2, [r3, #0]
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	b29b      	uxth	r3, r3
 8000906:	4413      	add	r3, r2
 8000908:	b298      	uxth	r0, r3
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <SSD1306_Putc+0xfc>)
 800090c:	885a      	ldrh	r2, [r3, #2]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	b29b      	uxth	r3, r3
 8000912:	4413      	add	r3, r2
 8000914:	b29b      	uxth	r3, r3
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	4619      	mov	r1, r3
 800091a:	f7ff ff45 	bl	80007a8 <SSD1306_DrawPixel>
 800091e:	e014      	b.n	800094a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <SSD1306_Putc+0xfc>)
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	b29b      	uxth	r3, r3
 8000928:	4413      	add	r3, r2
 800092a:	b298      	uxth	r0, r3
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <SSD1306_Putc+0xfc>)
 800092e:	885a      	ldrh	r2, [r3, #2]
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	b29b      	uxth	r3, r3
 8000934:	4413      	add	r3, r2
 8000936:	b299      	uxth	r1, r3
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf0c      	ite	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	2300      	movne	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	461a      	mov	r2, r3
 8000946:	f7ff ff2f 	bl	80007a8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	3301      	adds	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	4293      	cmp	r3, r2
 800095a:	d3c8      	bcc.n	80008ee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	461a      	mov	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	4293      	cmp	r3, r2
 800096c:	d3ad      	bcc.n	80008ca <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <SSD1306_Putc+0xfc>)
 8000970:	881a      	ldrh	r2, [r3, #0]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b29b      	uxth	r3, r3
 8000978:	4413      	add	r3, r2
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <SSD1306_Putc+0xfc>)
 800097e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000980:	79fb      	ldrb	r3, [r7, #7]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200007e4 	.word	0x200007e4

08000990 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	4613      	mov	r3, r2
 800099c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800099e:	e012      	b.n	80009c6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	68b9      	ldr	r1, [r7, #8]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff71 	bl	8000890 <SSD1306_Putc>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d002      	beq.n	80009c0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	e008      	b.n	80009d2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1e8      	bne.n	80009a0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	781b      	ldrb	r3, [r3, #0]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <ssd1306_I2C_Init+0x24>)
 80009e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009e6:	e002      	b.n	80009ee <ssd1306_I2C_Init+0x12>
		p--;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f9      	bne.n	80009e8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	0003d090 	.word	0x0003d090

08000a04 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b0c7      	sub	sp, #284	; 0x11c
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a12:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a16:	600a      	str	r2, [r1, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a1e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a22:	4622      	mov	r2, r4
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a2a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000a2e:	4602      	mov	r2, r0
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a3a:	460a      	mov	r2, r1
 8000a3c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a46:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a4a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000a4e:	7812      	ldrb	r2, [r2, #0]
 8000a50:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a58:	e015      	b.n	8000a86 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a5e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a62:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000a66:	6812      	ldr	r2, [r2, #0]
 8000a68:	441a      	add	r2, r3
 8000a6a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a6e:	3301      	adds	r3, #1
 8000a70:	7811      	ldrb	r1, [r2, #0]
 8000a72:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a76:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000a7a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a7c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a80:	3301      	adds	r3, #1
 8000a82:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a86:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a90:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000a94:	8812      	ldrh	r2, [r2, #0]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d8df      	bhi.n	8000a5a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000a9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a9e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b299      	uxth	r1, r3
 8000aa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	f107 020c 	add.w	r2, r7, #12
 8000ab8:	200a      	movs	r0, #10
 8000aba:	9000      	str	r0, [sp, #0]
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <ssd1306_I2C_WriteMulti+0xc8>)
 8000abe:	f000 fe55 	bl	800176c <HAL_I2C_Master_Transmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	2000034c 	.word	0x2000034c

08000ad0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	460b      	mov	r3, r1
 8000adc:	71bb      	strb	r3, [r7, #6]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ae6:	797b      	ldrb	r3, [r7, #5]
 8000ae8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	b299      	uxth	r1, r3
 8000aee:	f107 020c 	add.w	r2, r7, #12
 8000af2:	230a      	movs	r3, #10
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2302      	movs	r3, #2
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <ssd1306_I2C_Write+0x38>)
 8000afa:	f000 fe37 	bl	800176c <HAL_I2C_Master_Transmit>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000034c 	.word	0x2000034c

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	210f      	movs	r1, #15
 8000b46:	f06f 0001 	mvn.w	r0, #1
 8000b4a:	f000 fb04 	bl	8001156 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <HAL_I2C_MspInit+0x70>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d123      	bne.n	8000bc4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_I2C_MspInit+0x74>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <HAL_I2C_MspInit+0x74>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_I2C_MspInit+0x74>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b94:	23c0      	movs	r3, #192	; 0xc0
 8000b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b98:	2312      	movs	r3, #18
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <HAL_I2C_MspInit+0x78>)
 8000ba8:	f000 fb00 	bl	80011ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_I2C_MspInit+0x74>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_I2C_MspInit+0x74>)
 8000bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb6:	61d3      	str	r3, [r2, #28]
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_I2C_MspInit+0x74>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010c00 	.word	0x40010c00

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d12f      	bne.n	8000c58 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c02:	61d3      	str	r3, [r2, #28]
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <HAL_UART_MspInit+0x90>)
 8000c3c:	f000 fab6 	bl	80011ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c40:	2308      	movs	r3, #8
 8000c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_UART_MspInit+0x90>)
 8000c54:	f000 faaa 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010800 	.word	0x40010800

08000c6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08e      	sub	sp, #56	; 0x38
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <HAL_InitTick+0xe8>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <HAL_InitTick+0xe8>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <HAL_InitTick+0xe8>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c9a:	f107 0210 	add.w	r2, r7, #16
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fd91 	bl	80027cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d103      	bne.n	8000cbc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cb4:	f001 fd62 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8000cb8:	6378      	str	r0, [r7, #52]	; 0x34
 8000cba:	e004      	b.n	8000cc6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cbc:	f001 fd5e 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc8:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <HAL_InitTick+0xec>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	0c9b      	lsrs	r3, r3, #18
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_InitTick+0xf0>)
 8000cd6:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <HAL_InitTick+0xf4>)
 8000cd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <HAL_InitTick+0xf0>)
 8000cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <HAL_InitTick+0xf0>)
 8000ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_InitTick+0xf0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_InitTick+0xf0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_InitTick+0xf0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000cfa:	4818      	ldr	r0, [pc, #96]	; (8000d5c <HAL_InitTick+0xf0>)
 8000cfc:	f001 fdb4 	bl	8002868 <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d11b      	bne.n	8000d46 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000d0e:	4813      	ldr	r0, [pc, #76]	; (8000d5c <HAL_InitTick+0xf0>)
 8000d10:	f001 fe02 	bl	8002918 <HAL_TIM_Base_Start_IT>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d111      	bne.n	8000d46 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d22:	201e      	movs	r0, #30
 8000d24:	f000 fa33 	bl	800118e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b0f      	cmp	r3, #15
 8000d2c:	d808      	bhi.n	8000d40 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	201e      	movs	r0, #30
 8000d34:	f000 fa0f 	bl	8001156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_InitTick+0xf8>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e002      	b.n	8000d46 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3738      	adds	r7, #56	; 0x38
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	200007ec 	.word	0x200007ec
 8000d60:	40000800 	.word	0x40000800
 8000d64:	2000000c 	.word	0x2000000c

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
	...

08000d94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM4_IRQHandler+0x10>)
 8000d9a:	f001 fe0f 	bl	80029bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200007ec 	.word	0x200007ec

08000da8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e00a      	b.n	8000dd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dba:	f3af 8000 	nop.w
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf0      	blt.n	8000dba <_read+0x12>
  }

  return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e009      	b.n	8000e08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fb9f 	bl	8000540 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf1      	blt.n	8000df4 <_write+0x12>
//    ITM_SendChar(*ptr++);
  }
  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_close>:

int _close(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e40:	605a      	str	r2, [r3, #4]
  return 0;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <_isatty>:

int _isatty(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
	...

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f003 fa68 	bl	8004380 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20005000 	.word	0x20005000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	20000834 	.word	0x20000834
 8000ee4:	20001598 	.word	0x20001598

08000ee8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	; (8000f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1a:	f7ff ffe5 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f003 fb2b 	bl	8004578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f22:	f7ff f92d 	bl	8000180 <main>
  bx lr
 8000f26:	4770      	bx	lr
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f30:	08005750 	.word	0x08005750
  ldr r2, =_sbss
 8000f34:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f38:	20001598 	.word	0x20001598

08000f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_2_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x28>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x28>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f8f5 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	200f      	movs	r0, #15
 8000f58:	f7ff fe88 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fdd6 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000010 	.word	0x20000010
 8000f8c:	20000838 	.word	0x20000838

08000f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000838 	.word	0x20000838

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fff0 	bl	8000f90 <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffe0 	bl	8000f90 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000010 	.word	0x20000010

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db0b      	blt.n	800107a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 021f 	and.w	r2, r3, #31
 8001068:	4906      	ldr	r1, [pc, #24]	; (8001084 <__NVIC_EnableIRQ+0x34>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	2001      	movs	r0, #1
 8001072:	fa00 f202 	lsl.w	r2, r0, r2
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff4f 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff64 	bl	8001034 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ffb2 	bl	80010dc <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff81 	bl	8001088 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff57 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b08b      	sub	sp, #44	; 0x2c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	e169      	b.n	8001494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c0:	2201      	movs	r2, #1
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f040 8158 	bne.w	800148e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4a9a      	ldr	r2, [pc, #616]	; (800144c <HAL_GPIO_Init+0x2a0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d05e      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 80011e8:	4a98      	ldr	r2, [pc, #608]	; (800144c <HAL_GPIO_Init+0x2a0>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d875      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 80011ee:	4a98      	ldr	r2, [pc, #608]	; (8001450 <HAL_GPIO_Init+0x2a4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d058      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 80011f4:	4a96      	ldr	r2, [pc, #600]	; (8001450 <HAL_GPIO_Init+0x2a4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d86f      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 80011fa:	4a96      	ldr	r2, [pc, #600]	; (8001454 <HAL_GPIO_Init+0x2a8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d052      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 8001200:	4a94      	ldr	r2, [pc, #592]	; (8001454 <HAL_GPIO_Init+0x2a8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d869      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 8001206:	4a94      	ldr	r2, [pc, #592]	; (8001458 <HAL_GPIO_Init+0x2ac>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d04c      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 800120c:	4a92      	ldr	r2, [pc, #584]	; (8001458 <HAL_GPIO_Init+0x2ac>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d863      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 8001212:	4a92      	ldr	r2, [pc, #584]	; (800145c <HAL_GPIO_Init+0x2b0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d046      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 8001218:	4a90      	ldr	r2, [pc, #576]	; (800145c <HAL_GPIO_Init+0x2b0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d85d      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 800121e:	2b12      	cmp	r3, #18
 8001220:	d82a      	bhi.n	8001278 <HAL_GPIO_Init+0xcc>
 8001222:	2b12      	cmp	r3, #18
 8001224:	d859      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <HAL_GPIO_Init+0x80>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	080012a7 	.word	0x080012a7
 8001230:	08001281 	.word	0x08001281
 8001234:	08001293 	.word	0x08001293
 8001238:	080012d5 	.word	0x080012d5
 800123c:	080012db 	.word	0x080012db
 8001240:	080012db 	.word	0x080012db
 8001244:	080012db 	.word	0x080012db
 8001248:	080012db 	.word	0x080012db
 800124c:	080012db 	.word	0x080012db
 8001250:	080012db 	.word	0x080012db
 8001254:	080012db 	.word	0x080012db
 8001258:	080012db 	.word	0x080012db
 800125c:	080012db 	.word	0x080012db
 8001260:	080012db 	.word	0x080012db
 8001264:	080012db 	.word	0x080012db
 8001268:	080012db 	.word	0x080012db
 800126c:	080012db 	.word	0x080012db
 8001270:	08001289 	.word	0x08001289
 8001274:	0800129d 	.word	0x0800129d
 8001278:	4a79      	ldr	r2, [pc, #484]	; (8001460 <HAL_GPIO_Init+0x2b4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800127e:	e02c      	b.n	80012da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e029      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	3304      	adds	r3, #4
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e024      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	3308      	adds	r3, #8
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e01f      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	330c      	adds	r3, #12
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e01a      	b.n	80012dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ae:	2304      	movs	r3, #4
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e013      	b.n	80012dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d105      	bne.n	80012c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012bc:	2308      	movs	r3, #8
 80012be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	611a      	str	r2, [r3, #16]
          break;
 80012c6:	e009      	b.n	80012dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c8:	2308      	movs	r3, #8
 80012ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	615a      	str	r2, [r3, #20]
          break;
 80012d2:	e003      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
          break;
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x130>
          break;
 80012da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2bff      	cmp	r3, #255	; 0xff
 80012e0:	d801      	bhi.n	80012e6 <HAL_GPIO_Init+0x13a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	e001      	b.n	80012ea <HAL_GPIO_Init+0x13e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3304      	adds	r3, #4
 80012ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2bff      	cmp	r3, #255	; 0xff
 80012f0:	d802      	bhi.n	80012f8 <HAL_GPIO_Init+0x14c>
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_Init+0x152>
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	3b08      	subs	r3, #8
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	210f      	movs	r1, #15
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	401a      	ands	r2, r3
 8001310:	6a39      	ldr	r1, [r7, #32]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	431a      	orrs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80b1 	beq.w	800148e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_GPIO_Init+0x2b8>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x2b8>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_GPIO_Init+0x2b8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001344:	4a48      	ldr	r2, [pc, #288]	; (8001468 <HAL_GPIO_Init+0x2bc>)
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a40      	ldr	r2, [pc, #256]	; (800146c <HAL_GPIO_Init+0x2c0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d013      	beq.n	8001398 <HAL_GPIO_Init+0x1ec>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a3f      	ldr	r2, [pc, #252]	; (8001470 <HAL_GPIO_Init+0x2c4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d00d      	beq.n	8001394 <HAL_GPIO_Init+0x1e8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a3e      	ldr	r2, [pc, #248]	; (8001474 <HAL_GPIO_Init+0x2c8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d007      	beq.n	8001390 <HAL_GPIO_Init+0x1e4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a3d      	ldr	r2, [pc, #244]	; (8001478 <HAL_GPIO_Init+0x2cc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d101      	bne.n	800138c <HAL_GPIO_Init+0x1e0>
 8001388:	2303      	movs	r3, #3
 800138a:	e006      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 800138c:	2304      	movs	r3, #4
 800138e:	e004      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001390:	2302      	movs	r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001398:	2300      	movs	r3, #0
 800139a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013aa:	492f      	ldr	r1, [pc, #188]	; (8001468 <HAL_GPIO_Init+0x2bc>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	492c      	ldr	r1, [pc, #176]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	43db      	mvns	r3, r3
 80013da:	4928      	ldr	r1, [pc, #160]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013dc:	4013      	ands	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4922      	ldr	r1, [pc, #136]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	43db      	mvns	r3, r3
 8001402:	491e      	ldr	r1, [pc, #120]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001404:	4013      	ands	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	4918      	ldr	r1, [pc, #96]	; (800147c <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	608b      	str	r3, [r1, #8]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	4914      	ldr	r1, [pc, #80]	; (800147c <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d021      	beq.n	8001480 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_GPIO_Init+0x2d0>)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	490e      	ldr	r1, [pc, #56]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	60cb      	str	r3, [r1, #12]
 8001448:	e021      	b.n	800148e <HAL_GPIO_Init+0x2e2>
 800144a:	bf00      	nop
 800144c:	10320000 	.word	0x10320000
 8001450:	10310000 	.word	0x10310000
 8001454:	10220000 	.word	0x10220000
 8001458:	10210000 	.word	0x10210000
 800145c:	10120000 	.word	0x10120000
 8001460:	10110000 	.word	0x10110000
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	40010800 	.word	0x40010800
 8001470:	40010c00 	.word	0x40010c00
 8001474:	40011000 	.word	0x40011000
 8001478:	40011400 	.word	0x40011400
 800147c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_GPIO_Init+0x304>)
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	43db      	mvns	r3, r3
 8001488:	4909      	ldr	r1, [pc, #36]	; (80014b0 <HAL_GPIO_Init+0x304>)
 800148a:	4013      	ands	r3, r2
 800148c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	3301      	adds	r3, #1
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	fa22 f303 	lsr.w	r3, r2, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f47f ae8e 	bne.w	80011c0 <HAL_GPIO_Init+0x14>
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	372c      	adds	r7, #44	; 0x2c
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	40010400 	.word	0x40010400

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c4:	787b      	ldrb	r3, [r7, #1]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014d0:	e003      	b.n	80014da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	041a      	lsls	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	611a      	str	r2, [r3, #16]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e12b      	b.n	800174e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fb26 	bl	8000b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2224      	movs	r2, #36	; 0x24
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001548:	f001 f918 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 800154c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a81      	ldr	r2, [pc, #516]	; (8001758 <HAL_I2C_Init+0x274>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d807      	bhi.n	8001568 <HAL_I2C_Init+0x84>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4a80      	ldr	r2, [pc, #512]	; (800175c <HAL_I2C_Init+0x278>)
 800155c:	4293      	cmp	r3, r2
 800155e:	bf94      	ite	ls
 8001560:	2301      	movls	r3, #1
 8001562:	2300      	movhi	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	e006      	b.n	8001576 <HAL_I2C_Init+0x92>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a7d      	ldr	r2, [pc, #500]	; (8001760 <HAL_I2C_Init+0x27c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	bf94      	ite	ls
 8001570:	2301      	movls	r3, #1
 8001572:	2300      	movhi	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0e7      	b.n	800174e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a78      	ldr	r2, [pc, #480]	; (8001764 <HAL_I2C_Init+0x280>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0c9b      	lsrs	r3, r3, #18
 8001588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	430a      	orrs	r2, r1
 800159c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a6a      	ldr	r2, [pc, #424]	; (8001758 <HAL_I2C_Init+0x274>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d802      	bhi.n	80015b8 <HAL_I2C_Init+0xd4>
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3301      	adds	r3, #1
 80015b6:	e009      	b.n	80015cc <HAL_I2C_Init+0xe8>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	4a69      	ldr	r2, [pc, #420]	; (8001768 <HAL_I2C_Init+0x284>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	3301      	adds	r3, #1
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	495c      	ldr	r1, [pc, #368]	; (8001758 <HAL_I2C_Init+0x274>)
 80015e8:	428b      	cmp	r3, r1
 80015ea:	d819      	bhi.n	8001620 <HAL_I2C_Init+0x13c>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e59      	subs	r1, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015fa:	1c59      	adds	r1, r3, #1
 80015fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001600:	400b      	ands	r3, r1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <HAL_I2C_Init+0x138>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1e59      	subs	r1, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fbb1 f3f3 	udiv	r3, r1, r3
 8001614:	3301      	adds	r3, #1
 8001616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161a:	e051      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 800161c:	2304      	movs	r3, #4
 800161e:	e04f      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d111      	bne.n	800164c <HAL_I2C_Init+0x168>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e58      	subs	r0, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	440b      	add	r3, r1
 8001636:	fbb0 f3f3 	udiv	r3, r0, r3
 800163a:	3301      	adds	r3, #1
 800163c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	e012      	b.n	8001672 <HAL_I2C_Init+0x18e>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1e58      	subs	r0, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	0099      	lsls	r1, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001662:	3301      	adds	r3, #1
 8001664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Init+0x196>
 8001676:	2301      	movs	r3, #1
 8001678:	e022      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10e      	bne.n	80016a0 <HAL_I2C_Init+0x1bc>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1e58      	subs	r0, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	440b      	add	r3, r1
 8001690:	fbb0 f3f3 	udiv	r3, r0, r3
 8001694:	3301      	adds	r3, #1
 8001696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169e:	e00f      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	0099      	lsls	r1, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	6809      	ldr	r1, [r1, #0]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6911      	ldr	r1, [r2, #16]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68d2      	ldr	r2, [r2, #12]
 80016fa:	4311      	orrs	r1, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	430b      	orrs	r3, r1
 8001702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2220      	movs	r2, #32
 800173a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	000186a0 	.word	0x000186a0
 800175c:	001e847f 	.word	0x001e847f
 8001760:	003d08ff 	.word	0x003d08ff
 8001764:	431bde83 	.word	0x431bde83
 8001768:	10624dd3 	.word	0x10624dd3

0800176c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	461a      	mov	r2, r3
 8001778:	460b      	mov	r3, r1
 800177a:	817b      	strh	r3, [r7, #10]
 800177c:	4613      	mov	r3, r2
 800177e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff fc06 	bl	8000f90 <HAL_GetTick>
 8001784:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b20      	cmp	r3, #32
 8001790:	f040 80e0 	bne.w	8001954 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2319      	movs	r3, #25
 800179a:	2201      	movs	r2, #1
 800179c:	4970      	ldr	r1, [pc, #448]	; (8001960 <HAL_I2C_Master_Transmit+0x1f4>)
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fa92 	bl	8001cc8 <I2C_WaitOnFlagUntilTimeout>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017aa:	2302      	movs	r3, #2
 80017ac:	e0d3      	b.n	8001956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_I2C_Master_Transmit+0x50>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e0cc      	b.n	8001956 <HAL_I2C_Master_Transmit+0x1ea>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d007      	beq.n	80017e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2221      	movs	r2, #33	; 0x21
 80017f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2210      	movs	r2, #16
 80017fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	893a      	ldrh	r2, [r7, #8]
 8001812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4a50      	ldr	r2, [pc, #320]	; (8001964 <HAL_I2C_Master_Transmit+0x1f8>)
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001824:	8979      	ldrh	r1, [r7, #10]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	6a3a      	ldr	r2, [r7, #32]
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f9ca 	bl	8001bc4 <I2C_MasterRequestWrite>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e08d      	b.n	8001956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001850:	e066      	b.n	8001920 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	6a39      	ldr	r1, [r7, #32]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 fb0c 	bl	8001e74 <I2C_WaitOnTXEFlagUntilTimeout>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00d      	beq.n	800187e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2b04      	cmp	r3, #4
 8001868:	d107      	bne.n	800187a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06b      	b.n	8001956 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001898:	b29b      	uxth	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d11b      	bne.n	80018f4 <HAL_I2C_Master_Transmit+0x188>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d017      	beq.n	80018f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	6a39      	ldr	r1, [r7, #32]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 fafc 	bl	8001ef6 <I2C_WaitOnBTFFlagUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00d      	beq.n	8001920 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	2b04      	cmp	r3, #4
 800190a:	d107      	bne.n	800191c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e01a      	b.n	8001956 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001924:	2b00      	cmp	r3, #0
 8001926:	d194      	bne.n	8001852 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	e000      	b.n	8001956 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001954:	2302      	movs	r3, #2
  }
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	00100002 	.word	0x00100002
 8001964:	ffff0000 	.word	0xffff0000

08001968 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	460b      	mov	r3, r1
 8001976:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff fb0a 	bl	8000f90 <HAL_GetTick>
 800197c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800197e:	2301      	movs	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b20      	cmp	r3, #32
 800198c:	f040 8111 	bne.w	8001bb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2319      	movs	r3, #25
 8001996:	2201      	movs	r2, #1
 8001998:	4988      	ldr	r1, [pc, #544]	; (8001bbc <HAL_I2C_IsDeviceReady+0x254>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f994 	bl	8001cc8 <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e104      	b.n	8001bb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_I2C_IsDeviceReady+0x50>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0fd      	b.n	8001bb4 <HAL_I2C_IsDeviceReady+0x24c>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d007      	beq.n	80019de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2224      	movs	r2, #36	; 0x24
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a70      	ldr	r2, [pc, #448]	; (8001bc0 <HAL_I2C_IsDeviceReady+0x258>)
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f952 	bl	8001cc8 <I2C_WaitOnFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00d      	beq.n	8001a46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a38:	d103      	bne.n	8001a42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e0b6      	b.n	8001bb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a46:	897b      	ldrh	r3, [r7, #10]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fa9b 	bl	8000f90 <HAL_GetTick>
 8001a5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	bf0c      	ite	eq
 8001a6a:	2301      	moveq	r3, #1
 8001a6c:	2300      	movne	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a80:	bf0c      	ite	eq
 8001a82:	2301      	moveq	r3, #1
 8001a84:	2300      	movne	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a8a:	e025      	b.n	8001ad8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a8c:	f7ff fa80 	bl	8000f90 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d302      	bcc.n	8001aa2 <HAL_I2C_IsDeviceReady+0x13a>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d103      	bne.n	8001aaa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	22a0      	movs	r2, #160	; 0xa0
 8001aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2ba0      	cmp	r3, #160	; 0xa0
 8001ae2:	d005      	beq.n	8001af0 <HAL_I2C_IsDeviceReady+0x188>
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <HAL_I2C_IsDeviceReady+0x188>
 8001aea:	7dbb      	ldrb	r3, [r7, #22]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0cd      	beq.n	8001a8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d129      	bne.n	8001b5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2319      	movs	r3, #25
 8001b32:	2201      	movs	r2, #1
 8001b34:	4921      	ldr	r1, [pc, #132]	; (8001bbc <HAL_I2C_IsDeviceReady+0x254>)
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f8c6 	bl	8001cc8 <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e036      	b.n	8001bb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e02c      	b.n	8001bb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2319      	movs	r3, #25
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	490f      	ldr	r1, [pc, #60]	; (8001bbc <HAL_I2C_IsDeviceReady+0x254>)
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f8a2 	bl	8001cc8 <I2C_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e012      	b.n	8001bb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	3301      	adds	r3, #1
 8001b92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f4ff af32 	bcc.w	8001a02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3720      	adds	r7, #32
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	00100002 	.word	0x00100002
 8001bc0:	ffff0000 	.word	0xffff0000

08001bc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d006      	beq.n	8001bee <I2C_MasterRequestWrite+0x2a>
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d003      	beq.n	8001bee <I2C_MasterRequestWrite+0x2a>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bec:	d108      	bne.n	8001c00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e00b      	b.n	8001c18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	2b12      	cmp	r3, #18
 8001c06:	d107      	bne.n	8001c18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f84f 	bl	8001cc8 <I2C_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00d      	beq.n	8001c4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c3e:	d103      	bne.n	8001c48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e035      	b.n	8001cb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c54:	d108      	bne.n	8001c68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	e01b      	b.n	8001ca0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c68:	897b      	ldrh	r3, [r7, #10]
 8001c6a:	11db      	asrs	r3, r3, #7
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f003 0306 	and.w	r3, r3, #6
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f063 030f 	orn	r3, r3, #15
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <I2C_MasterRequestWrite+0xfc>)
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f875 	bl	8001d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e010      	b.n	8001cb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c96:	897b      	ldrh	r3, [r7, #10]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <I2C_MasterRequestWrite+0x100>)
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f865 	bl	8001d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	00010008 	.word	0x00010008
 8001cc4:	00010002 	.word	0x00010002

08001cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd8:	e025      	b.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d021      	beq.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce2:	f7ff f955 	bl	8000f90 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d302      	bcc.n	8001cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d116      	bne.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f043 0220 	orr.w	r2, r3, #32
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e023      	b.n	8001d6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10d      	bne.n	8001d4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf0c      	ite	eq
 8001d42:	2301      	moveq	r3, #1
 8001d44:	2300      	movne	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	e00c      	b.n	8001d66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4013      	ands	r3, r2
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d0b6      	beq.n	8001cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d84:	e051      	b.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d94:	d123      	bne.n	8001dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f043 0204 	orr.w	r2, r3, #4
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e046      	b.n	8001e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d021      	beq.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de6:	f7ff f8d3 	bl	8000f90 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d302      	bcc.n	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d116      	bne.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f043 0220 	orr.w	r2, r3, #32
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e020      	b.n	8001e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10c      	bne.n	8001e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	e00b      	b.n	8001e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	43da      	mvns	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf14      	ite	ne
 8001e60:	2301      	movne	r3, #1
 8001e62:	2300      	moveq	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d18d      	bne.n	8001d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e80:	e02d      	b.n	8001ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f878 	bl	8001f78 <I2C_IsAcknowledgeFailed>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e02d      	b.n	8001eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d021      	beq.n	8001ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9a:	f7ff f879 	bl	8000f90 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d302      	bcc.n	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d116      	bne.n	8001ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e007      	b.n	8001eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee8:	2b80      	cmp	r3, #128	; 0x80
 8001eea:	d1ca      	bne.n	8001e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f02:	e02d      	b.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 f837 	bl	8001f78 <I2C_IsAcknowledgeFailed>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e02d      	b.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1a:	d021      	beq.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1c:	f7ff f838 	bl	8000f90 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d302      	bcc.n	8001f32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e007      	b.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d1ca      	bne.n	8001f04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8e:	d11b      	bne.n	8001fc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e272      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8087 	beq.w	8002102 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff4:	4b92      	ldr	r3, [pc, #584]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00c      	beq.n	800201a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002000:	4b8f      	ldr	r3, [pc, #572]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d112      	bne.n	8002032 <HAL_RCC_OscConfig+0x5e>
 800200c:	4b8c      	ldr	r3, [pc, #560]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d10b      	bne.n	8002032 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4b89      	ldr	r3, [pc, #548]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d06c      	beq.n	8002100 <HAL_RCC_OscConfig+0x12c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d168      	bne.n	8002100 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e24c      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x76>
 800203c:	4b80      	ldr	r3, [pc, #512]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a7f      	ldr	r2, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e02e      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7a      	ldr	r2, [pc, #488]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b78      	ldr	r3, [pc, #480]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a77      	ldr	r2, [pc, #476]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0xbc>
 8002076:	4b72      	ldr	r3, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a71      	ldr	r2, [pc, #452]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b6f      	ldr	r3, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a6e      	ldr	r2, [pc, #440]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 8002090:	4b6b      	ldr	r3, [pc, #428]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6a      	ldr	r2, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a67      	ldr	r2, [pc, #412]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe ff6e 	bl	8000f90 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7fe ff6a 	bl	8000f90 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e200      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe4>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe ff5a 	bl	8000f90 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7fe ff56 	bl	8000f90 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1ec      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x10c>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d063      	beq.n	80021d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00b      	beq.n	8002132 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800211a:	4b49      	ldr	r3, [pc, #292]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b08      	cmp	r3, #8
 8002124:	d11c      	bne.n	8002160 <HAL_RCC_OscConfig+0x18c>
 8002126:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d116      	bne.n	8002160 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e1c0      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4939      	ldr	r1, [pc, #228]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	e03a      	b.n	80021d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b36      	ldr	r3, [pc, #216]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7fe ff0f 	bl	8000f90 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002176:	f7fe ff0b 	bl	8000f90 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1a1      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4927      	ldr	r1, [pc, #156]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
 80021a8:	e015      	b.n	80021d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe feee 	bl	8000f90 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7fe feea 	bl	8000f90 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e180      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d03a      	beq.n	8002258 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7fe fece 	bl	8000f90 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f8:	f7fe feca 	bl	8000f90 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e160      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002216:	2001      	movs	r0, #1
 8002218:	f000 fb08 	bl	800282c <RCC_Delay>
 800221c:	e01c      	b.n	8002258 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7fe feb4 	bl	8000f90 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222a:	e00f      	b.n	800224c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe feb0 	bl	8000f90 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d908      	bls.n	800224c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e146      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	42420000 	.word	0x42420000
 8002248:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e9      	bne.n	800222c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a6 	beq.w	80023b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b8b      	ldr	r3, [pc, #556]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10d      	bne.n	8002292 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a87      	ldr	r2, [pc, #540]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b85      	ldr	r3, [pc, #532]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b82      	ldr	r3, [pc, #520]	; (800249c <HAL_RCC_OscConfig+0x4c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229e:	4b7f      	ldr	r3, [pc, #508]	; (800249c <HAL_RCC_OscConfig+0x4c8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7e      	ldr	r2, [pc, #504]	; (800249c <HAL_RCC_OscConfig+0x4c8>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7fe fe71 	bl	8000f90 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe fe6d 	bl	8000f90 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e103      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b75      	ldr	r3, [pc, #468]	; (800249c <HAL_RCC_OscConfig+0x4c8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x312>
 80022d8:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	e02d      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x334>
 80022ee:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a69      	ldr	r2, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a66      	ldr	r2, [pc, #408]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	e01c      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0x356>
 8002310:	4b61      	ldr	r3, [pc, #388]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a60      	ldr	r2, [pc, #384]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	4b5e      	ldr	r3, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a5d      	ldr	r2, [pc, #372]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e00b      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 800232a:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a5a      	ldr	r2, [pc, #360]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4b58      	ldr	r3, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a57      	ldr	r2, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d015      	beq.n	8002376 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7fe fe21 	bl	8000f90 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe fe1d 	bl	8000f90 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0b1      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ee      	beq.n	8002352 <HAL_RCC_OscConfig+0x37e>
 8002374:	e014      	b.n	80023a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7fe fe0b 	bl	8000f90 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fe fe07 	bl	8000f90 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e09b      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002394:	4b40      	ldr	r3, [pc, #256]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1ee      	bne.n	800237e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a6:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8087 	beq.w	80024ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d061      	beq.n	800248c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d146      	bne.n	800245e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fddb 	bl	8000f90 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fdd7 	bl	8000f90 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e06d      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	4b29      	ldr	r3, [pc, #164]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d108      	bne.n	8002418 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4921      	ldr	r1, [pc, #132]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a19      	ldr	r1, [r3, #32]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	430b      	orrs	r3, r1
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x4cc>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fdab 	bl	8000f90 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7fe fda7 	bl	8000f90 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e03d      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x46a>
 800245c:	e035      	b.n	80024ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x4cc>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fd94 	bl	8000f90 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fd90 	bl	8000f90 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e026      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x498>
 800248a:	e01e      	b.n	80024ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e019      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
 80024a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_OscConfig+0x500>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0d0      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b6a      	ldr	r3, [pc, #424]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d910      	bls.n	800251c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b67      	ldr	r3, [pc, #412]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	4965      	ldr	r1, [pc, #404]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b63      	ldr	r3, [pc, #396]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b8      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800253e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002556:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	494d      	ldr	r1, [pc, #308]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d040      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d115      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e07f      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e073      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06b      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4936      	ldr	r1, [pc, #216]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c8:	f7fe fce2 	bl	8000f90 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7fe fcde 	bl	8000f90 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e053      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 020c 	and.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1eb      	bne.n	80025d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d210      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4922      	ldr	r1, [pc, #136]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e032      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4916      	ldr	r1, [pc, #88]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	490e      	ldr	r1, [pc, #56]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002666:	f000 f821 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	490a      	ldr	r1, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe faf0 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40022000 	.word	0x40022000
 800269c:	40021000 	.word	0x40021000
 80026a0:	080056cc 	.word	0x080056cc
 80026a4:	20000008 	.word	0x20000008
 80026a8:	2000000c 	.word	0x2000000c

080026ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b490      	push	{r4, r7}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026b2:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_RCC_GetSysClockFreq+0xac>)
 80026b4:	1d3c      	adds	r4, r7, #4
 80026b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026bc:	f240 2301 	movw	r3, #513	; 0x201
 80026c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x40>
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x46>
 80026ea:	e02b      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ec:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ee:	623b      	str	r3, [r7, #32]
      break;
 80026f0:	e02b      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	0c9b      	lsrs	r3, r3, #18
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3328      	adds	r3, #40	; 0x28
 80026fc:	443b      	add	r3, r7
 80026fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002702:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d012      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0c5b      	lsrs	r3, r3, #17
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	3328      	adds	r3, #40	; 0x28
 800271a:	443b      	add	r3, r7
 800271c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002720:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002726:	fb03 f202 	mul.w	r2, r3, r2
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	e004      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	623b      	str	r3, [r7, #32]
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002746:	623b      	str	r3, [r7, #32]
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	6a3b      	ldr	r3, [r7, #32]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bc90      	pop	{r4, r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	08004f48 	.word	0x08004f48
 800275c:	40021000 	.word	0x40021000
 8002760:	007a1200 	.word	0x007a1200
 8002764:	003d0900 	.word	0x003d0900

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b02      	ldr	r3, [pc, #8]	; (8002778 <HAL_RCC_GetHCLKFreq+0x10>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	20000008 	.word	0x20000008

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002780:	f7ff fff2 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	080056dc 	.word	0x080056dc

080027a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027a8:	f7ff ffde 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0adb      	lsrs	r3, r3, #11
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080056dc 	.word	0x080056dc

080027cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	220f      	movs	r2, #15
 80027da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_RCC_GetClockConfig+0x58>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0203 	and.w	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_RCC_GetClockConfig+0x58>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_GetClockConfig+0x58>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_RCC_GetClockConfig+0x58>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_RCC_GetClockConfig+0x5c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0207 	and.w	r2, r3, #7
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40021000 	.word	0x40021000
 8002828:	40022000 	.word	0x40022000

0800282c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <RCC_Delay+0x34>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <RCC_Delay+0x38>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0a5b      	lsrs	r3, r3, #9
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002848:	bf00      	nop
  }
  while (Delay --);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1e5a      	subs	r2, r3, #1
 800284e:	60fa      	str	r2, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f9      	bne.n	8002848 <RCC_Delay+0x1c>
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	20000008 	.word	0x20000008
 8002864:	10624dd3 	.word	0x10624dd3

08002868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e041      	b.n	80028fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f839 	bl	8002906 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 f9b4 	bl	8002c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d001      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e03a      	b.n	80029a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <HAL_TIM_Base_Start_IT+0x98>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00e      	beq.n	8002970 <HAL_TIM_Base_Start_IT+0x58>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295a:	d009      	beq.n	8002970 <HAL_TIM_Base_Start_IT+0x58>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d004      	beq.n	8002970 <HAL_TIM_Base_Start_IT+0x58>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d111      	bne.n	8002994 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b06      	cmp	r3, #6
 8002980:	d010      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0201 	orr.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002992:	e007      	b.n	80029a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40000800 	.word	0x40000800

080029bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0202 	mvn.w	r2, #2
 80029e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8ed 	bl	8002bde <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8e0 	bl	8002bcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8ef 	bl	8002bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0204 	mvn.w	r2, #4
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8c3 	bl	8002bde <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8b6 	bl	8002bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8c5 	bl	8002bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0208 	mvn.w	r2, #8
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2204      	movs	r2, #4
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f899 	bl	8002bde <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f88c 	bl	8002bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f89b 	bl	8002bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0210 	mvn.w	r2, #16
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2208      	movs	r2, #8
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f86f 	bl	8002bde <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f862 	bl	8002bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f871 	bl	8002bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d10e      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d107      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0201 	mvn.w	r2, #1
 8002b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fd fd12 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b80      	cmp	r3, #128	; 0x80
 8002b4c:	d10e      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b58:	2b80      	cmp	r3, #128	; 0x80
 8002b5a:	d107      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8bf 	bl	8002cea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f835 	bl	8002c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0220 	mvn.w	r2, #32
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f88a 	bl	8002cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <TIM_Base_SetConfig+0xb8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_Base_SetConfig+0x30>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c32:	d007      	beq.n	8002c44 <TIM_Base_SetConfig+0x30>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <TIM_Base_SetConfig+0xbc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_Base_SetConfig+0x30>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <TIM_Base_SetConfig+0xc0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d108      	bne.n	8002c56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <TIM_Base_SetConfig+0xb8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_Base_SetConfig+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d007      	beq.n	8002c76 <TIM_Base_SetConfig+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <TIM_Base_SetConfig+0xbc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_Base_SetConfig+0x62>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <TIM_Base_SetConfig+0xc0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d108      	bne.n	8002c88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <TIM_Base_SetConfig+0xb8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d103      	bne.n	8002cbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	615a      	str	r2, [r3, #20]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40000800 	.word	0x40000800

08002cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e03f      	b.n	8002d8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd ff58 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f905 	bl	8002f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b08a      	sub	sp, #40	; 0x28
 8002d9a:	af02      	add	r7, sp, #8
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d17c      	bne.n	8002eb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_UART_Transmit+0x2c>
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e075      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_UART_Transmit+0x3e>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e06e      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2221      	movs	r2, #33	; 0x21
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dea:	f7fe f8d1 	bl	8000f90 <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	88fa      	ldrh	r2, [r7, #6]
 8002dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e04:	d108      	bne.n	8002e18 <HAL_UART_Transmit+0x82>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	e003      	b.n	8002e20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e28:	e02a      	b.n	8002e80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2200      	movs	r2, #0
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f840 	bl	8002eba <UART_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e036      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	e007      	b.n	8002e72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1cf      	bne.n	8002e2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f810 	bl	8002eba <UART_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e006      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eca:	e02c      	b.n	8002f26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d028      	beq.n	8002f26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x30>
 8002eda:	f7fe f859 	bl	8000f90 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d21d      	bcs.n	8002f26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ef8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e00f      	b.n	8002f46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	bf0c      	ite	eq
 8002f36:	2301      	moveq	r3, #1
 8002f38:	2300      	movne	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d0c3      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f8a:	f023 030c 	bic.w	r3, r3, #12
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <UART_SetConfig+0x114>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7ff fbf4 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	e002      	b.n	8002fc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fc0:	f7ff fbdc 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8002fc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009a      	lsls	r2, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	4a22      	ldr	r2, [pc, #136]	; (8003068 <UART_SetConfig+0x118>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	0119      	lsls	r1, r3, #4
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009a      	lsls	r2, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <UART_SetConfig+0x118>)
 8002ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2064      	movs	r0, #100	; 0x64
 8003006:	fb00 f303 	mul.w	r3, r0, r3
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	3332      	adds	r3, #50	; 0x32
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <UART_SetConfig+0x118>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800301c:	4419      	add	r1, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009a      	lsls	r2, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fbb2 f2f3 	udiv	r2, r2, r3
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <UART_SetConfig+0x118>)
 8003036:	fba3 0302 	umull	r0, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2064      	movs	r0, #100	; 0x64
 800303e:	fb00 f303 	mul.w	r3, r0, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	3332      	adds	r3, #50	; 0x32
 8003048:	4a07      	ldr	r2, [pc, #28]	; (8003068 <UART_SetConfig+0x118>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	440a      	add	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40013800 	.word	0x40013800
 8003068:	51eb851f 	.word	0x51eb851f

0800306c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f103 0208 	add.w	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f103 0208 	add.w	r2, r3, #8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f103 0208 	add.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d103      	bne.n	8003128 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	e00c      	b.n	8003142 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3308      	adds	r3, #8
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e002      	b.n	8003136 <vListInsert+0x2e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	d2f6      	bcs.n	8003130 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	601a      	str	r2, [r3, #0]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6852      	ldr	r2, [r2, #4]
 8003198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d103      	bne.n	80031ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1e5a      	subs	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b08e      	sub	sp, #56	; 0x38
 80031ce:	af04      	add	r7, sp, #16
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <xTaskCreateStatic+0x2a>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	623b      	str	r3, [r7, #32]
}
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <xTaskCreateStatic+0x46>
	__asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	61fb      	str	r3, [r7, #28]
}
 800320c:	bf00      	nop
 800320e:	e7fe      	b.n	800320e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003210:	23b4      	movs	r3, #180	; 0xb4
 8003212:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2bb4      	cmp	r3, #180	; 0xb4
 8003218:	d00a      	beq.n	8003230 <xTaskCreateStatic+0x66>
	__asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	61bb      	str	r3, [r7, #24]
}
 800322c:	bf00      	nop
 800322e:	e7fe      	b.n	800322e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01e      	beq.n	8003274 <xTaskCreateStatic+0xaa>
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003244:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	2202      	movs	r2, #2
 800324a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800324e:	2300      	movs	r3, #0
 8003250:	9303      	str	r3, [sp, #12]
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	9302      	str	r3, [sp, #8]
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f850 	bl	800330c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800326c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800326e:	f000 f8e3 	bl	8003438 <prvAddNewTaskToReadyList>
 8003272:	e001      	b.n	8003278 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003278:	697b      	ldr	r3, [r7, #20]
	}
 800327a:	4618      	mov	r0, r3
 800327c:	3728      	adds	r7, #40	; 0x28
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003282:	b580      	push	{r7, lr}
 8003284:	b08c      	sub	sp, #48	; 0x30
 8003286:	af04      	add	r7, sp, #16
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fe9a 	bl	8003fd0 <pvPortMalloc>
 800329c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00e      	beq.n	80032c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80032a4:	20b4      	movs	r0, #180	; 0xb4
 80032a6:	f000 fe93 	bl	8003fd0 <pvPortMalloc>
 80032aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
 80032b8:	e005      	b.n	80032c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032ba:	6978      	ldr	r0, [r7, #20]
 80032bc:	f000 ff4c 	bl	8004158 <vPortFree>
 80032c0:	e001      	b.n	80032c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d017      	beq.n	80032fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	2300      	movs	r3, #0
 80032d8:	9303      	str	r3, [sp, #12]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	9302      	str	r3, [sp, #8]
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f80e 	bl	800330c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032f0:	69f8      	ldr	r0, [r7, #28]
 80032f2:	f000 f8a1 	bl	8003438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032f6:	2301      	movs	r3, #1
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e002      	b.n	8003302 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003300:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003302:	69bb      	ldr	r3, [r7, #24]
	}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003324:	3b01      	subs	r3, #1
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f023 0307 	bic.w	r3, r3, #7
 8003332:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <prvInitialiseNewTask+0x48>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	617b      	str	r3, [r7, #20]
}
 8003350:	bf00      	nop
 8003352:	e7fe      	b.n	8003352 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	e012      	b.n	8003380 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	7819      	ldrb	r1, [r3, #0]
 8003362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	3334      	adds	r3, #52	; 0x34
 800336a:	460a      	mov	r2, r1
 800336c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	d9e9      	bls.n	800335a <prvInitialiseNewTask+0x4e>
 8003386:	e000      	b.n	800338a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003388:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	2b06      	cmp	r3, #6
 8003396:	d901      	bls.n	800339c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003398:	2306      	movs	r3, #6
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	2200      	movs	r2, #0
 80033ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	3304      	adds	r3, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fe79 	bl	80030aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	3318      	adds	r3, #24
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fe74 	bl	80030aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	f1c3 0207 	rsb	r2, r3, #7
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	2200      	movs	r2, #0
 80033dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	334c      	adds	r3, #76	; 0x4c
 80033ec:	2260      	movs	r2, #96	; 0x60
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 f8e8 	bl	80045c6 <memset>
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	4a0c      	ldr	r2, [pc, #48]	; (800342c <prvInitialiseNewTask+0x120>)
 80033fa:	651a      	str	r2, [r3, #80]	; 0x50
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <prvInitialiseNewTask+0x124>)
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <prvInitialiseNewTask+0x128>)
 8003406:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	69b8      	ldr	r0, [r7, #24]
 800340e:	f000 fc29 	bl	8003c64 <pxPortInitialiseStack>
 8003412:	4602      	mov	r2, r0
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003422:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003424:	bf00      	nop
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	08005704 	.word	0x08005704
 8003430:	08005724 	.word	0x08005724
 8003434:	080056e4 	.word	0x080056e4

08003438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003440:	f000 fd04 	bl	8003e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <prvAddNewTaskToReadyList+0xb8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	4a29      	ldr	r2, [pc, #164]	; (80034f0 <prvAddNewTaskToReadyList+0xb8>)
 800344c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003456:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800345c:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <prvAddNewTaskToReadyList+0xb8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d110      	bne.n	8003486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003464:	f000 fad2 	bl	8003a0c <prvInitialiseTaskLists>
 8003468:	e00d      	b.n	8003486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <prvAddNewTaskToReadyList+0xc0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	429a      	cmp	r2, r3
 800347e:	d802      	bhi.n	8003486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003480:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003486:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <prvAddNewTaskToReadyList+0xc4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <prvAddNewTaskToReadyList+0xc4>)
 800348e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	2201      	movs	r2, #1
 8003496:	409a      	lsls	r2, r3
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <prvAddNewTaskToReadyList+0xc8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <prvAddNewTaskToReadyList+0xc8>)
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4a15      	ldr	r2, [pc, #84]	; (8003504 <prvAddNewTaskToReadyList+0xcc>)
 80034b0:	441a      	add	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7ff fe02 	bl	80030c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034be:	f000 fcf5 	bl	8003eac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <prvAddNewTaskToReadyList+0xc0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00e      	beq.n	80034e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d207      	bcs.n	80034e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <prvAddNewTaskToReadyList+0xd0>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	2000093c 	.word	0x2000093c
 80034f4:	2000083c 	.word	0x2000083c
 80034f8:	20000948 	.word	0x20000948
 80034fc:	20000958 	.word	0x20000958
 8003500:	20000944 	.word	0x20000944
 8003504:	20000840 	.word	0x20000840
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <vTaskDelay+0x60>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <vTaskDelay+0x30>
	__asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	60bb      	str	r3, [r7, #8]
}
 8003538:	bf00      	nop
 800353a:	e7fe      	b.n	800353a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800353c:	f000 f884 	bl	8003648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003540:	2100      	movs	r1, #0
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fb28 	bl	8003b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003548:	f000 f88c 	bl	8003664 <xTaskResumeAll>
 800354c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <vTaskDelay+0x64>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000964 	.word	0x20000964
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003582:	463a      	mov	r2, r7
 8003584:	1d39      	adds	r1, r7, #4
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	4618      	mov	r0, r3
 800358c:	f7fc fde0 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003590:	6839      	ldr	r1, [r7, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	9202      	str	r2, [sp, #8]
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	2300      	movs	r3, #0
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2300      	movs	r3, #0
 80035a0:	460a      	mov	r2, r1
 80035a2:	4921      	ldr	r1, [pc, #132]	; (8003628 <vTaskStartScheduler+0xb4>)
 80035a4:	4821      	ldr	r0, [pc, #132]	; (800362c <vTaskStartScheduler+0xb8>)
 80035a6:	f7ff fe10 	bl	80031ca <xTaskCreateStatic>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4a20      	ldr	r2, [pc, #128]	; (8003630 <vTaskStartScheduler+0xbc>)
 80035ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035b0:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <vTaskStartScheduler+0xbc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035b8:	2301      	movs	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e001      	b.n	80035c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d11b      	bne.n	8003600 <vTaskStartScheduler+0x8c>
	__asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	613b      	str	r3, [r7, #16]
}
 80035da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035dc:	4b15      	ldr	r3, [pc, #84]	; (8003634 <vTaskStartScheduler+0xc0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	334c      	adds	r3, #76	; 0x4c
 80035e2:	4a15      	ldr	r2, [pc, #84]	; (8003638 <vTaskStartScheduler+0xc4>)
 80035e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <vTaskStartScheduler+0xc8>)
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <vTaskStartScheduler+0xcc>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <vTaskStartScheduler+0xd0>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035fa:	f000 fbb5 	bl	8003d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035fe:	e00e      	b.n	800361e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d10a      	bne.n	800361e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60fb      	str	r3, [r7, #12]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <vTaskStartScheduler+0xa8>
}
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	08004f58 	.word	0x08004f58
 800362c:	080039dd 	.word	0x080039dd
 8003630:	20000960 	.word	0x20000960
 8003634:	2000083c 	.word	0x2000083c
 8003638:	20000018 	.word	0x20000018
 800363c:	2000095c 	.word	0x2000095c
 8003640:	20000948 	.word	0x20000948
 8003644:	20000940 	.word	0x20000940

08003648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <vTaskSuspendAll+0x18>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	4a03      	ldr	r2, [pc, #12]	; (8003660 <vTaskSuspendAll+0x18>)
 8003654:	6013      	str	r3, [r2, #0]
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000964 	.word	0x20000964

08003664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003672:	4b41      	ldr	r3, [pc, #260]	; (8003778 <xTaskResumeAll+0x114>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <xTaskResumeAll+0x2c>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	603b      	str	r3, [r7, #0]
}
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003690:	f000 fbdc 	bl	8003e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003694:	4b38      	ldr	r3, [pc, #224]	; (8003778 <xTaskResumeAll+0x114>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	4a37      	ldr	r2, [pc, #220]	; (8003778 <xTaskResumeAll+0x114>)
 800369c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800369e:	4b36      	ldr	r3, [pc, #216]	; (8003778 <xTaskResumeAll+0x114>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d161      	bne.n	800376a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036a6:	4b35      	ldr	r3, [pc, #212]	; (800377c <xTaskResumeAll+0x118>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d05d      	beq.n	800376a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ae:	e02e      	b.n	800370e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036b0:	4b33      	ldr	r3, [pc, #204]	; (8003780 <xTaskResumeAll+0x11c>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3318      	adds	r3, #24
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fd5b 	bl	8003178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fd56 	bl	8003178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	2201      	movs	r2, #1
 80036d2:	409a      	lsls	r2, r3
 80036d4:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <xTaskResumeAll+0x120>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4313      	orrs	r3, r2
 80036da:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <xTaskResumeAll+0x120>)
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4a27      	ldr	r2, [pc, #156]	; (8003788 <xTaskResumeAll+0x124>)
 80036ec:	441a      	add	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f7ff fce4 	bl	80030c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fe:	4b23      	ldr	r3, [pc, #140]	; (800378c <xTaskResumeAll+0x128>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	429a      	cmp	r2, r3
 8003706:	d302      	bcc.n	800370e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <xTaskResumeAll+0x12c>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <xTaskResumeAll+0x11c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1cc      	bne.n	80036b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800371c:	f000 fa18 	bl	8003b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <xTaskResumeAll+0x130>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d010      	beq.n	800374e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800372c:	f000 f836 	bl	800379c <xTaskIncrementTick>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <xTaskResumeAll+0x12c>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f1      	bne.n	800372c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <xTaskResumeAll+0x130>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <xTaskResumeAll+0x12c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003756:	2301      	movs	r3, #1
 8003758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <xTaskResumeAll+0x134>)
 800375c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800376a:	f000 fb9f 	bl	8003eac <vPortExitCritical>

	return xAlreadyYielded;
 800376e:	68bb      	ldr	r3, [r7, #8]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000964 	.word	0x20000964
 800377c:	2000093c 	.word	0x2000093c
 8003780:	200008fc 	.word	0x200008fc
 8003784:	20000944 	.word	0x20000944
 8003788:	20000840 	.word	0x20000840
 800378c:	2000083c 	.word	0x2000083c
 8003790:	20000950 	.word	0x20000950
 8003794:	2000094c 	.word	0x2000094c
 8003798:	e000ed04 	.word	0xe000ed04

0800379c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a6:	4b51      	ldr	r3, [pc, #324]	; (80038ec <xTaskIncrementTick+0x150>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 808d 	bne.w	80038ca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <xTaskIncrementTick+0x154>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037b8:	4a4d      	ldr	r2, [pc, #308]	; (80038f0 <xTaskIncrementTick+0x154>)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d120      	bne.n	8003806 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037c4:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <xTaskIncrementTick+0x158>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	603b      	str	r3, [r7, #0]
}
 80037e0:	bf00      	nop
 80037e2:	e7fe      	b.n	80037e2 <xTaskIncrementTick+0x46>
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <xTaskIncrementTick+0x158>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <xTaskIncrementTick+0x15c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a41      	ldr	r2, [pc, #260]	; (80038f4 <xTaskIncrementTick+0x158>)
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4a41      	ldr	r2, [pc, #260]	; (80038f8 <xTaskIncrementTick+0x15c>)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b40      	ldr	r3, [pc, #256]	; (80038fc <xTaskIncrementTick+0x160>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	4a3f      	ldr	r2, [pc, #252]	; (80038fc <xTaskIncrementTick+0x160>)
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	f000 f9a5 	bl	8003b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003806:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <xTaskIncrementTick+0x164>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d34d      	bcc.n	80038ac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003810:	4b38      	ldr	r3, [pc, #224]	; (80038f4 <xTaskIncrementTick+0x158>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <xTaskIncrementTick+0x82>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <xTaskIncrementTick+0x84>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003824:	4b36      	ldr	r3, [pc, #216]	; (8003900 <xTaskIncrementTick+0x164>)
 8003826:	f04f 32ff 	mov.w	r2, #4294967295
 800382a:	601a      	str	r2, [r3, #0]
					break;
 800382c:	e03e      	b.n	80038ac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800382e:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <xTaskIncrementTick+0x158>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d203      	bcs.n	800384e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003846:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <xTaskIncrementTick+0x164>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6013      	str	r3, [r2, #0]
						break;
 800384c:	e02e      	b.n	80038ac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3304      	adds	r3, #4
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fc90 	bl	8003178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	3318      	adds	r3, #24
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fc87 	bl	8003178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	2201      	movs	r2, #1
 8003870:	409a      	lsls	r2, r3
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <xTaskIncrementTick+0x168>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <xTaskIncrementTick+0x168>)
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <xTaskIncrementTick+0x16c>)
 800388a:	441a      	add	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f7ff fc15 	bl	80030c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <xTaskIncrementTick+0x170>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3b4      	bcc.n	8003810 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038aa:	e7b1      	b.n	8003810 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <xTaskIncrementTick+0x170>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b2:	4915      	ldr	r1, [pc, #84]	; (8003908 <xTaskIncrementTick+0x16c>)
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d907      	bls.n	80038d4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e004      	b.n	80038d4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <xTaskIncrementTick+0x174>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	4a0f      	ldr	r2, [pc, #60]	; (8003910 <xTaskIncrementTick+0x174>)
 80038d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <xTaskIncrementTick+0x178>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80038dc:	2301      	movs	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038e0:	697b      	ldr	r3, [r7, #20]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000964 	.word	0x20000964
 80038f0:	20000940 	.word	0x20000940
 80038f4:	200008f4 	.word	0x200008f4
 80038f8:	200008f8 	.word	0x200008f8
 80038fc:	20000954 	.word	0x20000954
 8003900:	2000095c 	.word	0x2000095c
 8003904:	20000944 	.word	0x20000944
 8003908:	20000840 	.word	0x20000840
 800390c:	2000083c 	.word	0x2000083c
 8003910:	2000094c 	.word	0x2000094c
 8003914:	20000950 	.word	0x20000950

08003918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800391e:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <vTaskSwitchContext+0xac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003926:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <vTaskSwitchContext+0xb0>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800392c:	e044      	b.n	80039b8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <vTaskSwitchContext+0xb0>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <vTaskSwitchContext+0xb4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003942:	7afb      	ldrb	r3, [r7, #11]
 8003944:	f1c3 031f 	rsb	r3, r3, #31
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	4921      	ldr	r1, [pc, #132]	; (80039d0 <vTaskSwitchContext+0xb8>)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <vTaskSwitchContext+0x5c>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	607b      	str	r3, [r7, #4]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <vTaskSwitchContext+0x5a>
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <vTaskSwitchContext+0xb8>)
 8003980:	4413      	add	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3308      	adds	r3, #8
 8003996:	429a      	cmp	r2, r3
 8003998:	d104      	bne.n	80039a4 <vTaskSwitchContext+0x8c>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <vTaskSwitchContext+0xbc>)
 80039ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <vTaskSwitchContext+0xbc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	334c      	adds	r3, #76	; 0x4c
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <vTaskSwitchContext+0xc0>)
 80039b6:	6013      	str	r3, [r2, #0]
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000964 	.word	0x20000964
 80039c8:	20000950 	.word	0x20000950
 80039cc:	20000944 	.word	0x20000944
 80039d0:	20000840 	.word	0x20000840
 80039d4:	2000083c 	.word	0x2000083c
 80039d8:	20000018 	.word	0x20000018

080039dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039e4:	f000 f852 	bl	8003a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <prvIdleTask+0x28>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d9f9      	bls.n	80039e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <prvIdleTask+0x2c>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a00:	e7f0      	b.n	80039e4 <prvIdleTask+0x8>
 8003a02:	bf00      	nop
 8003a04:	20000840 	.word	0x20000840
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	e00c      	b.n	8003a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <prvInitialiseTaskLists+0x60>)
 8003a24:	4413      	add	r3, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fb20 	bl	800306c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d9ef      	bls.n	8003a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a3a:	f7ff fb17 	bl	800306c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a3e:	480d      	ldr	r0, [pc, #52]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a40:	f7ff fb14 	bl	800306c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a44:	480c      	ldr	r0, [pc, #48]	; (8003a78 <prvInitialiseTaskLists+0x6c>)
 8003a46:	f7ff fb11 	bl	800306c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a4a:	480c      	ldr	r0, [pc, #48]	; (8003a7c <prvInitialiseTaskLists+0x70>)
 8003a4c:	f7ff fb0e 	bl	800306c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <prvInitialiseTaskLists+0x74>)
 8003a52:	f7ff fb0b 	bl	800306c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <prvInitialiseTaskLists+0x78>)
 8003a58:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <prvInitialiseTaskLists+0x7c>)
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000840 	.word	0x20000840
 8003a70:	200008cc 	.word	0x200008cc
 8003a74:	200008e0 	.word	0x200008e0
 8003a78:	200008fc 	.word	0x200008fc
 8003a7c:	20000910 	.word	0x20000910
 8003a80:	20000928 	.word	0x20000928
 8003a84:	200008f4 	.word	0x200008f4
 8003a88:	200008f8 	.word	0x200008f8

08003a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a92:	e019      	b.n	8003ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a94:	f000 f9da 	bl	8003e4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <prvCheckTasksWaitingTermination+0x50>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fb67 	bl	8003178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003abe:	f000 f9f5 	bl	8003eac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f810 	bl	8003ae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e1      	bne.n	8003a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000910 	.word	0x20000910
 8003ae0:	2000093c 	.word	0x2000093c
 8003ae4:	20000924 	.word	0x20000924

08003ae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	334c      	adds	r3, #76	; 0x4c
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fe87 	bl	8004808 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fb25 	bl	8004158 <vPortFree>
				vPortFree( pxTCB );
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fb22 	bl	8004158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b14:	e018      	b.n	8003b48 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d103      	bne.n	8003b28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb19 	bl	8004158 <vPortFree>
	}
 8003b26:	e00f      	b.n	8003b48 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d00a      	beq.n	8003b48 <prvDeleteTCB+0x60>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	60fb      	str	r3, [r7, #12]
}
 8003b44:	bf00      	nop
 8003b46:	e7fe      	b.n	8003b46 <prvDeleteTCB+0x5e>
	}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <prvResetNextTaskUnblockTime+0x40>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <prvResetNextTaskUnblockTime+0x14>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <prvResetNextTaskUnblockTime+0x16>
 8003b64:	2300      	movs	r3, #0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <prvResetNextTaskUnblockTime+0x44>)
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b72:	e008      	b.n	8003b86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <prvResetNextTaskUnblockTime+0x40>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <prvResetNextTaskUnblockTime+0x44>)
 8003b84:	6013      	str	r3, [r2, #0]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	200008f4 	.word	0x200008f4
 8003b94:	2000095c 	.word	0x2000095c

08003b98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ba2:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ba8:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fae2 	bl	8003178 <uxListRemove>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	4b21      	ldr	r3, [pc, #132]	; (8003c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	4a20      	ldr	r2, [pc, #128]	; (8003c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d10a      	bne.n	8003bf0 <prvAddCurrentTaskToDelayedList+0x58>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4619      	mov	r1, r3
 8003be8:	481a      	ldr	r0, [pc, #104]	; (8003c54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bea:	f7ff fa6a 	bl	80030c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bee:	e026      	b.n	8003c3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d209      	bcs.n	8003c1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7ff fa77 	bl	8003108 <vListInsert>
}
 8003c1a:	e010      	b.n	8003c3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f7ff fa6d 	bl	8003108 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d202      	bcs.n	8003c3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c38:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6013      	str	r3, [r2, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000940 	.word	0x20000940
 8003c4c:	2000083c 	.word	0x2000083c
 8003c50:	20000944 	.word	0x20000944
 8003c54:	20000928 	.word	0x20000928
 8003c58:	200008f8 	.word	0x200008f8
 8003c5c:	200008f4 	.word	0x200008f4
 8003c60:	2000095c 	.word	0x2000095c

08003c64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3b04      	subs	r3, #4
 8003c74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3b04      	subs	r3, #4
 8003c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0201 	bic.w	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3b04      	subs	r3, #4
 8003c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <pxPortInitialiseStack+0x54>)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b14      	subs	r3, #20
 8003c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3b20      	subs	r3, #32
 8003caa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003cac:	68fb      	ldr	r3, [r7, #12]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	08003cbd 	.word	0x08003cbd

08003cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <prvTaskExitError+0x54>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d00a      	beq.n	8003ce6 <prvTaskExitError+0x2a>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	60fb      	str	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <prvTaskExitError+0x28>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60bb      	str	r3, [r7, #8]
}
 8003cf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cfa:	bf00      	nop
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0fc      	beq.n	8003cfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000014 	.word	0x20000014
	...

08003d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <pxCurrentTCBConst2>)
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	6808      	ldr	r0, [r1, #0]
 8003d26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d2a:	f380 8809 	msr	PSP, r0
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8811 	msr	BASEPRI, r0
 8003d3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003d3e:	4770      	bx	lr

08003d40 <pxCurrentTCBConst2>:
 8003d40:	2000083c 	.word	0x2000083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop

08003d48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d48:	4806      	ldr	r0, [pc, #24]	; (8003d64 <prvPortStartFirstTask+0x1c>)
 8003d4a:	6800      	ldr	r0, [r0, #0]
 8003d4c:	6800      	ldr	r0, [r0, #0]
 8003d4e:	f380 8808 	msr	MSP, r0
 8003d52:	b662      	cpsie	i
 8003d54:	b661      	cpsie	f
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	df00      	svc	0
 8003d60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d62:	bf00      	nop
 8003d64:	e000ed08 	.word	0xe000ed08

08003d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d6e:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <xPortStartScheduler+0xd0>)
 8003d70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	22ff      	movs	r2, #255	; 0xff
 8003d7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <xPortStartScheduler+0xd4>)
 8003d94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003d98:	2207      	movs	r2, #7
 8003d9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d9c:	e009      	b.n	8003db2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003d9e:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003da6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d0ef      	beq.n	8003d9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f1c3 0307 	rsb	r3, r3, #7
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d00a      	beq.n	8003de0 <xPortStartScheduler+0x78>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60bb      	str	r3, [r7, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003de0:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003de8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003df2:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003df4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <xPortStartScheduler+0xdc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <xPortStartScheduler+0xdc>)
 8003e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <xPortStartScheduler+0xdc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <xPortStartScheduler+0xdc>)
 8003e10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e16:	f000 f8b9 	bl	8003f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <xPortStartScheduler+0xe0>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e20:	f7ff ff92 	bl	8003d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e24:	f7ff fd78 	bl	8003918 <vTaskSwitchContext>
	prvTaskExitError();
 8003e28:	f7ff ff48 	bl	8003cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000e400 	.word	0xe000e400
 8003e3c:	20000968 	.word	0x20000968
 8003e40:	2000096c 	.word	0x2000096c
 8003e44:	e000ed20 	.word	0xe000ed20
 8003e48:	20000014 	.word	0x20000014

08003e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	607b      	str	r3, [r7, #4]
}
 8003e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <vPortEnterCritical+0x58>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <vPortEnterCritical+0x58>)
 8003e6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <vPortEnterCritical+0x58>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10f      	bne.n	8003e98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <vPortEnterCritical+0x5c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <vPortEnterCritical+0x4c>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	603b      	str	r3, [r7, #0]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <vPortEnterCritical+0x4a>
	}
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000014 	.word	0x20000014
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <vPortExitCritical+0x4c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <vPortExitCritical+0x24>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	607b      	str	r3, [r7, #4]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <vPortExitCritical+0x4c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <vPortExitCritical+0x4c>)
 8003ed8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <vPortExitCritical+0x4c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <vPortExitCritical+0x42>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003eec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	20000014 	.word	0x20000014
 8003efc:	00000000 	.word	0x00000000

08003f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f00:	f3ef 8009 	mrs	r0, PSP
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <pxCurrentTCBConst>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f10:	6010      	str	r0, [r2, #0]
 8003f12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003f16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f1a:	f380 8811 	msr	BASEPRI, r0
 8003f1e:	f7ff fcfb 	bl	8003918 <vTaskSwitchContext>
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f380 8811 	msr	BASEPRI, r0
 8003f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	6808      	ldr	r0, [r1, #0]
 8003f32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f36:	f380 8809 	msr	PSP, r0
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	4770      	bx	lr

08003f40 <pxCurrentTCBConst>:
 8003f40:	2000083c 	.word	0x2000083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop

08003f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	607b      	str	r3, [r7, #4]
}
 8003f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f62:	f7ff fc1b 	bl	800379c <xTaskIncrementTick>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <SysTick_Handler+0x40>)
 8003f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	2300      	movs	r3, #0
 8003f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f383 8811 	msr	BASEPRI, r3
}
 8003f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <vPortSetupTimerInterrupt+0x30>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <vPortSetupTimerInterrupt+0x34>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <vPortSetupTimerInterrupt+0x38>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <vPortSetupTimerInterrupt+0x3c>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <vPortSetupTimerInterrupt+0x40>)
 8003faa:	3b01      	subs	r3, #1
 8003fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fae:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <vPortSetupTimerInterrupt+0x30>)
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	601a      	str	r2, [r3, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	e000e010 	.word	0xe000e010
 8003fc0:	e000e018 	.word	0xe000e018
 8003fc4:	20000008 	.word	0x20000008
 8003fc8:	10624dd3 	.word	0x10624dd3
 8003fcc:	e000e014 	.word	0xe000e014

08003fd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003fdc:	f7ff fb34 	bl	8003648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003fe0:	4b58      	ldr	r3, [pc, #352]	; (8004144 <pvPortMalloc+0x174>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003fe8:	f000 f910 	bl	800420c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fec:	4b56      	ldr	r3, [pc, #344]	; (8004148 <pvPortMalloc+0x178>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 808e 	bne.w	8004116 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01d      	beq.n	800403c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004000:	2208      	movs	r2, #8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	2b00      	cmp	r3, #0
 8004010:	d014      	beq.n	800403c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f023 0307 	bic.w	r3, r3, #7
 8004018:	3308      	adds	r3, #8
 800401a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <pvPortMalloc+0x6c>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	617b      	str	r3, [r7, #20]
}
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d069      	beq.n	8004116 <pvPortMalloc+0x146>
 8004042:	4b42      	ldr	r3, [pc, #264]	; (800414c <pvPortMalloc+0x17c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	429a      	cmp	r2, r3
 800404a:	d864      	bhi.n	8004116 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800404c:	4b40      	ldr	r3, [pc, #256]	; (8004150 <pvPortMalloc+0x180>)
 800404e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004050:	4b3f      	ldr	r3, [pc, #252]	; (8004150 <pvPortMalloc+0x180>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004056:	e004      	b.n	8004062 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	d903      	bls.n	8004074 <pvPortMalloc+0xa4>
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f1      	bne.n	8004058 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004074:	4b33      	ldr	r3, [pc, #204]	; (8004144 <pvPortMalloc+0x174>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407a:	429a      	cmp	r2, r3
 800407c:	d04b      	beq.n	8004116 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2208      	movs	r2, #8
 8004084:	4413      	add	r3, r2
 8004086:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1ad2      	subs	r2, r2, r3
 8004098:	2308      	movs	r3, #8
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	429a      	cmp	r2, r3
 800409e:	d91f      	bls.n	80040e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <pvPortMalloc+0xf8>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	613b      	str	r3, [r7, #16]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1ad2      	subs	r2, r2, r3
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040da:	69b8      	ldr	r0, [r7, #24]
 80040dc:	f000 f8f8 	bl	80042d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040e0:	4b1a      	ldr	r3, [pc, #104]	; (800414c <pvPortMalloc+0x17c>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	4a18      	ldr	r2, [pc, #96]	; (800414c <pvPortMalloc+0x17c>)
 80040ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040ee:	4b17      	ldr	r3, [pc, #92]	; (800414c <pvPortMalloc+0x17c>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b18      	ldr	r3, [pc, #96]	; (8004154 <pvPortMalloc+0x184>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d203      	bcs.n	8004102 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <pvPortMalloc+0x17c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a15      	ldr	r2, [pc, #84]	; (8004154 <pvPortMalloc+0x184>)
 8004100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <pvPortMalloc+0x178>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	431a      	orrs	r2, r3
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004116:	f7ff faa5 	bl	8003664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <pvPortMalloc+0x16a>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60fb      	str	r3, [r7, #12]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <pvPortMalloc+0x168>
	return pvReturn;
 800413a:	69fb      	ldr	r3, [r7, #28]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3728      	adds	r7, #40	; 0x28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20001578 	.word	0x20001578
 8004148:	20001584 	.word	0x20001584
 800414c:	2000157c 	.word	0x2000157c
 8004150:	20001570 	.word	0x20001570
 8004154:	20001580 	.word	0x20001580

08004158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d048      	beq.n	80041fc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800416a:	2308      	movs	r3, #8
 800416c:	425b      	negs	r3, r3
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4413      	add	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <vPortFree+0xac>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <vPortFree+0x44>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60fb      	str	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <vPortFree+0x62>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60bb      	str	r3, [r7, #8]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <vPortFree+0xac>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d019      	beq.n	80041fc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d115      	bne.n	80041fc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <vPortFree+0xac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	43db      	mvns	r3, r3
 80041da:	401a      	ands	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80041e0:	f7ff fa32 	bl	8003648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <vPortFree+0xb0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4413      	add	r3, r2
 80041ee:	4a06      	ldr	r2, [pc, #24]	; (8004208 <vPortFree+0xb0>)
 80041f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041f2:	6938      	ldr	r0, [r7, #16]
 80041f4:	f000 f86c 	bl	80042d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80041f8:	f7ff fa34 	bl	8003664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80041fc:	bf00      	nop
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20001584 	.word	0x20001584
 8004208:	2000157c 	.word	0x2000157c

0800420c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004212:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004216:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004218:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <prvHeapInit+0xac>)
 800421a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00c      	beq.n	8004240 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3307      	adds	r3, #7
 800422a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0307 	bic.w	r3, r3, #7
 8004232:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <prvHeapInit+0xac>)
 800423c:	4413      	add	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004244:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <prvHeapInit+0xb0>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <prvHeapInit+0xb0>)
 800424c:	2200      	movs	r2, #0
 800424e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	4413      	add	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004258:	2208      	movs	r2, #8
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0307 	bic.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <prvHeapInit+0xb4>)
 800426c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800426e:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <prvHeapInit+0xb4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <prvHeapInit+0xb4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	1ad2      	subs	r2, r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <prvHeapInit+0xb4>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <prvHeapInit+0xb8>)
 800429a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <prvHeapInit+0xbc>)
 80042a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <prvHeapInit+0xc0>)
 80042a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042aa:	601a      	str	r2, [r3, #0]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000970 	.word	0x20000970
 80042bc:	20001570 	.word	0x20001570
 80042c0:	20001578 	.word	0x20001578
 80042c4:	20001580 	.word	0x20001580
 80042c8:	2000157c 	.word	0x2000157c
 80042cc:	20001584 	.word	0x20001584

080042d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042d8:	4b27      	ldr	r3, [pc, #156]	; (8004378 <prvInsertBlockIntoFreeList+0xa8>)
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e002      	b.n	80042e4 <prvInsertBlockIntoFreeList+0x14>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d8f7      	bhi.n	80042de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4413      	add	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d108      	bne.n	8004312 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	441a      	add	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	441a      	add	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d118      	bne.n	8004358 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b14      	ldr	r3, [pc, #80]	; (800437c <prvInsertBlockIntoFreeList+0xac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d00d      	beq.n	800434e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	441a      	add	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e008      	b.n	8004360 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <prvInsertBlockIntoFreeList+0xac>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e003      	b.n	8004360 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d002      	beq.n	800436e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	20001570 	.word	0x20001570
 800437c:	20001578 	.word	0x20001578

08004380 <__errno>:
 8004380:	4b01      	ldr	r3, [pc, #4]	; (8004388 <__errno+0x8>)
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000018 	.word	0x20000018

0800438c <std>:
 800438c:	2300      	movs	r3, #0
 800438e:	b510      	push	{r4, lr}
 8004390:	4604      	mov	r4, r0
 8004392:	e9c0 3300 	strd	r3, r3, [r0]
 8004396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800439a:	6083      	str	r3, [r0, #8]
 800439c:	8181      	strh	r1, [r0, #12]
 800439e:	6643      	str	r3, [r0, #100]	; 0x64
 80043a0:	81c2      	strh	r2, [r0, #14]
 80043a2:	6183      	str	r3, [r0, #24]
 80043a4:	4619      	mov	r1, r3
 80043a6:	2208      	movs	r2, #8
 80043a8:	305c      	adds	r0, #92	; 0x5c
 80043aa:	f000 f90c 	bl	80045c6 <memset>
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <std+0x38>)
 80043b0:	6224      	str	r4, [r4, #32]
 80043b2:	6263      	str	r3, [r4, #36]	; 0x24
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <std+0x3c>)
 80043b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <std+0x40>)
 80043ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <std+0x44>)
 80043be:	6323      	str	r3, [r4, #48]	; 0x30
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	bf00      	nop
 80043c4:	080048e1 	.word	0x080048e1
 80043c8:	08004903 	.word	0x08004903
 80043cc:	0800493b 	.word	0x0800493b
 80043d0:	0800495f 	.word	0x0800495f

080043d4 <_cleanup_r>:
 80043d4:	4901      	ldr	r1, [pc, #4]	; (80043dc <_cleanup_r+0x8>)
 80043d6:	f000 b8af 	b.w	8004538 <_fwalk_reent>
 80043da:	bf00      	nop
 80043dc:	08004c31 	.word	0x08004c31

080043e0 <__sfmoreglue>:
 80043e0:	2268      	movs	r2, #104	; 0x68
 80043e2:	b570      	push	{r4, r5, r6, lr}
 80043e4:	1e4d      	subs	r5, r1, #1
 80043e6:	4355      	muls	r5, r2
 80043e8:	460e      	mov	r6, r1
 80043ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043ee:	f000 f913 	bl	8004618 <_malloc_r>
 80043f2:	4604      	mov	r4, r0
 80043f4:	b140      	cbz	r0, 8004408 <__sfmoreglue+0x28>
 80043f6:	2100      	movs	r1, #0
 80043f8:	e9c0 1600 	strd	r1, r6, [r0]
 80043fc:	300c      	adds	r0, #12
 80043fe:	60a0      	str	r0, [r4, #8]
 8004400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004404:	f000 f8df 	bl	80045c6 <memset>
 8004408:	4620      	mov	r0, r4
 800440a:	bd70      	pop	{r4, r5, r6, pc}

0800440c <__sfp_lock_acquire>:
 800440c:	4801      	ldr	r0, [pc, #4]	; (8004414 <__sfp_lock_acquire+0x8>)
 800440e:	f000 b8d8 	b.w	80045c2 <__retarget_lock_acquire_recursive>
 8004412:	bf00      	nop
 8004414:	20001589 	.word	0x20001589

08004418 <__sfp_lock_release>:
 8004418:	4801      	ldr	r0, [pc, #4]	; (8004420 <__sfp_lock_release+0x8>)
 800441a:	f000 b8d3 	b.w	80045c4 <__retarget_lock_release_recursive>
 800441e:	bf00      	nop
 8004420:	20001589 	.word	0x20001589

08004424 <__sinit_lock_acquire>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__sinit_lock_acquire+0x8>)
 8004426:	f000 b8cc 	b.w	80045c2 <__retarget_lock_acquire_recursive>
 800442a:	bf00      	nop
 800442c:	2000158a 	.word	0x2000158a

08004430 <__sinit_lock_release>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__sinit_lock_release+0x8>)
 8004432:	f000 b8c7 	b.w	80045c4 <__retarget_lock_release_recursive>
 8004436:	bf00      	nop
 8004438:	2000158a 	.word	0x2000158a

0800443c <__sinit>:
 800443c:	b510      	push	{r4, lr}
 800443e:	4604      	mov	r4, r0
 8004440:	f7ff fff0 	bl	8004424 <__sinit_lock_acquire>
 8004444:	69a3      	ldr	r3, [r4, #24]
 8004446:	b11b      	cbz	r3, 8004450 <__sinit+0x14>
 8004448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800444c:	f7ff bff0 	b.w	8004430 <__sinit_lock_release>
 8004450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004454:	6523      	str	r3, [r4, #80]	; 0x50
 8004456:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <__sinit+0x68>)
 8004458:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <__sinit+0x6c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	62a2      	str	r2, [r4, #40]	; 0x28
 800445e:	42a3      	cmp	r3, r4
 8004460:	bf08      	it	eq
 8004462:	2301      	moveq	r3, #1
 8004464:	4620      	mov	r0, r4
 8004466:	bf08      	it	eq
 8004468:	61a3      	streq	r3, [r4, #24]
 800446a:	f000 f81f 	bl	80044ac <__sfp>
 800446e:	6060      	str	r0, [r4, #4]
 8004470:	4620      	mov	r0, r4
 8004472:	f000 f81b 	bl	80044ac <__sfp>
 8004476:	60a0      	str	r0, [r4, #8]
 8004478:	4620      	mov	r0, r4
 800447a:	f000 f817 	bl	80044ac <__sfp>
 800447e:	2200      	movs	r2, #0
 8004480:	2104      	movs	r1, #4
 8004482:	60e0      	str	r0, [r4, #12]
 8004484:	6860      	ldr	r0, [r4, #4]
 8004486:	f7ff ff81 	bl	800438c <std>
 800448a:	2201      	movs	r2, #1
 800448c:	2109      	movs	r1, #9
 800448e:	68a0      	ldr	r0, [r4, #8]
 8004490:	f7ff ff7c 	bl	800438c <std>
 8004494:	2202      	movs	r2, #2
 8004496:	2112      	movs	r1, #18
 8004498:	68e0      	ldr	r0, [r4, #12]
 800449a:	f7ff ff77 	bl	800438c <std>
 800449e:	2301      	movs	r3, #1
 80044a0:	61a3      	str	r3, [r4, #24]
 80044a2:	e7d1      	b.n	8004448 <__sinit+0xc>
 80044a4:	08005744 	.word	0x08005744
 80044a8:	080043d5 	.word	0x080043d5

080044ac <__sfp>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	4607      	mov	r7, r0
 80044b0:	f7ff ffac 	bl	800440c <__sfp_lock_acquire>
 80044b4:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <__sfp+0x84>)
 80044b6:	681e      	ldr	r6, [r3, #0]
 80044b8:	69b3      	ldr	r3, [r6, #24]
 80044ba:	b913      	cbnz	r3, 80044c2 <__sfp+0x16>
 80044bc:	4630      	mov	r0, r6
 80044be:	f7ff ffbd 	bl	800443c <__sinit>
 80044c2:	3648      	adds	r6, #72	; 0x48
 80044c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	d503      	bpl.n	80044d4 <__sfp+0x28>
 80044cc:	6833      	ldr	r3, [r6, #0]
 80044ce:	b30b      	cbz	r3, 8004514 <__sfp+0x68>
 80044d0:	6836      	ldr	r6, [r6, #0]
 80044d2:	e7f7      	b.n	80044c4 <__sfp+0x18>
 80044d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044d8:	b9d5      	cbnz	r5, 8004510 <__sfp+0x64>
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <__sfp+0x88>)
 80044dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044e0:	60e3      	str	r3, [r4, #12]
 80044e2:	6665      	str	r5, [r4, #100]	; 0x64
 80044e4:	f000 f86c 	bl	80045c0 <__retarget_lock_init_recursive>
 80044e8:	f7ff ff96 	bl	8004418 <__sfp_lock_release>
 80044ec:	2208      	movs	r2, #8
 80044ee:	4629      	mov	r1, r5
 80044f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044f8:	6025      	str	r5, [r4, #0]
 80044fa:	61a5      	str	r5, [r4, #24]
 80044fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004500:	f000 f861 	bl	80045c6 <memset>
 8004504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800450c:	4620      	mov	r0, r4
 800450e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004510:	3468      	adds	r4, #104	; 0x68
 8004512:	e7d9      	b.n	80044c8 <__sfp+0x1c>
 8004514:	2104      	movs	r1, #4
 8004516:	4638      	mov	r0, r7
 8004518:	f7ff ff62 	bl	80043e0 <__sfmoreglue>
 800451c:	4604      	mov	r4, r0
 800451e:	6030      	str	r0, [r6, #0]
 8004520:	2800      	cmp	r0, #0
 8004522:	d1d5      	bne.n	80044d0 <__sfp+0x24>
 8004524:	f7ff ff78 	bl	8004418 <__sfp_lock_release>
 8004528:	230c      	movs	r3, #12
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	e7ee      	b.n	800450c <__sfp+0x60>
 800452e:	bf00      	nop
 8004530:	08005744 	.word	0x08005744
 8004534:	ffff0001 	.word	0xffff0001

08004538 <_fwalk_reent>:
 8004538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800453c:	4606      	mov	r6, r0
 800453e:	4688      	mov	r8, r1
 8004540:	2700      	movs	r7, #0
 8004542:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800454a:	f1b9 0901 	subs.w	r9, r9, #1
 800454e:	d505      	bpl.n	800455c <_fwalk_reent+0x24>
 8004550:	6824      	ldr	r4, [r4, #0]
 8004552:	2c00      	cmp	r4, #0
 8004554:	d1f7      	bne.n	8004546 <_fwalk_reent+0xe>
 8004556:	4638      	mov	r0, r7
 8004558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800455c:	89ab      	ldrh	r3, [r5, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d907      	bls.n	8004572 <_fwalk_reent+0x3a>
 8004562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004566:	3301      	adds	r3, #1
 8004568:	d003      	beq.n	8004572 <_fwalk_reent+0x3a>
 800456a:	4629      	mov	r1, r5
 800456c:	4630      	mov	r0, r6
 800456e:	47c0      	blx	r8
 8004570:	4307      	orrs	r7, r0
 8004572:	3568      	adds	r5, #104	; 0x68
 8004574:	e7e9      	b.n	800454a <_fwalk_reent+0x12>
	...

08004578 <__libc_init_array>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	2600      	movs	r6, #0
 800457c:	4d0c      	ldr	r5, [pc, #48]	; (80045b0 <__libc_init_array+0x38>)
 800457e:	4c0d      	ldr	r4, [pc, #52]	; (80045b4 <__libc_init_array+0x3c>)
 8004580:	1b64      	subs	r4, r4, r5
 8004582:	10a4      	asrs	r4, r4, #2
 8004584:	42a6      	cmp	r6, r4
 8004586:	d109      	bne.n	800459c <__libc_init_array+0x24>
 8004588:	f000 fc8e 	bl	8004ea8 <_init>
 800458c:	2600      	movs	r6, #0
 800458e:	4d0a      	ldr	r5, [pc, #40]	; (80045b8 <__libc_init_array+0x40>)
 8004590:	4c0a      	ldr	r4, [pc, #40]	; (80045bc <__libc_init_array+0x44>)
 8004592:	1b64      	subs	r4, r4, r5
 8004594:	10a4      	asrs	r4, r4, #2
 8004596:	42a6      	cmp	r6, r4
 8004598:	d105      	bne.n	80045a6 <__libc_init_array+0x2e>
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a0:	4798      	blx	r3
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7ee      	b.n	8004584 <__libc_init_array+0xc>
 80045a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045aa:	4798      	blx	r3
 80045ac:	3601      	adds	r6, #1
 80045ae:	e7f2      	b.n	8004596 <__libc_init_array+0x1e>
 80045b0:	08005748 	.word	0x08005748
 80045b4:	08005748 	.word	0x08005748
 80045b8:	08005748 	.word	0x08005748
 80045bc:	0800574c 	.word	0x0800574c

080045c0 <__retarget_lock_init_recursive>:
 80045c0:	4770      	bx	lr

080045c2 <__retarget_lock_acquire_recursive>:
 80045c2:	4770      	bx	lr

080045c4 <__retarget_lock_release_recursive>:
 80045c4:	4770      	bx	lr

080045c6 <memset>:
 80045c6:	4603      	mov	r3, r0
 80045c8:	4402      	add	r2, r0
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d100      	bne.n	80045d0 <memset+0xa>
 80045ce:	4770      	bx	lr
 80045d0:	f803 1b01 	strb.w	r1, [r3], #1
 80045d4:	e7f9      	b.n	80045ca <memset+0x4>
	...

080045d8 <sbrk_aligned>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	4e0e      	ldr	r6, [pc, #56]	; (8004614 <sbrk_aligned+0x3c>)
 80045dc:	460c      	mov	r4, r1
 80045de:	6831      	ldr	r1, [r6, #0]
 80045e0:	4605      	mov	r5, r0
 80045e2:	b911      	cbnz	r1, 80045ea <sbrk_aligned+0x12>
 80045e4:	f000 f96c 	bl	80048c0 <_sbrk_r>
 80045e8:	6030      	str	r0, [r6, #0]
 80045ea:	4621      	mov	r1, r4
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 f967 	bl	80048c0 <_sbrk_r>
 80045f2:	1c43      	adds	r3, r0, #1
 80045f4:	d00a      	beq.n	800460c <sbrk_aligned+0x34>
 80045f6:	1cc4      	adds	r4, r0, #3
 80045f8:	f024 0403 	bic.w	r4, r4, #3
 80045fc:	42a0      	cmp	r0, r4
 80045fe:	d007      	beq.n	8004610 <sbrk_aligned+0x38>
 8004600:	1a21      	subs	r1, r4, r0
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f95c 	bl	80048c0 <_sbrk_r>
 8004608:	3001      	adds	r0, #1
 800460a:	d101      	bne.n	8004610 <sbrk_aligned+0x38>
 800460c:	f04f 34ff 	mov.w	r4, #4294967295
 8004610:	4620      	mov	r0, r4
 8004612:	bd70      	pop	{r4, r5, r6, pc}
 8004614:	20001590 	.word	0x20001590

08004618 <_malloc_r>:
 8004618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800461c:	1ccd      	adds	r5, r1, #3
 800461e:	f025 0503 	bic.w	r5, r5, #3
 8004622:	3508      	adds	r5, #8
 8004624:	2d0c      	cmp	r5, #12
 8004626:	bf38      	it	cc
 8004628:	250c      	movcc	r5, #12
 800462a:	2d00      	cmp	r5, #0
 800462c:	4607      	mov	r7, r0
 800462e:	db01      	blt.n	8004634 <_malloc_r+0x1c>
 8004630:	42a9      	cmp	r1, r5
 8004632:	d905      	bls.n	8004640 <_malloc_r+0x28>
 8004634:	230c      	movs	r3, #12
 8004636:	2600      	movs	r6, #0
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	4630      	mov	r0, r6
 800463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004640:	4e2e      	ldr	r6, [pc, #184]	; (80046fc <_malloc_r+0xe4>)
 8004642:	f000 fba9 	bl	8004d98 <__malloc_lock>
 8004646:	6833      	ldr	r3, [r6, #0]
 8004648:	461c      	mov	r4, r3
 800464a:	bb34      	cbnz	r4, 800469a <_malloc_r+0x82>
 800464c:	4629      	mov	r1, r5
 800464e:	4638      	mov	r0, r7
 8004650:	f7ff ffc2 	bl	80045d8 <sbrk_aligned>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	4604      	mov	r4, r0
 8004658:	d14d      	bne.n	80046f6 <_malloc_r+0xde>
 800465a:	6834      	ldr	r4, [r6, #0]
 800465c:	4626      	mov	r6, r4
 800465e:	2e00      	cmp	r6, #0
 8004660:	d140      	bne.n	80046e4 <_malloc_r+0xcc>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	4631      	mov	r1, r6
 8004666:	4638      	mov	r0, r7
 8004668:	eb04 0803 	add.w	r8, r4, r3
 800466c:	f000 f928 	bl	80048c0 <_sbrk_r>
 8004670:	4580      	cmp	r8, r0
 8004672:	d13a      	bne.n	80046ea <_malloc_r+0xd2>
 8004674:	6821      	ldr	r1, [r4, #0]
 8004676:	3503      	adds	r5, #3
 8004678:	1a6d      	subs	r5, r5, r1
 800467a:	f025 0503 	bic.w	r5, r5, #3
 800467e:	3508      	adds	r5, #8
 8004680:	2d0c      	cmp	r5, #12
 8004682:	bf38      	it	cc
 8004684:	250c      	movcc	r5, #12
 8004686:	4638      	mov	r0, r7
 8004688:	4629      	mov	r1, r5
 800468a:	f7ff ffa5 	bl	80045d8 <sbrk_aligned>
 800468e:	3001      	adds	r0, #1
 8004690:	d02b      	beq.n	80046ea <_malloc_r+0xd2>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	442b      	add	r3, r5
 8004696:	6023      	str	r3, [r4, #0]
 8004698:	e00e      	b.n	80046b8 <_malloc_r+0xa0>
 800469a:	6822      	ldr	r2, [r4, #0]
 800469c:	1b52      	subs	r2, r2, r5
 800469e:	d41e      	bmi.n	80046de <_malloc_r+0xc6>
 80046a0:	2a0b      	cmp	r2, #11
 80046a2:	d916      	bls.n	80046d2 <_malloc_r+0xba>
 80046a4:	1961      	adds	r1, r4, r5
 80046a6:	42a3      	cmp	r3, r4
 80046a8:	6025      	str	r5, [r4, #0]
 80046aa:	bf18      	it	ne
 80046ac:	6059      	strne	r1, [r3, #4]
 80046ae:	6863      	ldr	r3, [r4, #4]
 80046b0:	bf08      	it	eq
 80046b2:	6031      	streq	r1, [r6, #0]
 80046b4:	5162      	str	r2, [r4, r5]
 80046b6:	604b      	str	r3, [r1, #4]
 80046b8:	4638      	mov	r0, r7
 80046ba:	f104 060b 	add.w	r6, r4, #11
 80046be:	f000 fb71 	bl	8004da4 <__malloc_unlock>
 80046c2:	f026 0607 	bic.w	r6, r6, #7
 80046c6:	1d23      	adds	r3, r4, #4
 80046c8:	1af2      	subs	r2, r6, r3
 80046ca:	d0b6      	beq.n	800463a <_malloc_r+0x22>
 80046cc:	1b9b      	subs	r3, r3, r6
 80046ce:	50a3      	str	r3, [r4, r2]
 80046d0:	e7b3      	b.n	800463a <_malloc_r+0x22>
 80046d2:	6862      	ldr	r2, [r4, #4]
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	bf0c      	ite	eq
 80046d8:	6032      	streq	r2, [r6, #0]
 80046da:	605a      	strne	r2, [r3, #4]
 80046dc:	e7ec      	b.n	80046b8 <_malloc_r+0xa0>
 80046de:	4623      	mov	r3, r4
 80046e0:	6864      	ldr	r4, [r4, #4]
 80046e2:	e7b2      	b.n	800464a <_malloc_r+0x32>
 80046e4:	4634      	mov	r4, r6
 80046e6:	6876      	ldr	r6, [r6, #4]
 80046e8:	e7b9      	b.n	800465e <_malloc_r+0x46>
 80046ea:	230c      	movs	r3, #12
 80046ec:	4638      	mov	r0, r7
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	f000 fb58 	bl	8004da4 <__malloc_unlock>
 80046f4:	e7a1      	b.n	800463a <_malloc_r+0x22>
 80046f6:	6025      	str	r5, [r4, #0]
 80046f8:	e7de      	b.n	80046b8 <_malloc_r+0xa0>
 80046fa:	bf00      	nop
 80046fc:	2000158c 	.word	0x2000158c

08004700 <_puts_r>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	460e      	mov	r6, r1
 8004704:	4605      	mov	r5, r0
 8004706:	b118      	cbz	r0, 8004710 <_puts_r+0x10>
 8004708:	6983      	ldr	r3, [r0, #24]
 800470a:	b90b      	cbnz	r3, 8004710 <_puts_r+0x10>
 800470c:	f7ff fe96 	bl	800443c <__sinit>
 8004710:	69ab      	ldr	r3, [r5, #24]
 8004712:	68ac      	ldr	r4, [r5, #8]
 8004714:	b913      	cbnz	r3, 800471c <_puts_r+0x1c>
 8004716:	4628      	mov	r0, r5
 8004718:	f7ff fe90 	bl	800443c <__sinit>
 800471c:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <_puts_r+0xd0>)
 800471e:	429c      	cmp	r4, r3
 8004720:	d120      	bne.n	8004764 <_puts_r+0x64>
 8004722:	686c      	ldr	r4, [r5, #4]
 8004724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004726:	07db      	lsls	r3, r3, #31
 8004728:	d405      	bmi.n	8004736 <_puts_r+0x36>
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	0598      	lsls	r0, r3, #22
 800472e:	d402      	bmi.n	8004736 <_puts_r+0x36>
 8004730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004732:	f7ff ff46 	bl	80045c2 <__retarget_lock_acquire_recursive>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	0719      	lsls	r1, r3, #28
 800473a:	d51d      	bpl.n	8004778 <_puts_r+0x78>
 800473c:	6923      	ldr	r3, [r4, #16]
 800473e:	b1db      	cbz	r3, 8004778 <_puts_r+0x78>
 8004740:	3e01      	subs	r6, #1
 8004742:	68a3      	ldr	r3, [r4, #8]
 8004744:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004748:	3b01      	subs	r3, #1
 800474a:	60a3      	str	r3, [r4, #8]
 800474c:	bb39      	cbnz	r1, 800479e <_puts_r+0x9e>
 800474e:	2b00      	cmp	r3, #0
 8004750:	da38      	bge.n	80047c4 <_puts_r+0xc4>
 8004752:	4622      	mov	r2, r4
 8004754:	210a      	movs	r1, #10
 8004756:	4628      	mov	r0, r5
 8004758:	f000 f906 	bl	8004968 <__swbuf_r>
 800475c:	3001      	adds	r0, #1
 800475e:	d011      	beq.n	8004784 <_puts_r+0x84>
 8004760:	250a      	movs	r5, #10
 8004762:	e011      	b.n	8004788 <_puts_r+0x88>
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <_puts_r+0xd4>)
 8004766:	429c      	cmp	r4, r3
 8004768:	d101      	bne.n	800476e <_puts_r+0x6e>
 800476a:	68ac      	ldr	r4, [r5, #8]
 800476c:	e7da      	b.n	8004724 <_puts_r+0x24>
 800476e:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <_puts_r+0xd8>)
 8004770:	429c      	cmp	r4, r3
 8004772:	bf08      	it	eq
 8004774:	68ec      	ldreq	r4, [r5, #12]
 8004776:	e7d5      	b.n	8004724 <_puts_r+0x24>
 8004778:	4621      	mov	r1, r4
 800477a:	4628      	mov	r0, r5
 800477c:	f000 f958 	bl	8004a30 <__swsetup_r>
 8004780:	2800      	cmp	r0, #0
 8004782:	d0dd      	beq.n	8004740 <_puts_r+0x40>
 8004784:	f04f 35ff 	mov.w	r5, #4294967295
 8004788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800478a:	07da      	lsls	r2, r3, #31
 800478c:	d405      	bmi.n	800479a <_puts_r+0x9a>
 800478e:	89a3      	ldrh	r3, [r4, #12]
 8004790:	059b      	lsls	r3, r3, #22
 8004792:	d402      	bmi.n	800479a <_puts_r+0x9a>
 8004794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004796:	f7ff ff15 	bl	80045c4 <__retarget_lock_release_recursive>
 800479a:	4628      	mov	r0, r5
 800479c:	bd70      	pop	{r4, r5, r6, pc}
 800479e:	2b00      	cmp	r3, #0
 80047a0:	da04      	bge.n	80047ac <_puts_r+0xac>
 80047a2:	69a2      	ldr	r2, [r4, #24]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	dc06      	bgt.n	80047b6 <_puts_r+0xb6>
 80047a8:	290a      	cmp	r1, #10
 80047aa:	d004      	beq.n	80047b6 <_puts_r+0xb6>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	6022      	str	r2, [r4, #0]
 80047b2:	7019      	strb	r1, [r3, #0]
 80047b4:	e7c5      	b.n	8004742 <_puts_r+0x42>
 80047b6:	4622      	mov	r2, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 f8d5 	bl	8004968 <__swbuf_r>
 80047be:	3001      	adds	r0, #1
 80047c0:	d1bf      	bne.n	8004742 <_puts_r+0x42>
 80047c2:	e7df      	b.n	8004784 <_puts_r+0x84>
 80047c4:	250a      	movs	r5, #10
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	6022      	str	r2, [r4, #0]
 80047cc:	701d      	strb	r5, [r3, #0]
 80047ce:	e7db      	b.n	8004788 <_puts_r+0x88>
 80047d0:	08005704 	.word	0x08005704
 80047d4:	08005724 	.word	0x08005724
 80047d8:	080056e4 	.word	0x080056e4

080047dc <puts>:
 80047dc:	4b02      	ldr	r3, [pc, #8]	; (80047e8 <puts+0xc>)
 80047de:	4601      	mov	r1, r0
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	f7ff bf8d 	b.w	8004700 <_puts_r>
 80047e6:	bf00      	nop
 80047e8:	20000018 	.word	0x20000018

080047ec <cleanup_glue>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	460c      	mov	r4, r1
 80047f0:	6809      	ldr	r1, [r1, #0]
 80047f2:	4605      	mov	r5, r0
 80047f4:	b109      	cbz	r1, 80047fa <cleanup_glue+0xe>
 80047f6:	f7ff fff9 	bl	80047ec <cleanup_glue>
 80047fa:	4621      	mov	r1, r4
 80047fc:	4628      	mov	r0, r5
 80047fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004802:	f000 bad5 	b.w	8004db0 <_free_r>
	...

08004808 <_reclaim_reent>:
 8004808:	4b2c      	ldr	r3, [pc, #176]	; (80048bc <_reclaim_reent+0xb4>)
 800480a:	b570      	push	{r4, r5, r6, lr}
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4604      	mov	r4, r0
 8004810:	4283      	cmp	r3, r0
 8004812:	d051      	beq.n	80048b8 <_reclaim_reent+0xb0>
 8004814:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004816:	b143      	cbz	r3, 800482a <_reclaim_reent+0x22>
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d14a      	bne.n	80048b4 <_reclaim_reent+0xac>
 800481e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	b111      	cbz	r1, 800482a <_reclaim_reent+0x22>
 8004824:	4620      	mov	r0, r4
 8004826:	f000 fac3 	bl	8004db0 <_free_r>
 800482a:	6961      	ldr	r1, [r4, #20]
 800482c:	b111      	cbz	r1, 8004834 <_reclaim_reent+0x2c>
 800482e:	4620      	mov	r0, r4
 8004830:	f000 fabe 	bl	8004db0 <_free_r>
 8004834:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004836:	b111      	cbz	r1, 800483e <_reclaim_reent+0x36>
 8004838:	4620      	mov	r0, r4
 800483a:	f000 fab9 	bl	8004db0 <_free_r>
 800483e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004840:	b111      	cbz	r1, 8004848 <_reclaim_reent+0x40>
 8004842:	4620      	mov	r0, r4
 8004844:	f000 fab4 	bl	8004db0 <_free_r>
 8004848:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800484a:	b111      	cbz	r1, 8004852 <_reclaim_reent+0x4a>
 800484c:	4620      	mov	r0, r4
 800484e:	f000 faaf 	bl	8004db0 <_free_r>
 8004852:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004854:	b111      	cbz	r1, 800485c <_reclaim_reent+0x54>
 8004856:	4620      	mov	r0, r4
 8004858:	f000 faaa 	bl	8004db0 <_free_r>
 800485c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800485e:	b111      	cbz	r1, 8004866 <_reclaim_reent+0x5e>
 8004860:	4620      	mov	r0, r4
 8004862:	f000 faa5 	bl	8004db0 <_free_r>
 8004866:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004868:	b111      	cbz	r1, 8004870 <_reclaim_reent+0x68>
 800486a:	4620      	mov	r0, r4
 800486c:	f000 faa0 	bl	8004db0 <_free_r>
 8004870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004872:	b111      	cbz	r1, 800487a <_reclaim_reent+0x72>
 8004874:	4620      	mov	r0, r4
 8004876:	f000 fa9b 	bl	8004db0 <_free_r>
 800487a:	69a3      	ldr	r3, [r4, #24]
 800487c:	b1e3      	cbz	r3, 80048b8 <_reclaim_reent+0xb0>
 800487e:	4620      	mov	r0, r4
 8004880:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004882:	4798      	blx	r3
 8004884:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004886:	b1b9      	cbz	r1, 80048b8 <_reclaim_reent+0xb0>
 8004888:	4620      	mov	r0, r4
 800488a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800488e:	f7ff bfad 	b.w	80047ec <cleanup_glue>
 8004892:	5949      	ldr	r1, [r1, r5]
 8004894:	b941      	cbnz	r1, 80048a8 <_reclaim_reent+0xa0>
 8004896:	3504      	adds	r5, #4
 8004898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800489a:	2d80      	cmp	r5, #128	; 0x80
 800489c:	68d9      	ldr	r1, [r3, #12]
 800489e:	d1f8      	bne.n	8004892 <_reclaim_reent+0x8a>
 80048a0:	4620      	mov	r0, r4
 80048a2:	f000 fa85 	bl	8004db0 <_free_r>
 80048a6:	e7ba      	b.n	800481e <_reclaim_reent+0x16>
 80048a8:	680e      	ldr	r6, [r1, #0]
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fa80 	bl	8004db0 <_free_r>
 80048b0:	4631      	mov	r1, r6
 80048b2:	e7ef      	b.n	8004894 <_reclaim_reent+0x8c>
 80048b4:	2500      	movs	r5, #0
 80048b6:	e7ef      	b.n	8004898 <_reclaim_reent+0x90>
 80048b8:	bd70      	pop	{r4, r5, r6, pc}
 80048ba:	bf00      	nop
 80048bc:	20000018 	.word	0x20000018

080048c0 <_sbrk_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	2300      	movs	r3, #0
 80048c4:	4d05      	ldr	r5, [pc, #20]	; (80048dc <_sbrk_r+0x1c>)
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	602b      	str	r3, [r5, #0]
 80048cc:	f7fc fad6 	bl	8000e7c <_sbrk>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d102      	bne.n	80048da <_sbrk_r+0x1a>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	b103      	cbz	r3, 80048da <_sbrk_r+0x1a>
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	20001594 	.word	0x20001594

080048e0 <__sread>:
 80048e0:	b510      	push	{r4, lr}
 80048e2:	460c      	mov	r4, r1
 80048e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e8:	f000 faaa 	bl	8004e40 <_read_r>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	bfab      	itete	ge
 80048f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048f2:	89a3      	ldrhlt	r3, [r4, #12]
 80048f4:	181b      	addge	r3, r3, r0
 80048f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048fa:	bfac      	ite	ge
 80048fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80048fe:	81a3      	strhlt	r3, [r4, #12]
 8004900:	bd10      	pop	{r4, pc}

08004902 <__swrite>:
 8004902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004906:	461f      	mov	r7, r3
 8004908:	898b      	ldrh	r3, [r1, #12]
 800490a:	4605      	mov	r5, r0
 800490c:	05db      	lsls	r3, r3, #23
 800490e:	460c      	mov	r4, r1
 8004910:	4616      	mov	r6, r2
 8004912:	d505      	bpl.n	8004920 <__swrite+0x1e>
 8004914:	2302      	movs	r3, #2
 8004916:	2200      	movs	r2, #0
 8004918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491c:	f000 f9c4 	bl	8004ca8 <_lseek_r>
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	4632      	mov	r2, r6
 8004924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004928:	81a3      	strh	r3, [r4, #12]
 800492a:	4628      	mov	r0, r5
 800492c:	463b      	mov	r3, r7
 800492e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004936:	f000 b869 	b.w	8004a0c <_write_r>

0800493a <__sseek>:
 800493a:	b510      	push	{r4, lr}
 800493c:	460c      	mov	r4, r1
 800493e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004942:	f000 f9b1 	bl	8004ca8 <_lseek_r>
 8004946:	1c43      	adds	r3, r0, #1
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	bf15      	itete	ne
 800494c:	6560      	strne	r0, [r4, #84]	; 0x54
 800494e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004956:	81a3      	strheq	r3, [r4, #12]
 8004958:	bf18      	it	ne
 800495a:	81a3      	strhne	r3, [r4, #12]
 800495c:	bd10      	pop	{r4, pc}

0800495e <__sclose>:
 800495e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004962:	f000 b8d3 	b.w	8004b0c <_close_r>
	...

08004968 <__swbuf_r>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	460e      	mov	r6, r1
 800496c:	4614      	mov	r4, r2
 800496e:	4605      	mov	r5, r0
 8004970:	b118      	cbz	r0, 800497a <__swbuf_r+0x12>
 8004972:	6983      	ldr	r3, [r0, #24]
 8004974:	b90b      	cbnz	r3, 800497a <__swbuf_r+0x12>
 8004976:	f7ff fd61 	bl	800443c <__sinit>
 800497a:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <__swbuf_r+0x98>)
 800497c:	429c      	cmp	r4, r3
 800497e:	d12b      	bne.n	80049d8 <__swbuf_r+0x70>
 8004980:	686c      	ldr	r4, [r5, #4]
 8004982:	69a3      	ldr	r3, [r4, #24]
 8004984:	60a3      	str	r3, [r4, #8]
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	071a      	lsls	r2, r3, #28
 800498a:	d52f      	bpl.n	80049ec <__swbuf_r+0x84>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	b36b      	cbz	r3, 80049ec <__swbuf_r+0x84>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	b2f6      	uxtb	r6, r6
 8004996:	1ac0      	subs	r0, r0, r3
 8004998:	6963      	ldr	r3, [r4, #20]
 800499a:	4637      	mov	r7, r6
 800499c:	4283      	cmp	r3, r0
 800499e:	dc04      	bgt.n	80049aa <__swbuf_r+0x42>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 f944 	bl	8004c30 <_fflush_r>
 80049a8:	bb30      	cbnz	r0, 80049f8 <__swbuf_r+0x90>
 80049aa:	68a3      	ldr	r3, [r4, #8]
 80049ac:	3001      	adds	r0, #1
 80049ae:	3b01      	subs	r3, #1
 80049b0:	60a3      	str	r3, [r4, #8]
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	6022      	str	r2, [r4, #0]
 80049b8:	701e      	strb	r6, [r3, #0]
 80049ba:	6963      	ldr	r3, [r4, #20]
 80049bc:	4283      	cmp	r3, r0
 80049be:	d004      	beq.n	80049ca <__swbuf_r+0x62>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	07db      	lsls	r3, r3, #31
 80049c4:	d506      	bpl.n	80049d4 <__swbuf_r+0x6c>
 80049c6:	2e0a      	cmp	r6, #10
 80049c8:	d104      	bne.n	80049d4 <__swbuf_r+0x6c>
 80049ca:	4621      	mov	r1, r4
 80049cc:	4628      	mov	r0, r5
 80049ce:	f000 f92f 	bl	8004c30 <_fflush_r>
 80049d2:	b988      	cbnz	r0, 80049f8 <__swbuf_r+0x90>
 80049d4:	4638      	mov	r0, r7
 80049d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <__swbuf_r+0x9c>)
 80049da:	429c      	cmp	r4, r3
 80049dc:	d101      	bne.n	80049e2 <__swbuf_r+0x7a>
 80049de:	68ac      	ldr	r4, [r5, #8]
 80049e0:	e7cf      	b.n	8004982 <__swbuf_r+0x1a>
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <__swbuf_r+0xa0>)
 80049e4:	429c      	cmp	r4, r3
 80049e6:	bf08      	it	eq
 80049e8:	68ec      	ldreq	r4, [r5, #12]
 80049ea:	e7ca      	b.n	8004982 <__swbuf_r+0x1a>
 80049ec:	4621      	mov	r1, r4
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 f81e 	bl	8004a30 <__swsetup_r>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d0cb      	beq.n	8004990 <__swbuf_r+0x28>
 80049f8:	f04f 37ff 	mov.w	r7, #4294967295
 80049fc:	e7ea      	b.n	80049d4 <__swbuf_r+0x6c>
 80049fe:	bf00      	nop
 8004a00:	08005704 	.word	0x08005704
 8004a04:	08005724 	.word	0x08005724
 8004a08:	080056e4 	.word	0x080056e4

08004a0c <_write_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	4611      	mov	r1, r2
 8004a14:	2200      	movs	r2, #0
 8004a16:	4d05      	ldr	r5, [pc, #20]	; (8004a2c <_write_r+0x20>)
 8004a18:	602a      	str	r2, [r5, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f7fc f9e1 	bl	8000de2 <_write>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_write_r+0x1e>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_write_r+0x1e>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	20001594 	.word	0x20001594

08004a30 <__swsetup_r>:
 8004a30:	4b32      	ldr	r3, [pc, #200]	; (8004afc <__swsetup_r+0xcc>)
 8004a32:	b570      	push	{r4, r5, r6, lr}
 8004a34:	681d      	ldr	r5, [r3, #0]
 8004a36:	4606      	mov	r6, r0
 8004a38:	460c      	mov	r4, r1
 8004a3a:	b125      	cbz	r5, 8004a46 <__swsetup_r+0x16>
 8004a3c:	69ab      	ldr	r3, [r5, #24]
 8004a3e:	b913      	cbnz	r3, 8004a46 <__swsetup_r+0x16>
 8004a40:	4628      	mov	r0, r5
 8004a42:	f7ff fcfb 	bl	800443c <__sinit>
 8004a46:	4b2e      	ldr	r3, [pc, #184]	; (8004b00 <__swsetup_r+0xd0>)
 8004a48:	429c      	cmp	r4, r3
 8004a4a:	d10f      	bne.n	8004a6c <__swsetup_r+0x3c>
 8004a4c:	686c      	ldr	r4, [r5, #4]
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a54:	0719      	lsls	r1, r3, #28
 8004a56:	d42c      	bmi.n	8004ab2 <__swsetup_r+0x82>
 8004a58:	06dd      	lsls	r5, r3, #27
 8004a5a:	d411      	bmi.n	8004a80 <__swsetup_r+0x50>
 8004a5c:	2309      	movs	r3, #9
 8004a5e:	6033      	str	r3, [r6, #0]
 8004a60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	81a3      	strh	r3, [r4, #12]
 8004a6a:	e03e      	b.n	8004aea <__swsetup_r+0xba>
 8004a6c:	4b25      	ldr	r3, [pc, #148]	; (8004b04 <__swsetup_r+0xd4>)
 8004a6e:	429c      	cmp	r4, r3
 8004a70:	d101      	bne.n	8004a76 <__swsetup_r+0x46>
 8004a72:	68ac      	ldr	r4, [r5, #8]
 8004a74:	e7eb      	b.n	8004a4e <__swsetup_r+0x1e>
 8004a76:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <__swsetup_r+0xd8>)
 8004a78:	429c      	cmp	r4, r3
 8004a7a:	bf08      	it	eq
 8004a7c:	68ec      	ldreq	r4, [r5, #12]
 8004a7e:	e7e6      	b.n	8004a4e <__swsetup_r+0x1e>
 8004a80:	0758      	lsls	r0, r3, #29
 8004a82:	d512      	bpl.n	8004aaa <__swsetup_r+0x7a>
 8004a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a86:	b141      	cbz	r1, 8004a9a <__swsetup_r+0x6a>
 8004a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	d002      	beq.n	8004a96 <__swsetup_r+0x66>
 8004a90:	4630      	mov	r0, r6
 8004a92:	f000 f98d 	bl	8004db0 <_free_r>
 8004a96:	2300      	movs	r3, #0
 8004a98:	6363      	str	r3, [r4, #52]	; 0x34
 8004a9a:	89a3      	ldrh	r3, [r4, #12]
 8004a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004aa0:	81a3      	strh	r3, [r4, #12]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6063      	str	r3, [r4, #4]
 8004aa6:	6923      	ldr	r3, [r4, #16]
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f043 0308 	orr.w	r3, r3, #8
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	b94b      	cbnz	r3, 8004aca <__swsetup_r+0x9a>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac0:	d003      	beq.n	8004aca <__swsetup_r+0x9a>
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f000 f927 	bl	8004d18 <__smakebuf_r>
 8004aca:	89a0      	ldrh	r0, [r4, #12]
 8004acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ad0:	f010 0301 	ands.w	r3, r0, #1
 8004ad4:	d00a      	beq.n	8004aec <__swsetup_r+0xbc>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60a3      	str	r3, [r4, #8]
 8004ada:	6963      	ldr	r3, [r4, #20]
 8004adc:	425b      	negs	r3, r3
 8004ade:	61a3      	str	r3, [r4, #24]
 8004ae0:	6923      	ldr	r3, [r4, #16]
 8004ae2:	b943      	cbnz	r3, 8004af6 <__swsetup_r+0xc6>
 8004ae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ae8:	d1ba      	bne.n	8004a60 <__swsetup_r+0x30>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	0781      	lsls	r1, r0, #30
 8004aee:	bf58      	it	pl
 8004af0:	6963      	ldrpl	r3, [r4, #20]
 8004af2:	60a3      	str	r3, [r4, #8]
 8004af4:	e7f4      	b.n	8004ae0 <__swsetup_r+0xb0>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e7f7      	b.n	8004aea <__swsetup_r+0xba>
 8004afa:	bf00      	nop
 8004afc:	20000018 	.word	0x20000018
 8004b00:	08005704 	.word	0x08005704
 8004b04:	08005724 	.word	0x08005724
 8004b08:	080056e4 	.word	0x080056e4

08004b0c <_close_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	2300      	movs	r3, #0
 8004b10:	4d05      	ldr	r5, [pc, #20]	; (8004b28 <_close_r+0x1c>)
 8004b12:	4604      	mov	r4, r0
 8004b14:	4608      	mov	r0, r1
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	f7fc f97f 	bl	8000e1a <_close>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d102      	bne.n	8004b26 <_close_r+0x1a>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	b103      	cbz	r3, 8004b26 <_close_r+0x1a>
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	20001594 	.word	0x20001594

08004b2c <__sflush_r>:
 8004b2c:	898a      	ldrh	r2, [r1, #12]
 8004b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b30:	4605      	mov	r5, r0
 8004b32:	0710      	lsls	r0, r2, #28
 8004b34:	460c      	mov	r4, r1
 8004b36:	d457      	bmi.n	8004be8 <__sflush_r+0xbc>
 8004b38:	684b      	ldr	r3, [r1, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	dc04      	bgt.n	8004b48 <__sflush_r+0x1c>
 8004b3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	dc01      	bgt.n	8004b48 <__sflush_r+0x1c>
 8004b44:	2000      	movs	r0, #0
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b4a:	2e00      	cmp	r6, #0
 8004b4c:	d0fa      	beq.n	8004b44 <__sflush_r+0x18>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b54:	682f      	ldr	r7, [r5, #0]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	d032      	beq.n	8004bc0 <__sflush_r+0x94>
 8004b5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	075a      	lsls	r2, r3, #29
 8004b60:	d505      	bpl.n	8004b6e <__sflush_r+0x42>
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	1ac0      	subs	r0, r0, r3
 8004b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b68:	b10b      	cbz	r3, 8004b6e <__sflush_r+0x42>
 8004b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b6c:	1ac0      	subs	r0, r0, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4602      	mov	r2, r0
 8004b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b74:	4628      	mov	r0, r5
 8004b76:	6a21      	ldr	r1, [r4, #32]
 8004b78:	47b0      	blx	r6
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	d106      	bne.n	8004b8e <__sflush_r+0x62>
 8004b80:	6829      	ldr	r1, [r5, #0]
 8004b82:	291d      	cmp	r1, #29
 8004b84:	d82c      	bhi.n	8004be0 <__sflush_r+0xb4>
 8004b86:	4a29      	ldr	r2, [pc, #164]	; (8004c2c <__sflush_r+0x100>)
 8004b88:	40ca      	lsrs	r2, r1
 8004b8a:	07d6      	lsls	r6, r2, #31
 8004b8c:	d528      	bpl.n	8004be0 <__sflush_r+0xb4>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	6062      	str	r2, [r4, #4]
 8004b92:	6922      	ldr	r2, [r4, #16]
 8004b94:	04d9      	lsls	r1, r3, #19
 8004b96:	6022      	str	r2, [r4, #0]
 8004b98:	d504      	bpl.n	8004ba4 <__sflush_r+0x78>
 8004b9a:	1c42      	adds	r2, r0, #1
 8004b9c:	d101      	bne.n	8004ba2 <__sflush_r+0x76>
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	b903      	cbnz	r3, 8004ba4 <__sflush_r+0x78>
 8004ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ba6:	602f      	str	r7, [r5, #0]
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d0cb      	beq.n	8004b44 <__sflush_r+0x18>
 8004bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	d002      	beq.n	8004bba <__sflush_r+0x8e>
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f8fb 	bl	8004db0 <_free_r>
 8004bba:	2000      	movs	r0, #0
 8004bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8004bbe:	e7c2      	b.n	8004b46 <__sflush_r+0x1a>
 8004bc0:	6a21      	ldr	r1, [r4, #32]
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	47b0      	blx	r6
 8004bc8:	1c41      	adds	r1, r0, #1
 8004bca:	d1c7      	bne.n	8004b5c <__sflush_r+0x30>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0c4      	beq.n	8004b5c <__sflush_r+0x30>
 8004bd2:	2b1d      	cmp	r3, #29
 8004bd4:	d001      	beq.n	8004bda <__sflush_r+0xae>
 8004bd6:	2b16      	cmp	r3, #22
 8004bd8:	d101      	bne.n	8004bde <__sflush_r+0xb2>
 8004bda:	602f      	str	r7, [r5, #0]
 8004bdc:	e7b2      	b.n	8004b44 <__sflush_r+0x18>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	e7ae      	b.n	8004b46 <__sflush_r+0x1a>
 8004be8:	690f      	ldr	r7, [r1, #16]
 8004bea:	2f00      	cmp	r7, #0
 8004bec:	d0aa      	beq.n	8004b44 <__sflush_r+0x18>
 8004bee:	0793      	lsls	r3, r2, #30
 8004bf0:	bf18      	it	ne
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	680e      	ldr	r6, [r1, #0]
 8004bf6:	bf08      	it	eq
 8004bf8:	694b      	ldreq	r3, [r1, #20]
 8004bfa:	1bf6      	subs	r6, r6, r7
 8004bfc:	600f      	str	r7, [r1, #0]
 8004bfe:	608b      	str	r3, [r1, #8]
 8004c00:	2e00      	cmp	r6, #0
 8004c02:	dd9f      	ble.n	8004b44 <__sflush_r+0x18>
 8004c04:	4633      	mov	r3, r6
 8004c06:	463a      	mov	r2, r7
 8004c08:	4628      	mov	r0, r5
 8004c0a:	6a21      	ldr	r1, [r4, #32]
 8004c0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004c10:	47e0      	blx	ip
 8004c12:	2800      	cmp	r0, #0
 8004c14:	dc06      	bgt.n	8004c24 <__sflush_r+0xf8>
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	e790      	b.n	8004b46 <__sflush_r+0x1a>
 8004c24:	4407      	add	r7, r0
 8004c26:	1a36      	subs	r6, r6, r0
 8004c28:	e7ea      	b.n	8004c00 <__sflush_r+0xd4>
 8004c2a:	bf00      	nop
 8004c2c:	20400001 	.word	0x20400001

08004c30 <_fflush_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	690b      	ldr	r3, [r1, #16]
 8004c34:	4605      	mov	r5, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	b913      	cbnz	r3, 8004c40 <_fflush_r+0x10>
 8004c3a:	2500      	movs	r5, #0
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	b118      	cbz	r0, 8004c4a <_fflush_r+0x1a>
 8004c42:	6983      	ldr	r3, [r0, #24]
 8004c44:	b90b      	cbnz	r3, 8004c4a <_fflush_r+0x1a>
 8004c46:	f7ff fbf9 	bl	800443c <__sinit>
 8004c4a:	4b14      	ldr	r3, [pc, #80]	; (8004c9c <_fflush_r+0x6c>)
 8004c4c:	429c      	cmp	r4, r3
 8004c4e:	d11b      	bne.n	8004c88 <_fflush_r+0x58>
 8004c50:	686c      	ldr	r4, [r5, #4]
 8004c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ef      	beq.n	8004c3a <_fflush_r+0xa>
 8004c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c5c:	07d0      	lsls	r0, r2, #31
 8004c5e:	d404      	bmi.n	8004c6a <_fflush_r+0x3a>
 8004c60:	0599      	lsls	r1, r3, #22
 8004c62:	d402      	bmi.n	8004c6a <_fflush_r+0x3a>
 8004c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c66:	f7ff fcac 	bl	80045c2 <__retarget_lock_acquire_recursive>
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	f7ff ff5d 	bl	8004b2c <__sflush_r>
 8004c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c74:	4605      	mov	r5, r0
 8004c76:	07da      	lsls	r2, r3, #31
 8004c78:	d4e0      	bmi.n	8004c3c <_fflush_r+0xc>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	059b      	lsls	r3, r3, #22
 8004c7e:	d4dd      	bmi.n	8004c3c <_fflush_r+0xc>
 8004c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c82:	f7ff fc9f 	bl	80045c4 <__retarget_lock_release_recursive>
 8004c86:	e7d9      	b.n	8004c3c <_fflush_r+0xc>
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <_fflush_r+0x70>)
 8004c8a:	429c      	cmp	r4, r3
 8004c8c:	d101      	bne.n	8004c92 <_fflush_r+0x62>
 8004c8e:	68ac      	ldr	r4, [r5, #8]
 8004c90:	e7df      	b.n	8004c52 <_fflush_r+0x22>
 8004c92:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <_fflush_r+0x74>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	bf08      	it	eq
 8004c98:	68ec      	ldreq	r4, [r5, #12]
 8004c9a:	e7da      	b.n	8004c52 <_fflush_r+0x22>
 8004c9c:	08005704 	.word	0x08005704
 8004ca0:	08005724 	.word	0x08005724
 8004ca4:	080056e4 	.word	0x080056e4

08004ca8 <_lseek_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4604      	mov	r4, r0
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4d05      	ldr	r5, [pc, #20]	; (8004cc8 <_lseek_r+0x20>)
 8004cb4:	602a      	str	r2, [r5, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7fc f8d3 	bl	8000e62 <_lseek>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_lseek_r+0x1e>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_lseek_r+0x1e>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	20001594 	.word	0x20001594

08004ccc <__swhatbuf_r>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	460e      	mov	r6, r1
 8004cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	2900      	cmp	r1, #0
 8004cd8:	461d      	mov	r5, r3
 8004cda:	b096      	sub	sp, #88	; 0x58
 8004cdc:	da08      	bge.n	8004cf0 <__swhatbuf_r+0x24>
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	061a      	lsls	r2, r3, #24
 8004ce8:	d410      	bmi.n	8004d0c <__swhatbuf_r+0x40>
 8004cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cee:	e00e      	b.n	8004d0e <__swhatbuf_r+0x42>
 8004cf0:	466a      	mov	r2, sp
 8004cf2:	f000 f8b7 	bl	8004e64 <_fstat_r>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	dbf1      	blt.n	8004cde <__swhatbuf_r+0x12>
 8004cfa:	9a01      	ldr	r2, [sp, #4]
 8004cfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d04:	425a      	negs	r2, r3
 8004d06:	415a      	adcs	r2, r3
 8004d08:	602a      	str	r2, [r5, #0]
 8004d0a:	e7ee      	b.n	8004cea <__swhatbuf_r+0x1e>
 8004d0c:	2340      	movs	r3, #64	; 0x40
 8004d0e:	2000      	movs	r0, #0
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	b016      	add	sp, #88	; 0x58
 8004d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d18 <__smakebuf_r>:
 8004d18:	898b      	ldrh	r3, [r1, #12]
 8004d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d1c:	079d      	lsls	r5, r3, #30
 8004d1e:	4606      	mov	r6, r0
 8004d20:	460c      	mov	r4, r1
 8004d22:	d507      	bpl.n	8004d34 <__smakebuf_r+0x1c>
 8004d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	6163      	str	r3, [r4, #20]
 8004d30:	b002      	add	sp, #8
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	466a      	mov	r2, sp
 8004d36:	ab01      	add	r3, sp, #4
 8004d38:	f7ff ffc8 	bl	8004ccc <__swhatbuf_r>
 8004d3c:	9900      	ldr	r1, [sp, #0]
 8004d3e:	4605      	mov	r5, r0
 8004d40:	4630      	mov	r0, r6
 8004d42:	f7ff fc69 	bl	8004618 <_malloc_r>
 8004d46:	b948      	cbnz	r0, 8004d5c <__smakebuf_r+0x44>
 8004d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d4c:	059a      	lsls	r2, r3, #22
 8004d4e:	d4ef      	bmi.n	8004d30 <__smakebuf_r+0x18>
 8004d50:	f023 0303 	bic.w	r3, r3, #3
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	e7e3      	b.n	8004d24 <__smakebuf_r+0xc>
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <__smakebuf_r+0x7c>)
 8004d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	6020      	str	r0, [r4, #0]
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	9b00      	ldr	r3, [sp, #0]
 8004d6c:	6120      	str	r0, [r4, #16]
 8004d6e:	6163      	str	r3, [r4, #20]
 8004d70:	9b01      	ldr	r3, [sp, #4]
 8004d72:	b15b      	cbz	r3, 8004d8c <__smakebuf_r+0x74>
 8004d74:	4630      	mov	r0, r6
 8004d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d7a:	f000 f885 	bl	8004e88 <_isatty_r>
 8004d7e:	b128      	cbz	r0, 8004d8c <__smakebuf_r+0x74>
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	89a0      	ldrh	r0, [r4, #12]
 8004d8e:	4305      	orrs	r5, r0
 8004d90:	81a5      	strh	r5, [r4, #12]
 8004d92:	e7cd      	b.n	8004d30 <__smakebuf_r+0x18>
 8004d94:	080043d5 	.word	0x080043d5

08004d98 <__malloc_lock>:
 8004d98:	4801      	ldr	r0, [pc, #4]	; (8004da0 <__malloc_lock+0x8>)
 8004d9a:	f7ff bc12 	b.w	80045c2 <__retarget_lock_acquire_recursive>
 8004d9e:	bf00      	nop
 8004da0:	20001588 	.word	0x20001588

08004da4 <__malloc_unlock>:
 8004da4:	4801      	ldr	r0, [pc, #4]	; (8004dac <__malloc_unlock+0x8>)
 8004da6:	f7ff bc0d 	b.w	80045c4 <__retarget_lock_release_recursive>
 8004daa:	bf00      	nop
 8004dac:	20001588 	.word	0x20001588

08004db0 <_free_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4605      	mov	r5, r0
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d040      	beq.n	8004e3a <_free_r+0x8a>
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f0c      	subs	r4, r1, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfb8      	it	lt
 8004dc2:	18e4      	addlt	r4, r4, r3
 8004dc4:	f7ff ffe8 	bl	8004d98 <__malloc_lock>
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <_free_r+0x8c>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	b933      	cbnz	r3, 8004ddc <_free_r+0x2c>
 8004dce:	6063      	str	r3, [r4, #4]
 8004dd0:	6014      	str	r4, [r2, #0]
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dd8:	f7ff bfe4 	b.w	8004da4 <__malloc_unlock>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d908      	bls.n	8004df2 <_free_r+0x42>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	1821      	adds	r1, r4, r0
 8004de4:	428b      	cmp	r3, r1
 8004de6:	bf01      	itttt	eq
 8004de8:	6819      	ldreq	r1, [r3, #0]
 8004dea:	685b      	ldreq	r3, [r3, #4]
 8004dec:	1809      	addeq	r1, r1, r0
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	e7ed      	b.n	8004dce <_free_r+0x1e>
 8004df2:	461a      	mov	r2, r3
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b10b      	cbz	r3, 8004dfc <_free_r+0x4c>
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d9fa      	bls.n	8004df2 <_free_r+0x42>
 8004dfc:	6811      	ldr	r1, [r2, #0]
 8004dfe:	1850      	adds	r0, r2, r1
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d10b      	bne.n	8004e1c <_free_r+0x6c>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	4401      	add	r1, r0
 8004e08:	1850      	adds	r0, r2, r1
 8004e0a:	4283      	cmp	r3, r0
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	d1e0      	bne.n	8004dd2 <_free_r+0x22>
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4401      	add	r1, r0
 8004e16:	6011      	str	r1, [r2, #0]
 8004e18:	6053      	str	r3, [r2, #4]
 8004e1a:	e7da      	b.n	8004dd2 <_free_r+0x22>
 8004e1c:	d902      	bls.n	8004e24 <_free_r+0x74>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	e7d6      	b.n	8004dd2 <_free_r+0x22>
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	1821      	adds	r1, r4, r0
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	bf01      	itttt	eq
 8004e2c:	6819      	ldreq	r1, [r3, #0]
 8004e2e:	685b      	ldreq	r3, [r3, #4]
 8004e30:	1809      	addeq	r1, r1, r0
 8004e32:	6021      	streq	r1, [r4, #0]
 8004e34:	6063      	str	r3, [r4, #4]
 8004e36:	6054      	str	r4, [r2, #4]
 8004e38:	e7cb      	b.n	8004dd2 <_free_r+0x22>
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	2000158c 	.word	0x2000158c

08004e40 <_read_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4604      	mov	r4, r0
 8004e44:	4608      	mov	r0, r1
 8004e46:	4611      	mov	r1, r2
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4d05      	ldr	r5, [pc, #20]	; (8004e60 <_read_r+0x20>)
 8004e4c:	602a      	str	r2, [r5, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f7fb ffaa 	bl	8000da8 <_read>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_read_r+0x1e>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_read_r+0x1e>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20001594 	.word	0x20001594

08004e64 <_fstat_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	2300      	movs	r3, #0
 8004e68:	4d06      	ldr	r5, [pc, #24]	; (8004e84 <_fstat_r+0x20>)
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	602b      	str	r3, [r5, #0]
 8004e72:	f7fb ffdd 	bl	8000e30 <_fstat>
 8004e76:	1c43      	adds	r3, r0, #1
 8004e78:	d102      	bne.n	8004e80 <_fstat_r+0x1c>
 8004e7a:	682b      	ldr	r3, [r5, #0]
 8004e7c:	b103      	cbz	r3, 8004e80 <_fstat_r+0x1c>
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	bd38      	pop	{r3, r4, r5, pc}
 8004e82:	bf00      	nop
 8004e84:	20001594 	.word	0x20001594

08004e88 <_isatty_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	4d05      	ldr	r5, [pc, #20]	; (8004ea4 <_isatty_r+0x1c>)
 8004e8e:	4604      	mov	r4, r0
 8004e90:	4608      	mov	r0, r1
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	f7fb ffdb 	bl	8000e4e <_isatty>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d102      	bne.n	8004ea2 <_isatty_r+0x1a>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	b103      	cbz	r3, 8004ea2 <_isatty_r+0x1a>
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
 8004ea4:	20001594 	.word	0x20001594

08004ea8 <_init>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr

08004eb4 <_fini>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	bf00      	nop
 8004eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eba:	bc08      	pop	{r3}
 8004ebc:	469e      	mov	lr, r3
 8004ebe:	4770      	bx	lr
